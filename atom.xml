<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dumeng&#39;s Blog</title>
  
  <subtitle>writedown everything</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://dumengblog.club/"/>
  <updated>2019-12-15T13:26:17.438Z</updated>
  <id>http://dumengblog.club/</id>
  
  <author>
    <name>dumeng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何判断两个字符由相同的字符串组成</title>
    <link href="http://dumengblog.club/2019/12/15/%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E4%B8%A4%E4%B8%AA%E5%AD%97%E7%AC%A6%E7%94%B1%E7%9B%B8%E5%90%8C%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BB%84%E6%88%90/"/>
    <id>http://dumengblog.club/2019/12/15/如何判断两个字符由相同的字符串组成/</id>
    <published>2019-12-15T13:21:41.000Z</published>
    <updated>2019-12-15T13:26:17.438Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1.问题描述"></a>1.问题描述</h4><a id="more"></a><p>由相同的字符组成是指组成两个字符串的字母以及各个字母的个数是一样的，只是排列顺序不同。</p><p>例如 “aba”和“aab”就是相同的数组</p><h4 id="2-解题分析"><a href="#2-解题分析" class="headerlink" title="2.解题分析"></a>2.解题分析</h4><p>首先，我们可以将字符串改成byte类型的数组进行排序，然后在进行对比，看是否相等。</p><h4 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 如何判断两个字符串是否有相同的字符串组成 </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">stringIssame</span><span class="params">(String s1,String s2)</span></span>&#123;</span><br><span class="line"><span class="keyword">byte</span>[]b1 = s1.getBytes();</span><br><span class="line"><span class="keyword">byte</span>[]b2=s2.getBytes();</span><br><span class="line">Arrays.sort(b1);</span><br><span class="line">Arrays.sort(b2);</span><br><span class="line">s1=<span class="keyword">new</span> String(b1);</span><br><span class="line">s2=<span class="keyword">new</span> String(b2);</span><br><span class="line"><span class="keyword">if</span>(s1.equals(s2))</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String s1=<span class="string">"aba"</span>;</span><br><span class="line">String s2=<span class="string">"aab"</span>;</span><br><span class="line">System.out.println(stringIssame(s1, s2));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-问题描述&quot;&gt;&lt;a href=&quot;#1-问题描述&quot; class=&quot;headerlink&quot; title=&quot;1.问题描述&quot;&gt;&lt;/a&gt;1.问题描述&lt;/h4&gt;
    
    </summary>
    
    
    
      <category term="算法" scheme="http://dumengblog.club/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>如何实现字符串的反转</title>
    <link href="http://dumengblog.club/2019/12/15/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%8F%8D%E8%BD%AC/"/>
    <id>http://dumengblog.club/2019/12/15/如何实现字符串的反转/</id>
    <published>2019-12-15T12:36:58.000Z</published>
    <updated>2019-12-15T12:42:25.988Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1.问题描述"></a>1.问题描述</h4><a id="more"></a><p>把一个句子中的单词进行反转</p><p>例如，“how are you”</p><p>进行反转后</p><p>输出“you are how”</p><h4 id="2-解题分析"><a href="#2-解题分析" class="headerlink" title="2.解题分析"></a>2.解题分析</h4><p>这道题的解决方法比较简单，只需要进行两次字符反转的操作即可，第1次对整个字符串中的字符进行反转，反转结果为: “uoy era woh”,通过这次的反转已经实现了 单词顺序的反转，只不过每个单词中字符的顺序反了，接下来只需要对每个单词进行字符反转即可得到想要的结果:“you are how”。</p><h4 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 如何实现字符串的反转 </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">char</span> []ca,<span class="keyword">int</span> begin,<span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(begin&lt;end)&#123;</span><br><span class="line"><span class="keyword">char</span> tmp=ca[begin];</span><br><span class="line">ca[begin]=ca[end];</span><br><span class="line">ca[end]=tmp ;</span><br><span class="line">begin++;</span><br><span class="line">end--;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">reverseSt</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> []ca=s.toCharArray();</span><br><span class="line">reverse(ca, <span class="number">0</span>, ca.length-<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> begin=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ca.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(ca[i]==<span class="string">' '</span>)&#123;</span><br><span class="line">reverse(ca, begin, i-<span class="number">1</span>);</span><br><span class="line">begin=i+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//由于最后一个单词无空格，所以得在循环后再执行一遍字符串反转</span></span><br><span class="line">reverse(ca, begin, ca.length-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> String(ca);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String str=<span class="keyword">new</span> String(<span class="string">"how are you"</span>);</span><br><span class="line">System.out.println(reverseSt(str));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-问题描述&quot;&gt;&lt;a href=&quot;#1-问题描述&quot; class=&quot;headerlink&quot; title=&quot;1.问题描述&quot;&gt;&lt;/a&gt;1.问题描述&lt;/h4&gt;
    
    </summary>
    
    
    
      <category term="算法" scheme="http://dumengblog.club/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>如何判断一个数组中数值是否连续相邻</title>
    <link href="http://dumengblog.club/2019/12/15/%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E6%95%B0%E7%BB%84%E4%B8%AD%E6%95%B0%E5%80%BC%E6%98%AF%E5%90%A6%E8%BF%9E%E7%BB%AD%E7%9B%B8%E9%82%BB/"/>
    <id>http://dumengblog.club/2019/12/15/如何判断一个数组中数值是否连续相邻/</id>
    <published>2019-12-15T12:06:14.000Z</published>
    <updated>2019-12-15T12:14:02.886Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h4 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1.题目描述"></a>1.题目描述</h4><p>一个数组序列， 元素取值可能是0 ~ 6535中的任意一个数， 相同数值不会重复出现。0是例外，可以反复出现。设计一种算法，当从该数组序列中随意选取5个数值，判断这5个数值是否连续相邻。需要注意以下4点:</p><p>   1) 5个数值允许是乱序的，例如{8,7,5,0,6}。</p><p>   2) 0可以通配任意数值，例如{8,7,5,0,6 }中的0可以通配成9或者4。</p><p>   3) 0可以多次出现。</p><p>   4)全0算连续，只有一个非0算连续。</p><h4 id="2-解题分析"><a href="#2-解题分析" class="headerlink" title="2.解题分析"></a>2.解题分析</h4><p>如果没有0的存在，要组成连续的数列，最大值和最小值的差距必须是4存在0的情况下，只要最大值和最小值的差跟小于4就可以D所以应找出数列中非0的最大值和非0的最小值，时间复杂度为0(n)，如果非0最大-非0最小+1≤≈5 (即非0最大一非0最小&lt;=4)，那么这5个数值连续相邻，否则，不连续相邻。因此，该算法的时间复杂度为0(m)。 </p><h4 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 如何判断一个数组中数值是否相邻 </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">iscontinuous</span><span class="params">(<span class="keyword">int</span> []a)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> max=a[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> min=a[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]!=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;max)&#123;</span><br><span class="line">max=a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a[i]&lt;min)&#123;</span><br><span class="line">min=a[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(max-min&gt;a.length-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> []a=<span class="keyword">new</span> <span class="keyword">int</span> []&#123;<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">5</span>&#125;;</span><br><span class="line">System.out.println(iscontinuous(a));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;h4 id=&quot;1-题目描述&quot;&gt;&lt;a href=&quot;#1-题目描述&quot; class=&quot;headerlink&quot; title=&quot;1.题目描述&quot;&gt;&lt;/a&gt;1.题目描述&lt;/h4&gt;&lt;p&gt;一个数组序列， 元素取值可能是0 ~ 6535中的任意一个数， 相同数
      
    
    </summary>
    
    
    
      <category term="算法" scheme="http://dumengblog.club/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>如何求数组中两个元素的最小距离</title>
    <link href="http://dumengblog.club/2019/12/12/%E5%A6%82%E4%BD%95%E6%B1%82%E6%95%B0%E7%BB%84%E4%B8%AD%E4%B8%A4%E4%B8%AA%E5%85%83%E7%B4%A0%E7%9A%84%E6%9C%80%E5%B0%8F%E8%B7%9D%E7%A6%BB/"/>
    <id>http://dumengblog.club/2019/12/12/如何求数组中两个元素的最小距离/</id>
    <published>2019-12-12T03:09:07.000Z</published>
    <updated>2019-12-12T03:20:41.890Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1.题目描述"></a>1.题目描述</h4><a id="more"></a><p>给定一个数组元素，数组中含有重复元素，给出两个数n1,n2，求这两个数字在数组中所出现位置的最小距离，</p><p>例如：</p><p>数组{4,5,6,7,4,6,4,7,8,5,6,4,3,10,8}中</p><p>4和8的最小距离是：2</p><p>6和7的最小距离是：7</p><h4 id="2-解题分析"><a href="#2-解题分析" class="headerlink" title="2.解题分析"></a>2.解题分析</h4><p>首先遍历数组，会遇到以下两种情况：</p><p>1.遇到与n1相等的值，记录下数组下标的位置n1_index,通过n1_index与上次遍历到n2的下标位置n2_index的差，可以求出最近一次遍历到的n1和n2的距离。</p><p>2.遇到与n2相等的值，记录下数组下标的位置n2_index,通过n2_index与上次遍历到n1的下标位置n1_index的差，可以求出最近一次遍历到的n1和n2的距离。</p><p>定义一个变量md记录n1_index和n2_index的最小距离，这样只需遍历一次数组即可求出最小值。</p><h4 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 如何求数组中两个元素的最小距离 </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a&lt;b?a:b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">mindistans</span><span class="params">(<span class="keyword">int</span> []a,<span class="keyword">int</span> n1,<span class="keyword">int</span> n2)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a==<span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> Integer.MIN_VALUE;</span><br><span class="line"><span class="keyword">int</span> md=Integer.MIN_VALUE+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> n1_index=-<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> n2_index=-<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]==n1)&#123;</span><br><span class="line">n1_index=i;</span><br><span class="line"><span class="keyword">if</span>(n2_index&gt;=<span class="number">0</span>)</span><br><span class="line">md=min(Math.abs(md),Math.abs(n2_index-n1_index));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a[i]==n2)&#123;</span><br><span class="line">n2_index=i;</span><br><span class="line"><span class="keyword">if</span>(n1_index&gt;=<span class="number">0</span>)</span><br><span class="line">md=min(Math.abs(md),Math.abs(n2_index-n1_index));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> md;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> []a=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">8</span>&#125;;</span><br><span class="line">System.out.println(mindistans(a, <span class="number">3</span>,<span class="number">7</span>));</span><br><span class="line">System.out.println(mindistans(a, <span class="number">6</span>,<span class="number">7</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-题目描述&quot;&gt;&lt;a href=&quot;#1-题目描述&quot; class=&quot;headerlink&quot; title=&quot;1.题目描述&quot;&gt;&lt;/a&gt;1.题目描述&lt;/h4&gt;
    
    </summary>
    
    
    
      <category term="算法" scheme="http://dumengblog.club/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>如何求绝对值最小的数</title>
    <link href="http://dumengblog.club/2019/12/11/%E5%A6%82%E4%BD%95%E6%B1%82%E7%BB%9D%E5%AF%B9%E5%80%BC%E6%9C%80%E5%B0%8F%E7%9A%84%E6%95%B0/"/>
    <id>http://dumengblog.club/2019/12/11/如何求绝对值最小的数/</id>
    <published>2019-12-11T11:00:49.000Z</published>
    <updated>2019-12-11T13:19:25.493Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1.问题描述"></a>1.问题描述</h4><a id="more"></a><p>​        有一个升序排列的数组，数组中可能有正数，负数或0，求数组中元素的绝对值最小的数，例如，数组{-10，-5，-2，-7,  15  ,  50}绝对值最小的是-2</p><h4 id="2-解题分析"><a href="#2-解题分析" class="headerlink" title="2.解题分析"></a>2.解题分析</h4><p>​        求数组最小的绝对值，分为三种情况：</p><ol><li><p>数组全是负数绝对值最小的一定是最后一个数</p></li><li><p>数组全是正数即第一个数为非负数，那么绝对值最小的一定是第一个数</p></li><li><p>数组即有正数又有负数时，首先找到正数与负数的分界点，如果分界点恰好为0，那么0就是绝对值最小的数。否则就要通过比较分界点左右的正数和负数的绝对值来确定最小的数。</p><p>那么如何来查找正数与负数的分界点呢?最简单的方法仍然是顺序遍历数组，找出第一个非负数(前提是数组中既有正数又有负数)，接着通过比较分界点两个数的值来找出绝对值最小的数。这种方法在最坏的情况下时间复杂度为0(n)。下面主要介绍采用二分法来查找正数与负数的分界点的方法。其主要思路为:取数组中间位置的值a[ mid]。①a[ mid]=0,那么这个数就是绝对值最小的数;②a[ mid]&gt;0,如果a[mid-1]&lt;0, 那么就找到了分界点，通过比较a[ mid]与a[ mid -1 ]的绝对值就可以找到数组中绝对值最小的数，如果a[ mid -1]=0，那么a[ mid-I]就是要找的数，否则接着在数组的左半部分查找;③a[ mid] &lt;0,如果a[ mid+1]&gt;0,那么通过比较a[mid]与a[ mid +1]的绝对值即可，如果a[ mid+1]=0,那么a[ mid +1]就是要查找的数，否则接着在数组的右半部分继续查找</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 如何求绝对值最小的数 </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMinAbsoluteValue</span><span class="params">(<span class="keyword">int</span> []a)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a==<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> Integer.MIN_VALUE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> len=a.length;</span><br><span class="line"><span class="keyword">if</span>(len&lt;<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> Integer.MIN_VALUE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a[<span class="number">0</span>]&gt;=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> a[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a[len-<span class="number">1</span>]&lt;<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> a[len-<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mid=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> end=len-<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> start=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> absmin=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">mid=start+(end-start)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(a[mid]==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[mid]&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[mid-<span class="number">1</span>]&gt;<span class="number">0</span>)</span><br><span class="line">end=mid-<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[mid-<span class="number">1</span>]==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a[mid+<span class="number">1</span>]&lt;<span class="number">0</span>)</span><br><span class="line">start=mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[mid+<span class="number">1</span>]==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a[mid]&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[mid]&lt;Math.abs(a[mid-<span class="number">1</span>]))</span><br><span class="line">absmin=a[mid];</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">absmin=a[mid-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Math.abs(a[mid])&lt;a[mid+<span class="number">1</span>])</span><br><span class="line">absmin=a[mid];</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">absmin=a[mid+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> absmin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> []a=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">10</span>,-<span class="number">5</span>,-<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>&#125;;</span><br><span class="line">System.out.println(getMinAbsoluteValue(a));</span><br><span class="line"><span class="keyword">int</span> []a1=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">System.out.println(getMinAbsoluteValue(a1));</span><br><span class="line"><span class="keyword">int</span> []a2=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">7</span>,-<span class="number">6</span>,-<span class="number">4</span>,-<span class="number">3</span>,-<span class="number">2</span>,-<span class="number">1</span>&#125;;</span><br><span class="line">System.out.println(getMinAbsoluteValue(a2));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-问题描述&quot;&gt;&lt;a href=&quot;#1-问题描述&quot; class=&quot;headerlink&quot; title=&quot;1.问题描述&quot;&gt;&lt;/a&gt;1.问题描述&lt;/h4&gt;
    
    </summary>
    
    
    
      <category term="算法" scheme="http://dumengblog.club/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>如何用递归求出数组中的最大元素</title>
    <link href="http://dumengblog.club/2019/12/11/%E5%A6%82%E4%BD%95%E7%94%A8%E9%80%92%E5%BD%92%E6%B1%82%E5%87%BA%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0/"/>
    <id>http://dumengblog.club/2019/12/11/如何用递归求出数组中的最大元素/</id>
    <published>2019-12-11T09:26:16.000Z</published>
    <updated>2019-12-11T09:41:54.589Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1.题目描述"></a>1.题目描述</h4><a id="more"></a><p>如何用递归求出数组中的最大元素</p><h4 id="2-解题分析"><a href="#2-解题分析" class="headerlink" title="2.解题分析"></a>2.解题分析</h4><p>定义一个变量max为数组的第一个元素，然后从第二个元素开始遍历，在遍历过程中，每个元素都与max进行比较，如果大于max则将当前值赋给max。当遍历数组后，最大值也就出来了。</p><h4 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 如何用递归求出数组中的最大元素 </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a&gt;b?a:b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maxnum</span><span class="params">(<span class="keyword">int</span>[]a,<span class="keyword">int</span> begin)</span></span>&#123;</span><br><span class="line"><span class="comment">//假如只剩下一个比较的数字</span></span><br><span class="line"><span class="keyword">if</span>(a.length-begin==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> a[begin];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> max(a[begin],maxnum(a, a[begin+<span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[]=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;;</span><br><span class="line">System.out.println(maxnum(a, <span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-题目描述&quot;&gt;&lt;a href=&quot;#1-题目描述&quot; class=&quot;headerlink&quot; title=&quot;1.题目描述&quot;&gt;&lt;/a&gt;1.题目描述&lt;/h4&gt;
    
    </summary>
    
    
    
      <category term="算法" scheme="http://dumengblog.club/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>如何找出数组中只出现一次的数字</title>
    <link href="http://dumengblog.club/2019/12/11/%E5%A6%82%E4%BD%95%E6%89%BE%E5%87%BA%E6%95%B0%E7%BB%84%E4%B8%AD%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <id>http://dumengblog.club/2019/12/11/如何找出数组中只出现一次的数字/</id>
    <published>2019-12-11T09:01:18.000Z</published>
    <updated>2019-12-11T09:25:01.562Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1.题目描述"></a>1.题目描述</h4><a id="more"></a><p>一个整形数组里除了一个数字外，其他数字都出现两次。找出这个只出现一次的数字</p><p>例如：</p><p>数组：{2,2,1,3,4,3,4}</p><p>输出：1</p><h4 id="2-解题分析"><a href="#2-解题分析" class="headerlink" title="2.解题分析"></a>2.解题分析</h4><p>这里可以用异或这个符号：“^”,如果两个相同的数字进行异或结果为零，如果0和当前数字进行异或，则结果还为当前数字，所以我们从头遍历数组，对每个数字进行异或操作，最终剩下的就是只出现一次的数字。</p><h4 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 如何找出数组中只出现一次的数字 </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findNotDouble</span><span class="params">(<span class="keyword">int</span> []a)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> result=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</span><br><span class="line">result^=a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[]a=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">System.out.println(findNotDouble(a));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-题目描述&quot;&gt;&lt;a href=&quot;#1-题目描述&quot; class=&quot;headerlink&quot; title=&quot;1.题目描述&quot;&gt;&lt;/a&gt;1.题目描述&lt;/h4&gt;
    
    </summary>
    
    
    
      <category term="算法" scheme="http://dumengblog.club/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>如何把一个数组循环右移K位</title>
    <link href="http://dumengblog.club/2019/12/10/%E5%A6%82%E4%BD%95%E6%8A%8A%E4%B8%80%E4%B8%AA%E6%95%B0%E7%BB%84%E5%BE%AA%E7%8E%AF%E5%8F%B3%E7%A7%BBK%E4%BD%8D/"/>
    <id>http://dumengblog.club/2019/12/10/如何把一个数组循环右移K位/</id>
    <published>2019-12-10T13:01:22.000Z</published>
    <updated>2019-12-10T13:15:29.916Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1.题目描述"></a>1.题目描述</h4><a id="more"></a><p>把数组序列[1,2,3,4,5,6,7,8]右移两位变为[7, 8, 1, 2, 3, 4, 5, 6]</p><h4 id="2-解题分析"><a href="#2-解题分析" class="headerlink" title="2.解题分析"></a>2.解题分析</h4><p>首先将数组分为两段数组序列：</p><p>[1, 2, 3, 4, 5, 6]</p><p>[7, 8]</p><ol><li><p>首先先将第一段数组序列反转</p><p>[6，5，4，3，2，1，7，8]</p></li><li><p>再将第二段数组序列反转</p><p>[6，5，4，3，2，1，8,   7]</p></li><li><p>再将整个数组反转即得到结果</p><p>[7, 8, 1, 2, 3, 4, 5, 6]</p></li></ol><h4 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 如何把一个数组循环右移<span class="title">K</span>位 </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span>[]a ,<span class="keyword">int</span> begin,<span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(begin&lt;end)&#123;</span><br><span class="line"><span class="keyword">int</span> tmp=a[begin];</span><br><span class="line">a[begin]=a[end];</span><br><span class="line">a[end]=tmp;</span><br><span class="line">begin++;</span><br><span class="line">end--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shiftK</span><span class="params">(<span class="keyword">int</span>[]a,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n=a.length;</span><br><span class="line">k=k%n;</span><br><span class="line">reverse(a, n-k, n-<span class="number">1</span>);</span><br><span class="line">reverse(a,<span class="number">0</span>,n-k-<span class="number">1</span>);</span><br><span class="line">reverse(a,<span class="number">0</span>,n-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> []a=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;;</span><br><span class="line">System.out.println(Arrays.toString(a));</span><br><span class="line">shiftK(a, <span class="number">2</span>);</span><br><span class="line">System.out.println(Arrays.toString(a));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-题目描述&quot;&gt;&lt;a href=&quot;#1-题目描述&quot; class=&quot;headerlink&quot; title=&quot;1.题目描述&quot;&gt;&lt;/a&gt;1.题目描述&lt;/h4&gt;
    
    </summary>
    
    
    
      <category term="算法" scheme="http://dumengblog.club/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>如何求数组中两两相加等于max的组合种数</title>
    <link href="http://dumengblog.club/2019/12/10/%E5%A6%82%E4%BD%95%E6%B1%82%E6%95%B0%E7%BB%84%E4%B8%AD%E4%B8%A4%E4%B8%A4%E7%9B%B8%E5%8A%A0%E7%AD%89%E4%BA%8E20%E7%9A%84%E7%BB%84%E5%90%88%E7%A7%8D%E6%95%B0/"/>
    <id>http://dumengblog.club/2019/12/10/如何求数组中两两相加等于20的组合种数/</id>
    <published>2019-12-10T12:13:42.000Z</published>
    <updated>2019-12-10T12:31:51.997Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1. 问题描述"></a>1. 问题描述</h4><a id="more"></a><p>给定一个数组[7,3,4,8,1], max=9 </p><p>这个数组中满足条件的组合为8,1</p><p>则输出 8,1</p><h4 id="2-问题解析"><a href="#2-问题解析" class="headerlink" title="2.问题解析"></a>2.问题解析</h4><p>方法1：“蛮力”法</p><p>两重循环判断两个数的和是否为max，时间复杂度为O(n²)</p><p>方法2：排序法</p><p>先对数组元素进行排序，此算法的时间复杂度为O(nlogn)，对排序后的数组分别从前到后和从后向前遍历，当满足a[start]+a[end]&gt;max ，如果存在两个数的和等于max则一定在[start,end+1]之间，当满足a[start]+a[end]&lt;max ，如果存在两个数的和等于max则一定在[start+1,end]之间.</p><h4 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 求数组中两两相加等于20的组合种数 </span>&#123;</span><br><span class="line"><span class="comment">//蛮力法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">findSumNumber</span><span class="params">(<span class="keyword">int</span> []a,<span class="keyword">int</span> max)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;a.length;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]+a[j]==max)&#123;</span><br><span class="line"><span class="keyword">return</span> a[i]+<span class="string">" "</span>+a[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//排序法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">findSumNumber1</span><span class="params">(<span class="keyword">int</span> []a,<span class="keyword">int</span> max)</span></span>&#123;</span><br><span class="line">Arrays.sort(a);</span><br><span class="line"><span class="keyword">int</span> start=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> end=a.length-<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(start&lt;end)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[start]+a[end]&gt;max)&#123;</span><br><span class="line">end--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[start]+a[end]&lt;max)&#123;</span><br><span class="line">start++;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(a[start]+<span class="string">" "</span>+a[end]);</span><br><span class="line">start++;</span><br><span class="line">end--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> []a=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">7</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">1</span>&#125;;</span><br><span class="line">System.out.println(findSumNumber(a, <span class="number">9</span>));</span><br><span class="line">findSumNumber1(a, <span class="number">9</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-问题描述&quot;&gt;&lt;a href=&quot;#1-问题描述&quot; class=&quot;headerlink&quot; title=&quot;1. 问题描述&quot;&gt;&lt;/a&gt;1. 问题描述&lt;/h4&gt;
    
    </summary>
    
    
    
      <category term="算法" scheme="http://dumengblog.club/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>leetcode5_最长回文串</title>
    <link href="http://dumengblog.club/2019/12/10/leetcode5-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E4%B8%B2/"/>
    <id>http://dumengblog.club/2019/12/10/leetcode5-最长回文串/</id>
    <published>2019-12-10T05:47:40.000Z</published>
    <updated>2019-12-10T06:01:25.380Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1.题目描述"></a>1.题目描述</h4><a id="more"></a><p>给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。</p><p>示例 1：</p><p>输入: “babad”<br>输出: “bab”<br>注意: “aba” 也是一个有效答案。</p><p>示例 2：</p><p>输入: “cbbd”<br>输出: “bb”</p><h4 id="2-解题分析"><a href="#2-解题分析" class="headerlink" title="2.解题分析"></a>2.解题分析</h4><p>首先这里需要利用substring（）这个方法</p><p> substring() 方法返回字符串的子字符串。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public String substring(int beginIndex, int endIndex)</span><br></pre></td></tr></table></figure><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul><li><p><strong>beginIndex</strong> – 起始索引（包括）, 索引从 0 开始。</p></li><li><p><strong>endIndex</strong> – 结束索引（不包括）。</p></li></ul><p>首先一个回文数，是分偶数和奇数的。</p><p>例如：</p><p>偶数：bbcc</p><p>奇数：aba</p><p>所以我们在这里用到的是<strong>中心扩散法</strong>，假如回文数是奇数，则以自己为中心两边向外扩散，同时判断新加的两个数是否相等，而偶数就要先判断两边的数字是否相等。</p><h4 id="3-代码"><a href="#3-代码" class="headerlink" title="3. 代码"></a>3. 代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution4</span> </span>&#123;</span><br><span class="line">String res=<span class="string">""</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s==<span class="keyword">null</span>||s.length()&lt;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">        expandAroundCenter(s, i, i);</span><br><span class="line">        expandAroundCenter(s, i, i+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">expandAroundCenter</span><span class="params">(String s,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(left&gt;=<span class="number">0</span>&amp;&amp;right&lt;s.length()&amp;&amp;s.charAt(left)==s.charAt(right))&#123;</span><br><span class="line">    left--;</span><br><span class="line">    right++;</span><br><span class="line">    &#125;</span><br><span class="line">    String cur=s.substring(left+<span class="number">1</span>,right);</span><br><span class="line">    <span class="keyword">if</span>(cur.length()&gt;res.length())&#123;</span><br><span class="line">    res=cur;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-题目描述&quot;&gt;&lt;a href=&quot;#1-题目描述&quot; class=&quot;headerlink&quot; title=&quot;1.题目描述&quot;&gt;&lt;/a&gt;1.题目描述&lt;/h4&gt;
    
    </summary>
    
    
    
      <category term="算法" scheme="http://dumengblog.club/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>leetcode4_寻找两个有序数组的中位数</title>
    <link href="http://dumengblog.club/2019/12/09/leetcode4-%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/"/>
    <id>http://dumengblog.club/2019/12/09/leetcode4-寻找两个有序数组的中位数/</id>
    <published>2019-12-09T14:06:30.000Z</published>
    <updated>2019-12-09T14:20:31.206Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1.题目描述"></a>1.题目描述</h4><a id="more"></a><p>给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。</p><p>请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。</p><p>你可以假设 nums1 和 nums2 不会同时为空。</p><blockquote><p>示例1:</p><p>nums1 = [1, 3]<br> nums2 = [2]</p><p>则中位数是 2.0</p></blockquote><blockquote><p>示例2:</p><p>nums1 = [1, 2]<br> nums2 = [3, 4]</p><p>则中位数是 (2 + 3)/2 = 2.5</p></blockquote><h4 id="2-解题分析"><a href="#2-解题分析" class="headerlink" title="2.解题分析"></a>2.解题分析</h4><p>先从题干进行分析 , 本题若没有时间复杂度要求,将是一道极简单的题.</p><p>我们可以先将两个数组合并,再排序 ,以此完成解题.</p><p>本题给出的时间复杂度为 O(log(m + n)) , 由此我们想到<strong>二分查找</strong>,事实也确乎如此.</p><p>下面开始分析问题,先从中位数的作用入手</p><p> <strong>中位数</strong> : 将一个集合划分为两个长度相等的子集，其中一个子集中的元素总是大于另一个子集中的元素。 </p><p>对本题而言,我们要做的就是把有序数组A,B进行分割,共分为四个子数组,分别记作left_A,left_B,left_A,right_A.</p><p>将left_A和left_B合并记作left_part,</p><p>同理,得到right_part.</p><p>如果我们可以确认:</p><blockquote><ol><li>len(left_part) = len(right_part)</li><li>max(left_part) ≤ min(right_part)</li></ol></blockquote><p>那么,我们就得到了两个长度相同的部分,且其中一部分的元素总是大于或等于另一部分的元素.</p><p>到这里,我们就已经很接近答案了.</p><p>要满足上面的两个条件,我们只需要保证：</p><p><img src="/../asset/14927224-1ba888260ba02871.png" alt="14927224-1ba888260ba02871"></p><p><strong>注意:</strong> 其中<code>1</code>中的 m - i + n - j + 1的 <code>&quot;+1&quot;</code>的原因是存由于在奇偶的差别.</p><p>从<code>1</code>中我们可以看出,j 可以被 i 表示,所以,接下来的问题变为:</p><p><strong>找到满足<code>2</code>的 i</strong></p><p>对此,我们可以使用二分查找(<em>具体查找的过程,以及临界分析写在下面注释中</em>)</p><p>当找到目标对象 i 后 , 中位数为 :</p><p><img src="/../asset/14927224-d7f3cf5caf331963-1575901137870.png" alt="14927224-d7f3cf5caf331963"></p><h4 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = nums1.length;</span><br><span class="line">        <span class="keyword">int</span> n = nums2.length;</span><br><span class="line">        <span class="comment">// 保证num1的长度总是小于或等于nums2</span></span><br><span class="line">        <span class="keyword">if</span>(m&gt;n)&#123;</span><br><span class="line">            <span class="keyword">int</span>[] temp = nums1;nums1 = nums2; nums2 = temp;</span><br><span class="line">            <span class="keyword">int</span> lengthTemp = m; m = n; n = lengthTemp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> imax = m,imin = <span class="number">0</span>,half = (m+n+<span class="number">1</span>)/<span class="number">2</span> ;</span><br><span class="line">        <span class="comment">//开始查找</span></span><br><span class="line">        <span class="keyword">while</span>(imax &gt;= imin)&#123;</span><br><span class="line">            <span class="keyword">int</span> i = (imax+imin)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">int</span> j = half - i;</span><br><span class="line">            <span class="comment">// i 过小且i可以再增大</span></span><br><span class="line">            <span class="keyword">if</span>(i&lt;imax &amp;&amp; nums2[j-<span class="number">1</span>]&gt;nums1[i])&#123;</span><br><span class="line">                imin = i +<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// i 过大且i可以再减小</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i&gt;imin &amp;&amp; nums1[i-<span class="number">1</span>]&gt;nums2[j])&#123;</span><br><span class="line">                imax = i -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">int</span> leftmax = <span class="number">0</span>;</span><br><span class="line">                <span class="comment">// left_num1为空时</span></span><br><span class="line">                <span class="keyword">if</span>(i == <span class="number">0</span>) &#123;leftmax = nums2[j-<span class="number">1</span>];&#125;</span><br><span class="line">                <span class="comment">// left_num2为空时</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(j == <span class="number">0</span>)&#123; leftmax = nums1[i-<span class="number">1</span>];&#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;leftmax = Math.max(nums1[i-<span class="number">1</span>],nums2[j-<span class="number">1</span>]);&#125;</span><br><span class="line">                <span class="comment">// 当m+n 为奇数时,返回奇数解</span></span><br><span class="line">                <span class="keyword">if</span>((m+n)%<span class="number">2</span> == <span class="number">1</span>)  <span class="keyword">return</span> leftmax;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">int</span> rightmin = <span class="number">0</span>;</span><br><span class="line">                <span class="comment">// right_num1为空时</span></span><br><span class="line">                <span class="keyword">if</span>(i == m)&#123; rightmin = nums2[j];&#125;</span><br><span class="line">                <span class="comment">// right_num2为空时</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(j == n) &#123;rightmin = nums1[i];&#125;</span><br><span class="line">                <span class="keyword">else</span>&#123; rightmin = Math.min(nums1[i],nums2[j]);&#125;</span><br><span class="line">                <span class="comment">// 当m+n 为偶数时,返回偶数解</span></span><br><span class="line">                <span class="keyword">return</span> (leftmax+rightmin)/<span class="number">2.0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;        </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-题目描述&quot;&gt;&lt;a href=&quot;#1-题目描述&quot; class=&quot;headerlink&quot; title=&quot;1.题目描述&quot;&gt;&lt;/a&gt;1.题目描述&lt;/h4&gt;
    
    </summary>
    
    
    
      <category term="算法" scheme="http://dumengblog.club/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>leetcode3_无重复字符的最长子串</title>
    <link href="http://dumengblog.club/2019/12/09/leetcode3-%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/"/>
    <id>http://dumengblog.club/2019/12/09/leetcode3-无重复字符的最长子串/</id>
    <published>2019-12-09T12:54:17.000Z</published>
    <updated>2019-12-09T13:22:31.986Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1.题目描述"></a>1.题目描述</h4><a id="more"></a><p>给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。</p><p>示例 1:</p><p>输入: “abcabcbb”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “abc”，所以其长度为 3。</p><p>示例 2:</p><p>输入: “bbbbb”<br>输出: 1<br>解释: 因为无重复字符的最长子串是 “b”，所以其长度为 1。</p><p>示例 3:</p><p>输入: “pwwkew”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “wke”，所以其长度为 3。<br>     请注意，你的答案必须是 子串 的长度，”pwke” 是一个子序列，不是子串。</p><h4 id="2-题解"><a href="#2-题解" class="headerlink" title="2.题解"></a>2.题解</h4><p> 定义两个指针，start和end，代表当前窗口的开始和结束位置，同样使用hashset,当窗口中出现重复的字符时，start++,没有重复时，end++,每次更新长度的最大值 </p><h4 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n = s.length();</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> end=<span class="number">0</span>,start=<span class="number">0</span>;</span><br><span class="line">    Set&lt;Character&gt; set=<span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span>(start&lt;n &amp;&amp; end&lt;n)&#123;</span><br><span class="line">      <span class="keyword">if</span>(set.contains(s.charAt(end)))&#123;</span><br><span class="line">       set.remove(s.charAt(start++));</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        set.add(s.charAt(end++));</span><br><span class="line">        res=Math.max(res,end-start);</span><br><span class="line">      &#125; </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  </span><br><span class="line">  &#125;  </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-题目描述&quot;&gt;&lt;a href=&quot;#1-题目描述&quot; class=&quot;headerlink&quot; title=&quot;1.题目描述&quot;&gt;&lt;/a&gt;1.题目描述&lt;/h4&gt;
    
    </summary>
    
    
    
      <category term="算法" scheme="http://dumengblog.club/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>leetcode2_两数相加</title>
    <link href="http://dumengblog.club/2019/12/09/leetcode2-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
    <id>http://dumengblog.club/2019/12/09/leetcode2-两数相加/</id>
    <published>2019-12-09T12:41:38.000Z</published>
    <updated>2019-12-09T12:50:41.227Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1.题目描述"></a>1.题目描述</h4><a id="more"></a><p>给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。</p><p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p><p>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><p>示例：</p><p>输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br>输出：7 -&gt; 0 -&gt; 8<br>原因：342 + 465 = 807</p><h4 id="2-题解"><a href="#2-题解" class="headerlink" title="2.题解"></a>2.题解</h4><p>其实本题，远比看着简单许多，就是两个链表相加的意思,首先新建一个链表，将传入的两个链表的第一个值相加，赋给新建的链表头结点的下一个节点，然后再循环这个过程直到两个链表为空，返回新建链表头结点的下一个节点。</p><h4 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">    ListNode n=<span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    ListNode cur=n;</span><br><span class="line">    ListNode p1=l1,p2=l2;</span><br><span class="line">    <span class="keyword">while</span>(p1!=<span class="keyword">null</span>||p2!=<span class="keyword">null</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(p1!=<span class="keyword">null</span>)&#123;</span><br><span class="line">    sum+=p1.val;</span><br><span class="line">    p1=p1.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p2!=<span class="keyword">null</span>)&#123;</span><br><span class="line">    sum+=p2.val;</span><br><span class="line">    p2=p2.next;</span><br><span class="line">    &#125;</span><br><span class="line">    cur.next=<span class="keyword">new</span> ListNode(sum%<span class="number">10</span>);</span><br><span class="line">    sum/=<span class="number">10</span>;</span><br><span class="line">    cur=cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(sum==<span class="number">1</span>)&#123;</span><br><span class="line">    cur.next=<span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n.next;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-题目描述&quot;&gt;&lt;a href=&quot;#1-题目描述&quot; class=&quot;headerlink&quot; title=&quot;1.题目描述&quot;&gt;&lt;/a&gt;1.题目描述&lt;/h4&gt;
    
    </summary>
    
    
    
      <category term="算法" scheme="http://dumengblog.club/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>leetcode1_两数之和</title>
    <link href="http://dumengblog.club/2019/12/09/leetcode-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <id>http://dumengblog.club/2019/12/09/leetcode-两数之和/</id>
    <published>2019-12-09T01:15:01.000Z</published>
    <updated>2019-12-09T01:38:12.467Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1. 题目描述"></a>1. 题目描述</h3><a id="more"></a><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p><p>示例:</p><p>给定 nums = [2, 7, 11, 15], target = 9</p><p>因为 nums[0] + nums[1] = 2 + 7 = 9<br>所以返回 [0, 1]</p><h3 id="2-题解"><a href="#2-题解" class="headerlink" title="2. 题解"></a>2. 题解</h3><p>个人本次利用了Hashmap来解决这道题，首先由于返回一个数组，所以要在方法体新建一个数组，并且返回这个数组，首先对传进来的数组进行判断是否为空。然后对数组遍历，一边把数据存储在hashmap里，key存数组的值，value存数组的下标。一边查询target减当前数组的值，如果查询到了，则将i放在新建的数组中，另一个就是找到的另一个值的下标。</p><h3 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">int</span>[]res=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">if</span>(nums==<span class="keyword">null</span>&amp;&amp;nums.length&lt;=<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        HashMap&lt;Integer,Integer&gt; map=<span class="keyword">new</span> HashMap&lt;Integer,Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> num=nums[i];</span><br><span class="line">            <span class="keyword">int</span> val=target-num;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(val))&#123;</span><br><span class="line">            res[<span class="number">0</span>]=i;</span><br><span class="line">            res[<span class="number">1</span>]=map.get(val);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            map.put(num, i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-题目描述&quot;&gt;&lt;a href=&quot;#1-题目描述&quot; class=&quot;headerlink&quot; title=&quot;1. 题目描述&quot;&gt;&lt;/a&gt;1. 题目描述&lt;/h3&gt;
    
    </summary>
    
    
    
      <category term="算法" scheme="http://dumengblog.club/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>如何找出数组中重复元素最多的数</title>
    <link href="http://dumengblog.club/2019/12/08/%E5%A6%82%E4%BD%95%E6%89%BE%E5%87%BA%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0%E6%9C%80%E5%A4%9A%E7%9A%84%E6%95%B0/"/>
    <id>http://dumengblog.club/2019/12/08/如何找出数组中重复元素最多的数/</id>
    <published>2019-12-08T04:43:34.000Z</published>
    <updated>2019-12-09T01:38:37.338Z</updated>
    
    <content type="html"><![CDATA[<p>1.</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.Map.Entry;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 如何找出数组中重复元素最多的数 </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findmost</span><span class="params">(<span class="keyword">int</span> []a)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> result=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//记录每个元素出现的次数</span></span><br><span class="line">Map &lt;Integer,Integer&gt; m=<span class="keyword">new</span> HashMap&lt;Integer,Integer&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(m.containsKey(a[i]))&#123;</span><br><span class="line">m.put(a[i], m.get(a[i])+<span class="number">1</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">m.put(a[i], <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//找出出现最多次数的数</span></span><br><span class="line"><span class="keyword">int</span> most=<span class="number">0</span>;</span><br><span class="line">Iterator it=m.entrySet().iterator();<span class="comment">//map.entrySet()是把HashMap类型的数据转换成集合类型;</span></span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">Map.Entry en=(Entry) it.next();</span><br><span class="line"><span class="keyword">int</span> key=(Integer) en.getKey();</span><br><span class="line"><span class="keyword">int</span> val=(Integer) en.getValue();</span><br><span class="line"><span class="keyword">if</span>(val&gt;most)&#123;</span><br><span class="line">result=key;</span><br><span class="line">most=val;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Random r=<span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">int</span> arr[]=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">arr[i]=r.nextInt(<span class="number">9</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">System.out.println(findmost(arr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="算法" scheme="http://dumengblog.club/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>找出数组中第二大的值</title>
    <link href="http://dumengblog.club/2019/12/08/%E6%89%BE%E5%87%BA%E6%95%B0%E7%BB%84%E4%B8%AD%E7%AC%AC%E4%BA%8C%E5%A4%A7%E7%9A%84%E5%80%BC/"/>
    <id>http://dumengblog.club/2019/12/08/找出数组中第二大的值/</id>
    <published>2019-12-08T04:27:18.000Z</published>
    <updated>2019-12-09T01:39:14.416Z</updated>
    
    <content type="html"><![CDATA[<p>1.</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 找出数组中第二大的值 </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">SecondMax</span><span class="params">(<span class="keyword">int</span> a[])</span></span>&#123;</span><br><span class="line"><span class="comment">//存储数组中最大值</span></span><br><span class="line"><span class="keyword">int</span> max=a[<span class="number">0</span>];</span><br><span class="line"><span class="comment">//存储数组中第二大的值</span></span><br><span class="line"><span class="keyword">int</span> secondmax=Integer.MIN_VALUE;</span><br><span class="line"><span class="comment">//遍历数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;a.length;i++)&#123;</span><br><span class="line"><span class="comment">//如果当前值大于数组的最大值，则第二大的值等于先前定义最大值，最大值等于当前值</span></span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;max)&#123;</span><br><span class="line">secondmax=max;</span><br><span class="line">max=a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a[i]&lt;max)&#123;</span><br><span class="line"><span class="comment">//如果当前值不比最大值大那就和第二大的值做对比</span></span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;secondmax)&#123;</span><br><span class="line">secondmax=a[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> secondmax;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Random r=<span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">int</span> arr[]=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">arr[i]=r.nextInt(<span class="number">9</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">System.out.println(SecondMax(arr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="算法" scheme="http://dumengblog.club/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>常考链表操作</title>
    <link href="http://dumengblog.club/2019/12/07/%E5%B8%B8%E8%80%83%E9%93%BE%E8%A1%A8%E6%93%8D%E4%BD%9C/"/>
    <id>http://dumengblog.club/2019/12/07/常考链表操作/</id>
    <published>2019-12-07T13:10:23.000Z</published>
    <updated>2019-12-07T13:24:45.566Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-链表反转"><a href="#1-链表反转" class="headerlink" title="1. 链表反转"></a>1. 链表反转</h4><p>改变指针方向，将头结点改为尾节点。本次给出全部代码，后来只给部分代码</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">int</span> value;</span><br><span class="line"></span><br><span class="line">​Node next=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">​<span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">this</span>.value=value;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">linkedlisttest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​Node head=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">​<span class="function"><span class="keyword">public</span> Node <span class="title">getHead</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">​Node newNode=<span class="keyword">new</span> Node(data);</span><br><span class="line"></span><br><span class="line">​<span class="keyword">if</span>(head==<span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">​head=newNode;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​Node tmp=head;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">while</span>(tmp.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">​tmp=tmp.next;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​tmp.next=newNode;</span><br><span class="line"></span><br><span class="line">​</span><br><span class="line"></span><br><span class="line">​</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printList</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​Node tmp = head;</span><br><span class="line"></span><br><span class="line">​</span><br><span class="line"></span><br><span class="line">​<span class="keyword">while</span> (tmp != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">​System.out.print(tmp.value+<span class="string">" "</span>);</span><br><span class="line"></span><br><span class="line">​tmp = tmp.next;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​<span class="comment">//链表反转</span></span><br><span class="line"></span><br><span class="line">​<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverseListNode</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​Node pReverseHead=head;<span class="comment">//设置反转后的头结点</span></span><br><span class="line"></span><br><span class="line">​Node pNode=head;<span class="comment">//当前节点</span></span><br><span class="line"></span><br><span class="line">​Node pPrev=<span class="keyword">null</span>;<span class="comment">//前一个节点</span></span><br><span class="line"></span><br><span class="line">​<span class="keyword">while</span>(pNode!=<span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">​<span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">​ * 例如i,m,n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">​    由于反转需要改变指针的指向，但是一旦改变了指针的指向就没有指针指向下一个数，所以需要在改变i到m的指针顺序时</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">​    ，提前将下一个数存起来。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">​*/</span></span><br><span class="line"></span><br><span class="line">​Node pNext=pNode.next;<span class="comment">//存储下一个节点</span></span><br><span class="line"></span><br><span class="line">​<span class="keyword">if</span>(pNext==<span class="keyword">null</span>)</span><br><span class="line"></span><br><span class="line">​pReverseHead=pNode;<span class="comment">//令当前节点为反转链表的头结点</span></span><br><span class="line"></span><br><span class="line">​</span><br><span class="line"></span><br><span class="line">​pNode.next=pPrev;<span class="comment">//将当前节点的下一个节点设为前一个节点</span></span><br><span class="line"></span><br><span class="line">​</span><br><span class="line"></span><br><span class="line">​pPrev=pNode;<span class="comment">//前一个节点为当前节点</span></span><br><span class="line"></span><br><span class="line">​pNode=pNext;<span class="comment">//当前节点向下走</span></span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">this</span>.head=pReverseHead;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​linkedlisttest l=<span class="keyword">new</span> linkedlisttest();</span><br><span class="line"></span><br><span class="line">​l.insert(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">​l.insert(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">​l.insert(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">​l.printList();</span><br><span class="line"></span><br><span class="line">​System.out.println(<span class="string">"\n链表反转："</span>);</span><br><span class="line"></span><br><span class="line">​l.reverseListNode(l.getHead());</span><br><span class="line"></span><br><span class="line">​l.printList();</span><br><span class="line"></span><br><span class="line">​</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="//dumengblog.club/2019/12/07/常考链表操作/E:%5CBlog%5CHexo%5Csource%5Casset%5Cwps6C1F.tmp.jpg" alt="img"> </p><h4 id="2-链表从尾到头输出"><a href="#2-链表从尾到头输出" class="headerlink" title="2 .链表从尾到头输出"></a>2 .链表从尾到头输出</h4><p>直接递归，等到后来二叉树三种遍历也是这个思想</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printListReversely</span><span class="params">(Node plistHead)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">if</span>(plistHead!=<span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">​printListReversely(plistHead.next);</span><br><span class="line"></span><br><span class="line">​System.out.print(plistHead.value+<span class="string">" "</span>);</span><br><span class="line"></span><br><span class="line">​</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">主函数：</span><br><span class="line"></span><br><span class="line">​<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​linkedlisttest l=<span class="keyword">new</span> linkedlisttest();</span><br><span class="line"></span><br><span class="line">​l.insert(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">​l.insert(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">​l.insert(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">​l.printList();</span><br><span class="line"></span><br><span class="line">​System.out.println(<span class="string">"\n链表从尾到头输出："</span>);</span><br><span class="line"></span><br><span class="line">​l.printListReversely(l.getHead());</span><br><span class="line"></span><br><span class="line">​</span><br><span class="line"></span><br><span class="line">​</span><br><span class="line"></span><br><span class="line">​&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="//dumengblog.club/2019/12/07/常考链表操作/E:%5CBlog%5CHexo%5Csource%5Casset%5Cwps6C2F.tmp.jpg" alt="img"> </p><h4 id="3-判断链表是否有环"><a href="#3-判断链表是否有环" class="headerlink" title="3. 判断链表是否有环"></a>3. 判断链表是否有环</h4><p>定义两个指针，一个快指针，一个慢指针，两个指针同时移动，快指针每次移动两步，慢指针移动一步，每次都比较，直到快指针等于慢指针为止。（fast先到底部为null则为无环链表）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">Isloop</span><span class="params">(Node head)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">​Node fast=head;</span><br><span class="line"></span><br><span class="line">​Node slow=head;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">if</span>(fast==<span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">while</span>(fast!=<span class="keyword">null</span>&amp;&amp;fast.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">​fast=fast.next.next;</span><br><span class="line"></span><br><span class="line">​slow=slow.next;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">if</span>(fast==slow)&#123;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​</span><br><span class="line"></span><br><span class="line">​</span><br><span class="line"></span><br><span class="line">​<span class="keyword">return</span> (fast!=<span class="keyword">null</span>&amp;&amp;fast.next!=<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">​&#125;</span><br></pre></td></tr></table></figure><h4 id="4-如何删除重复元素"><a href="#4-如何删除重复元素" class="headerlink" title="4. 如何删除重复元素"></a>4. 如何删除重复元素</h4><p>对链表进行双重遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteDuplecate</span><span class="params">(Node head)</span></span>&#123;</span><br><span class="line">Node p=head;</span><br><span class="line"><span class="keyword">while</span>(p!=<span class="keyword">null</span>)&#123;</span><br><span class="line">Node q=p;</span><br><span class="line"><span class="keyword">while</span>(q.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(p.value==q.next.value)&#123;</span><br><span class="line">q.next=q.next.next;</span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line">q=q.next;</span><br><span class="line">&#125;</span><br><span class="line">p=p.next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/../asset/wps6C50.tmp.jpg" alt="img"> </p><p>9.4 如何找到倒数第k个元素</p><p>设置两个指针，一个正常从头到尾遍历，另一个先前移k-1步然后依次遍历，当这个快指针先到达尾部，则另一个指针的位置就是倒数第k个元素。</p><p>主函数：</p><p><img src="/../asset/wps6C51.tmp.jpg" alt="img"> </p><p>输出结果：</p><p><img src="/../asset/wps6C71.tmp.jpg" alt="img"> </p><p>9.5 判断两个链表是否相交</p><p>如果相交则有相同的尾节点</p><p>​    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isIntersect</span><span class="params">(Node h1,Node h2)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">if</span>(h1==<span class="keyword">null</span>||h2==<span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​Node tail=h1;</span><br><span class="line"></span><br><span class="line">​Node tail2=h2;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">while</span>(tail.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">​tail=tail.next;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">while</span>(tail2.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">​tail2=tail2.next;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">return</span> tail==tail2;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br></pre></td></tr></table></figure><p>9.6 链表排序</p><p>​    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">orderlist</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​Node nextNode = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">​Node curNode = head;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">while</span> (curNode.next != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">​nextNode = curNode.next;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">while</span> (nextNode != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">if</span> (curNode.data &gt; nextNode.data) &#123;</span><br><span class="line"></span><br><span class="line">​temp = curNode.data;</span><br><span class="line"></span><br><span class="line">​curNode.data = nextNode.data;</span><br><span class="line"></span><br><span class="line">​nextNode.data = temp;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​nextNode = nextNode.next;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​curNode = curNode.next;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-链表反转&quot;&gt;&lt;a href=&quot;#1-链表反转&quot; class=&quot;headerlink&quot; title=&quot;1. 链表反转&quot;&gt;&lt;/a&gt;1. 链表反转&lt;/h4&gt;&lt;p&gt;改变指针方向，将头结点改为尾节点。本次给出全部代码，后来只给部分代码&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="数据结构" scheme="http://dumengblog.club/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Java数据结构—-二叉树</title>
    <link href="http://dumengblog.club/2019/12/05/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94-%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://dumengblog.club/2019/12/05/Java数据结构—-二叉树/</id>
    <published>2019-12-05T12:04:11.000Z</published>
    <updated>2019-12-05T12:35:09.194Z</updated>
    
    <content type="html"><![CDATA[<h4 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树<a id="more"></a></h4><img src="/../asset/image-20191205200900883.png" alt="image-20191205200900883" style="zoom:50%;"><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> BianaryTree;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">treeNode</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> value;</span><br><span class="line">treeNode left;</span><br><span class="line">treeNode right;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">treeNode</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.value = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLeft</span><span class="params">(treeNode left)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.left = left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRight</span><span class="params">(treeNode right)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.right = right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">frontshow</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.print(value);</span><br><span class="line"><span class="keyword">if</span> (left != <span class="keyword">null</span>) &#123;</span><br><span class="line">left.frontshow();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (right != <span class="keyword">null</span>) &#123;</span><br><span class="line">right.frontshow();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showMid</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (left != <span class="keyword">null</span>) &#123;</span><br><span class="line">left.showMid();</span><br><span class="line">&#125;</span><br><span class="line">System.out.print(value);</span><br><span class="line"><span class="keyword">if</span> (right != <span class="keyword">null</span>) &#123;</span><br><span class="line">right.showMid();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showafter</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (left != <span class="keyword">null</span>) &#123;</span><br><span class="line">left.showafter();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (right != <span class="keyword">null</span>) &#123;</span><br><span class="line">right.showafter();</span><br><span class="line">&#125;</span><br><span class="line">System.out.print(value);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前序查找</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> treeNode <span class="title">frontSearch</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">treeNode target = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">// 对比当前节点的值</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.value == i) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 查找左儿子</span></span><br><span class="line"><span class="keyword">if</span> (left != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// 有可能查不到</span></span><br><span class="line">target = left.frontSearch(i);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不为空，说明左儿子已经查到</span></span><br><span class="line"><span class="keyword">if</span> (target != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 查找右儿子</span></span><br><span class="line"><span class="keyword">if</span> (right != <span class="keyword">null</span>) &#123;</span><br><span class="line">target = right.frontSearch(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">treeNode parent = <span class="keyword">this</span>;</span><br><span class="line"><span class="comment">// 判断左儿子</span></span><br><span class="line"><span class="keyword">if</span> (parent.left != <span class="keyword">null</span> &amp;&amp; parent.left.value == i) &#123;</span><br><span class="line">parent.left = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断右儿子</span></span><br><span class="line"><span class="keyword">if</span> (parent.right != <span class="keyword">null</span> &amp;&amp; parent.right.value == i) &#123;</span><br><span class="line">parent.right = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果都不是</span></span><br><span class="line"><span class="comment">// 递归检查并删除左儿子</span></span><br><span class="line">parent = left;</span><br><span class="line"><span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">parent.delete(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 递归检查并删除右儿子</span></span><br><span class="line">parent = right;</span><br><span class="line"><span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">parent.delete(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Binarytree</span> </span>&#123;</span><br><span class="line">treeNode root;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoot</span><span class="params">(treeNode root)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.root = root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> treeNode <span class="title">getRoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showFront</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">if</span> (root != <span class="keyword">null</span>)</span><br><span class="line">root.frontshow();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showMid</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">if</span> (root != <span class="keyword">null</span>)</span><br><span class="line">root.showMid();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showafter</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">if</span> (root != <span class="keyword">null</span>)</span><br><span class="line">root.showafter();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> treeNode <span class="title">frontSearch</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> root.frontSearch(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">if</span> (root.value == i) &#123;</span><br><span class="line">root = <span class="keyword">null</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">root.delete(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Binarytree binarytree = <span class="keyword">new</span> Binarytree();</span><br><span class="line">treeNode root = <span class="keyword">new</span> treeNode(<span class="number">1</span>);</span><br><span class="line">treeNode rootL = <span class="keyword">new</span> treeNode(<span class="number">2</span>);</span><br><span class="line">treeNode rootR = <span class="keyword">new</span> treeNode(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// 创建一个根节点</span></span><br><span class="line">binarytree.setRoot(root);</span><br><span class="line"><span class="comment">// 左子点</span></span><br><span class="line">root.setLeft(rootL);</span><br><span class="line"><span class="comment">// 右子点</span></span><br><span class="line">root.setRight(rootR);</span><br><span class="line"><span class="comment">// 为第二层的左子点创建两个子节点</span></span><br><span class="line">rootL.setLeft(<span class="keyword">new</span> treeNode(<span class="number">4</span>));</span><br><span class="line">rootL.setRight(<span class="keyword">new</span> treeNode(<span class="number">5</span>));</span><br><span class="line"><span class="comment">// 第二层右子点创建子节点</span></span><br><span class="line">rootR.setLeft(<span class="keyword">new</span> treeNode(<span class="number">6</span>));</span><br><span class="line">rootR.setRight(<span class="keyword">new</span> treeNode(<span class="number">7</span>));</span><br><span class="line">System.out.println(<span class="string">"前序遍历"</span>);</span><br><span class="line">binarytree.showFront();</span><br><span class="line">System.out.println(<span class="string">"\n中序遍历"</span>);</span><br><span class="line">binarytree.showMid();</span><br><span class="line">System.out.println(<span class="string">"\n后序遍历"</span>);</span><br><span class="line">binarytree.showafter();</span><br><span class="line">treeNode result = binarytree.frontSearch(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 输出一个对象，如果有就是查到了</span></span><br><span class="line">System.out.println(<span class="string">"\n"</span> + result);</span><br><span class="line"><span class="comment">// 删除一个子树</span></span><br><span class="line">binarytree.delete(<span class="number">3</span>);</span><br><span class="line">binarytree.showFront();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二叉顺序树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span></span>&#123;</span><br><span class="line"><span class="comment">//节点的权</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> value;</span><br><span class="line"><span class="comment">//左儿子</span></span><br><span class="line"><span class="keyword">public</span> TreeNode left;</span><br><span class="line"><span class="comment">//右儿子</span></span><br><span class="line"><span class="keyword">public</span> TreeNode right;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.value=value;</span><br><span class="line"><span class="keyword">this</span>.left=<span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">this</span>.right=<span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinaryTree</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> TreeNode root;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BinaryTree</span><span class="params">()</span></span>&#123;</span><br><span class="line">root=<span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span> <span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">TreeNode newNode=<span class="keyword">new</span> TreeNode(value); </span><br><span class="line"><span class="keyword">if</span>(root==<span class="keyword">null</span>)&#123;</span><br><span class="line">root=newNode;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">TreeNode current =root;</span><br><span class="line">TreeNode parent;</span><br><span class="line"><span class="comment">//寻找插入的位置</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">parent=current;</span><br><span class="line"><span class="keyword">if</span>(value&lt;current.value)&#123;</span><br><span class="line">current=current.left;</span><br><span class="line"><span class="keyword">if</span>(current==<span class="keyword">null</span>)&#123;</span><br><span class="line">parent.left=newNode;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">current=current.right;</span><br><span class="line"><span class="keyword">if</span>(current==<span class="keyword">null</span>)&#123;</span><br><span class="line">parent.right=newNode;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将数值输入构建二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span> []value)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;value.length;i++)&#123;</span><br><span class="line">insert(value[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中序遍历二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(TreeNode localRoot)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(localRoot!=<span class="keyword">null</span>)&#123;</span><br><span class="line">inOrder(localRoot.left);</span><br><span class="line">System.out.print(localRoot.value+<span class="string">" "</span>);</span><br><span class="line">inOrder(localRoot.right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inOrder</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.inOrder(<span class="keyword">this</span>.root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//先序遍历二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(TreeNode localRoot)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(localRoot!=<span class="keyword">null</span>)&#123;</span><br><span class="line">System.out.print(localRoot.value+<span class="string">" "</span>);</span><br><span class="line">preOrder(localRoot.left);</span><br><span class="line">preOrder(localRoot.right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.preOrder(<span class="keyword">this</span>.root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//后序遍历二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nextOrder</span><span class="params">(TreeNode localRoot)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(localRoot!=<span class="keyword">null</span>)&#123;</span><br><span class="line">nextOrder(localRoot.left);</span><br><span class="line">nextOrder(localRoot.right);</span><br><span class="line">System.out.print(localRoot.value+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nextOrder</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.nextOrder(<span class="keyword">this</span>.root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">BinaryTree tree=<span class="keyword">new</span> BinaryTree();</span><br><span class="line"><span class="keyword">int</span> []data=&#123;<span class="number">2</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">5</span>&#125;;</span><br><span class="line">tree.buildTree(data);</span><br><span class="line">System.out.println(<span class="string">"二叉树中序遍历"</span>);</span><br><span class="line">tree.inOrder();</span><br><span class="line">System.out.println(<span class="string">"\n二叉树先序遍历"</span>);</span><br><span class="line">tree.preOrder();</span><br><span class="line">System.out.println(<span class="string">"\n二叉树后序遍历"</span>);</span><br><span class="line">tree.nextOrder();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;二叉树&quot;&gt;&lt;a href=&quot;#二叉树&quot; class=&quot;headerlink&quot; title=&quot;二叉树&quot;&gt;&lt;/a&gt;二叉树&lt;/h4&gt;
    
    </summary>
    
    
    
      <category term="数据结构" scheme="http://dumengblog.club/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Java排序算法</title>
    <link href="http://dumengblog.club/2019/12/04/Java%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://dumengblog.club/2019/12/04/Java排序算法/</id>
    <published>2019-12-04T09:04:33.000Z</published>
    <updated>2019-12-05T12:35:29.265Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>选择排序</p><p>该方法基本原理如下：</p><p>1.给定一组数据，经过第一轮比较后得到最小的记录，然后将该记录与第一个记录的数据进行交换</p><p>2.然后接着对除了第一个数据进行比较，得到最小的记录，与第二个记录进行交换</p><p>3.直到比较的记录只有一个为止</p><a id="more"></a><p>以数组 [38 , 65 , 97 , 76 , 13 , 27 , 49] 为例</p><p>第一次排序：13  [65  97  76  38  27  49]</p><p>第一次排序：13  27  [97  76  38  65  49]</p><p>第一次排序：13  27  38  [76  97  65  49]</p><p>第一次排序：13  27  38   49 [97  65  76]</p><p>第一次排序：13  27  38   49  65  [97 76]</p><p>第一次排序：13  27  38   49  65   76[97]</p><p>最终排序结果：13  27  38   49   65  76  97</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">selectSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> []a=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">38</span>,<span class="number">65</span>,<span class="number">97</span>,<span class="number">76</span>,<span class="number">13</span>,<span class="number">27</span>,<span class="number">49</span>&#125;;</span><br><span class="line">selectSort(a);</span><br><span class="line">System.out.println(Arrays.toString(a));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span> []a )</span></span>&#123;</span><br><span class="line"><span class="comment">//确定最小的数</span></span><br><span class="line"><span class="keyword">int</span> temp=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//下标</span></span><br><span class="line"><span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</span><br><span class="line">temp=a[i];</span><br><span class="line">flag=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;a.length;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[j]&lt;temp)&#123;</span><br><span class="line">temp=a[j];</span><br><span class="line">flag=j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag!=i)&#123;</span><br><span class="line">a[flag]=a[i];</span><br><span class="line">a[i]=temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>插入排序</li></ol><p>和选择排序类似，假设第一个记录自成一个有序数列，其余记录皆为无序数列，接着从第二个记录开始，按照记录的大小依次将当前处理的记录插入到其之前的有序数列中，直至最后一个记录插入到有序数列中为止。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">insertSort</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Random r=<span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">int</span> []a=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">6</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</span><br><span class="line">a[i]=r.nextInt(<span class="number">9</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Arrays.toString(a));</span><br><span class="line">insertSort(a);</span><br><span class="line">System.out.println(Arrays.toString(a));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span> []arr)</span></span>&#123;</span><br><span class="line"><span class="comment">//遍历所有的数字</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> temp=arr[i];</span><br><span class="line"><span class="keyword">int</span> j=i;</span><br><span class="line"><span class="keyword">if</span>(arr[j-<span class="number">1</span>]&gt;temp)&#123;</span><br><span class="line"><span class="keyword">while</span>(j&gt;=<span class="number">1</span>&amp;&amp;arr[j-<span class="number">1</span>]&gt;temp)&#123;</span><br><span class="line">arr[j]=arr[j-<span class="number">1</span>];</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">arr[j]=temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>冒泡排序</li></ol><p>如气泡一样上升，从第一个记录开始，两个相邻的数据依次对比，当前面的记录大于后面的记录时，交换位置，重复到只有一个比较的数为止</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> [] arr=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">5</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">7</span>&#125;;</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">bubblesort(arr);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//比较length-1轮</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubblesort</span><span class="params">(<span class="keyword">int</span> [] arr)</span></span>&#123;</span><br><span class="line"><span class="comment">//控制比较多少轮</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line"><span class="comment">//控制比较的次数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;arr.length-i-<span class="number">1</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line"><span class="keyword">int</span> tmp=arr[j];</span><br><span class="line">arr[j]=arr[j+<span class="number">1</span>];</span><br><span class="line">arr[j+<span class="number">1</span>]=tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>归并排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeSort</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> []a=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">38</span>,<span class="number">65</span>,<span class="number">97</span>,<span class="number">76</span>,<span class="number">13</span>,<span class="number">27</span>,<span class="number">49</span>&#125;;</span><br><span class="line">sort(a,<span class="number">0</span>,a.length-<span class="number">1</span>);</span><br><span class="line">System.out.println(Arrays.toString(a));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] a,<span class="keyword">int</span> low,<span class="keyword">int</span> high)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (low+high)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(low&lt;high)&#123;</span><br><span class="line">            sort(a,low,mid);</span><br><span class="line">            sort(a,mid+<span class="number">1</span>,high);</span><br><span class="line">            <span class="comment">//左右归并</span></span><br><span class="line">            merge(a,low,mid,high);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> low, <span class="keyword">int</span> mid, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[high-low+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> i= low;</span><br><span class="line">        <span class="keyword">int</span> j = mid+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 把较小的数先移到新数组中</span></span><br><span class="line">        <span class="keyword">while</span>(i&lt;=mid &amp;&amp; j&lt;=high)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&lt;a[j])&#123;</span><br><span class="line">                temp[k++] = a[i++];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                temp[k++] = a[j++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 把左边剩余的数移入数组 </span></span><br><span class="line">        <span class="keyword">while</span>(i&lt;=mid)&#123;</span><br><span class="line">            temp[k++] = a[i++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 把右边边剩余的数移入数组</span></span><br><span class="line">        <span class="keyword">while</span>(j&lt;=high)&#123;</span><br><span class="line">            temp[k++] = a[j++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 把新数组中的数覆盖nums数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>;x&lt;temp.length;x++)&#123;</span><br><span class="line">            a[x+low] = temp[x];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li><p><strong>快速排序</strong></p><p><a href="https://blog.csdn.net/shujuelin/article/details/82423852" target="_blank" rel="noopener">原理</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Random r=<span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">int</span> []a=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">6</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</span><br><span class="line">a[i]=r.nextInt(<span class="number">9</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Arrays.toString(a));</span><br><span class="line">quicksort(a,<span class="number">0</span>,a.length-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(Arrays.toString(a));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quicksort</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(start&lt;end)&#123;</span><br><span class="line"><span class="comment">//把数组中第0个数字作为标准数</span></span><br><span class="line"><span class="keyword">int</span> st=arr[start];</span><br><span class="line"><span class="comment">//记录需要排序的下标</span></span><br><span class="line"><span class="keyword">int</span> low=start;</span><br><span class="line"><span class="keyword">int</span> high=end;</span><br><span class="line"><span class="comment">//循环找比标准数大的数和比它小的数</span></span><br><span class="line"><span class="keyword">while</span>(low&lt;high)&#123;</span><br><span class="line"><span class="comment">//右边的数字比标准数小，高的下标往前移</span></span><br><span class="line"><span class="keyword">while</span>(low&lt;high&amp;&amp;st&lt;=arr[high])&#123;</span><br><span class="line">high--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用右边的数字替换左边的数字</span></span><br><span class="line">arr[low]=arr[high];</span><br><span class="line"><span class="comment">//如果左边的数字比标准数小</span></span><br><span class="line"><span class="keyword">while</span>(low&lt;high&amp;&amp;arr[low]&lt;=st)&#123;</span><br><span class="line">low++;</span><br><span class="line">&#125;</span><br><span class="line">arr[high]=arr[low];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//把标准数赋给低的下标所在位置的元素</span></span><br><span class="line">arr[low]=st;</span><br><span class="line"><span class="comment">//处理所有小的数字</span></span><br><span class="line">quicksort(arr, start,low);</span><br><span class="line"><span class="comment">//处理所有大的数字</span></span><br><span class="line">quicksort(arr, low+<span class="number">1</span>,end);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;选择排序&lt;/p&gt;
&lt;p&gt;该方法基本原理如下：&lt;/p&gt;
&lt;p&gt;1.给定一组数据，经过第一轮比较后得到最小的记录，然后将该记录与第一个记录的数据进行交换&lt;/p&gt;
&lt;p&gt;2.然后接着对除了第一个数据进行比较，得到最小的记录，与第二个记录进行交换&lt;/p&gt;
&lt;p&gt;3.直到比较的记录只有一个为止&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="数据结构" scheme="http://dumengblog.club/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>java数据结构—-栈</title>
    <link href="http://dumengblog.club/2019/11/28/java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94-%E6%A0%88/"/>
    <id>http://dumengblog.club/2019/11/28/java数据结构—-栈/</id>
    <published>2019-11-28T03:18:16.000Z</published>
    <updated>2019-11-28T04:17:10.381Z</updated>
    
    <content type="html"><![CDATA[<p>栈是一种只能在一端进行插入和删除操作的特殊线性表。</p><p>其中，允许插入和删除的一端称为栈顶，另一端称为栈底。通常，将栈的插入操作称为入栈，删除操作称为出栈。入栈时元素总是放在栈底，而出栈的总是栈顶元素。因此，栈中元素采用的是“后进先出”的方式。</p><a id="more"></a><p>栈的数据元素类型可以任意，只要是同一种类型即可。它的基本操作包括清空、判空、求元素个数、获取栈顶、入栈和出栈等。<br>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mystack</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> [] elements;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Mystack</span><span class="params">()</span></span>&#123;</span><br><span class="line">elements=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//压入元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> element)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] newArr = <span class="keyword">new</span> <span class="keyword">int</span>[elements.length + <span class="number">1</span>];</span><br><span class="line"><span class="comment">// 复制数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; elements.length; i++) &#123;</span><br><span class="line">newArr[i] = elements[i];</span><br><span class="line">&#125;</span><br><span class="line">newArr[elements.length] = element;</span><br><span class="line"><span class="comment">// 新数组替换原数组</span></span><br><span class="line">elements = newArr;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//取出栈顶元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(elements.length==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"stack is empty"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//取出最后一个元素</span></span><br><span class="line"><span class="keyword">int</span> element=elements[elements.length-<span class="number">1</span>];</span><br><span class="line"><span class="comment">//创建一个新数组</span></span><br><span class="line"><span class="keyword">int</span> newArr[]=<span class="keyword">new</span> <span class="keyword">int</span>[elements.length-<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;elements.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">newArr[i]=elements[i];</span><br><span class="line">&#125;</span><br><span class="line">elements=newArr;</span><br><span class="line"><span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(Arrays.toString(elements));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//取出栈顶元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">peek</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(elements.length==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"stack is empty"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> elements[elements.length-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断栈是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> elements.length==<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Mystack mystack=<span class="keyword">new</span> Mystack();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">mystack.push(i*<span class="number">6</span>);</span><br><span class="line">&#125;</span><br><span class="line">mystack.show();</span><br><span class="line">System.out.println(mystack.pop());</span><br><span class="line">System.out.println(mystack.pop());</span><br><span class="line">mystack.show();</span><br><span class="line">System.out.println(mystack.peek());</span><br><span class="line">System.out.println(mystack.isEmpty());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;栈是一种只能在一端进行插入和删除操作的特殊线性表。&lt;/p&gt;
&lt;p&gt;其中，允许插入和删除的一端称为栈顶，另一端称为栈底。通常，将栈的插入操作称为入栈，删除操作称为出栈。入栈时元素总是放在栈底，而出栈的总是栈顶元素。因此，栈中元素采用的是“后进先出”的方式。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="数据结构" scheme="http://dumengblog.club/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
</feed>
