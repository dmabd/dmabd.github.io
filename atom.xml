<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dumeng&#39;s Blog</title>
  
  <subtitle>writedown everything</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://dumengblog.club/"/>
  <updated>2019-10-07T09:13:46.681Z</updated>
  <id>http://dumengblog.club/</id>
  
  <author>
    <name>dumeng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>static 的作用</title>
    <link href="http://dumengblog.club/2019/10/07/static-%E7%9A%84%E4%BD%9C%E7%94%A8/"/>
    <id>http://dumengblog.club/2019/10/07/static-的作用/</id>
    <published>2019-10-07T07:38:48.000Z</published>
    <updated>2019-10-07T09:13:46.681Z</updated>
    
    <content type="html"><![CDATA[<p>static 关键字主要有两种作用：</p><p>1.为某特定数据类型或对象分配单一的存储空间，而与创建对象的个数无关。</p><p>2.实现某个方法或属性 与类而不是对象关联在一起，也就是说在不创建对象的情况下可以通过类直接调用方法或调用类的属性。</p><p>具体而言，static主要有4种使用情况</p><h4 id="1、-static成员变量"><a href="#1、-static成员变量" class="headerlink" title="1、  static成员变量"></a>1、  static成员变量</h4><p>JAVA语言中没有全局变量的概念，但是可以通过static关键字定义来实现全局的效果。java提供了两种类型的变量：用static修饰的静态变量，和不用static修饰的实例变量。静态变量属于类，在内存中只有一个复制，只要静态变量所在的类被加载，这个静态变量就会被分配空间，因此就可以被使用了。</p><p>对静态变量的引用有两种方式：</p><ul><li>类.静态变量</li><li>对象.静态变量</li></ul><p>接下来给出静态变量和实例变量的使用实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">jtbl</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> staticint=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> sint=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">jtbl j=<span class="keyword">new</span> jtbl();</span><br><span class="line">System.out.println(<span class="string">"j.staticint:"</span>+j.staticint);</span><br><span class="line">System.out.println(<span class="string">"jtbl.staticint:"</span>+jtbl.staticint);</span><br><span class="line">System.out.println(<span class="string">"j.sint:"</span>+j.sint);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>j.staticint:1<br>jtbl.staticint:1<br>j.sint:0</p><p>静态变量只有一个，被类拥有，所有对象都共享这个静态变量，而实例对象是与具体对象相关的。</p><p><strong>JAVA语言中不能在方法体中定义static变量。</strong></p><h4 id="2、-static成员方法"><a href="#2、-static成员方法" class="headerlink" title="2、 static成员方法"></a>2、 static成员方法</h4><p>static方法是类的方法，不需要创建对象就可以调用。</p><p>static方法中不能使用this和super关键字，不能调用非static方法，只能调用所属类的静态成员变量和成员方法</p><p>static一个很重要的用途是实现单例模式，单例设计模式的特点是该类只能有一个实例，为了实现这一功能，必须隐藏类的构造函数，即把构造函数声明为private，并提供一个创建对象的方法，由于构造对象被声明为private，外界无法直接创建这个类型的对象，只能通过该类提供的方法来获取类的对象，要达到这样的目的只能把创建对象的方法声明为static，程序实例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、-static代码块"><a href="#3、-static代码块" class="headerlink" title="3、 static代码块"></a>3、 static代码块</h4><p>static代码块，不在任何一个方法体内，static块可以置于类中的任何地方，类中可以有多个static块。在类初次被加载的时候，会按照static块的顺序来执行每个static块，并且只会执行一次。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">statictest</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>  a;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">statictest.a=<span class="number">1</span>;</span><br><span class="line">System.out.println(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"程序开始"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>运行结果：</p></li></ol><p>1<br>程序开始</p><h4 id="4、static内部类"><a href="#4、static内部类" class="headerlink" title="4、static内部类"></a>4、static内部类</h4><p>static内部类是指被static修饰的内部类。它可以不依赖于外部类实例对象而被实例化。静态内部类不能与外部类有相同的名字，不能访问外部类的普通成员变量，只能访问外部类中的静态成员和静态方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> a=<span class="number">5</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">accessAttrformouter</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Inner:outer.a="</span>+a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Outer.Inner nInner=<span class="keyword">new</span> Outer.Inner();</span><br><span class="line">nInner.accessAttrformouter();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>Inner:outer.a=5</p><p><strong>只有内部类才能定义为static</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;static 关键字主要有两种作用：&lt;/p&gt;
&lt;p&gt;1.为某特定数据类型或对象分配单一的存储空间，而与创建对象的个数无关。&lt;/p&gt;
&lt;p&gt;2.实现某个方法或属性 与类而不是对象关联在一起，也就是说在不创建对象的情况下可以通过类直接调用方法或调用类的属性。&lt;/p&gt;
&lt;p&gt;具体
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>企业面试知识点</title>
    <link href="http://dumengblog.club/2019/10/07/%E4%BC%81%E4%B8%9A%E9%9D%A2%E8%AF%95%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://dumengblog.club/2019/10/07/企业面试知识点/</id>
    <published>2019-10-07T05:54:55.000Z</published>
    <updated>2019-10-07T07:36:48.821Z</updated>
    
    <content type="html"><![CDATA[<p>我首先个人建议面试互联网企业。假如你选择以搜索为核心的互联网企业那么你需要掌握算法，操作系统，数据库的知识，而电子商务企业除了基础知识更需要java方面的知识，网络安全企业侧重有关软件安全 和网络安全的专业知识。</p><p>下面摘选一些著名互联网企业的部分面试笔试真题以及考查知识点。</p><p>摘自《java程序员面试笔试宝典》</p><p>1) static 的作用。</p><p>2) final 的作用。</p><p>3) overload 与override的区别。</p><p>4) 组合与继承的区别。</p><p>5) clone 的作用。</p><p>6)前置++与后置++。</p><p>7)内部类。</p><p>8)二维数组的表示。</p><p>9)接口与抽象类的对比。</p><p>10)反射机制。</p><p>11)函数调用方式。</p><p>12)重载函数。</p><p>13)构造函数。</p><p>14)合并两个有序链表。</p><p>15)逻辑推理–智 力题。</p><p>16)从100亿条记录的文本文件中取出重复数最多的前10条。</p><p>17)判断单列表是否又环。</p><p>18)二叉树的多种遍历算法实现。</p><p>19)有读和写两个线程和一个队列， 读线程从队列中读数据，写线程往队列中写数据。</p><p>20) stack 和heap.</p><p>21) TCP的流量控制和拥塞控制机制。</p><p>22)写一个函数，返回一个字符串中只出现1次的第一个字符。</p><p>23)求一个 数组中第k大的数的位置。</p><p>24)面向对象继承、多态问题;例如多态的实现机制。</p><p>25)值传递与引用传递。</p><p>26)什么是不变量?</p><p>27) == 与equal的区别。</p><p>28)创建空类时，哪些成员函数是系统默认的?  </p><p>29)有10万个段，这些IP段之间都不重合，随便给定一个IP,求出属于那个IP段。</p><p>30)网络编程(网络编程范式，非阻塞connect）。</p><p>31) TCP/IP</p><p>32) Linu的命令。原理以及底层实现。</p><p>33) Lim编程。包括所有互斥的方法、多线程编程，进程间通信。</p><p>34)一个一维数轴上有不同的线段，求重复最长的两个线段，例如，a:1<del>3,b:2</del>7, c: 2~8,最长重复是b和c。</p><p>35) Java人口函数的特点。</p><p>36)内存溢出与内存泄漏有什么区别?</p><p>37)利用互斥量和条件变量设计一个清息队列，具有以下功能:①创建消息队列(消息中所含的元素):②消息队列中插人消息;③取出一个清息(阻塞方式);④取出第一消息(非阻塞方式)。注意:互斥量、条件变量和队列由系统给定。</p><p>38)用非递归方法完成二叉树的遍历。</p><p>39)如何实现类似函数指针的功能。</p><p>40)设计模式。</p><p>41)排列组合问题。</p><p>42)若有序表的关键字序列为(b,e,d,e,fg,q,r,s,t),则在二分查找关键字b的过程中，先后进行比较的关键字依次是什么?</p><p>43)有一个虚拟存储系统，若进程在内存中占3页(开始时内存为空)，若采用先进出(FIFO) 页面淘汰算法，当执行如下访问序列后，1,2,3,4,5,1,2.5,1,2,3,4,5, 会发生多少缺页?</p><p>44)有一个顺序栈S,元素s1,s2,s3,s4,s5,s6依次进栈，若6个元素的出栈顺序为s2,s3,s4,s6,s5,s1, 则顺序栈的容量至少应该有多少?</p><p>45) [0,2,1,4,3,9,5,8,6,7]是以数组形式存 储的最小堆，删除堆顶元素0后的结果是多少?</p><p>46)某页式存储管理系统中，地址寄存器长度为24位，其中号占14位，则主存的分块大小是多少字节?</p><p>47) 内存泄露。</p><p>48)各种排序算法使用与比较。</p><p>49)默认初始化问题。</p><p>50)字符串的存储方式。</p><p>51)面向对象与面向过程编程的区别?</p><p>52) 异常处理。</p><p>53)垃圾回收器。</p><p>54) 多线程同步。</p><p>55)数据库内连接与外连接的区别。</p><p>56)设计模式。  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我首先个人建议面试互联网企业。假如你选择以搜索为核心的互联网企业那么你需要掌握算法，操作系统，数据库的知识，而电子商务企业除了基础知识更需要java方面的知识，网络安全企业侧重有关软件安全 和网络安全的专业知识。&lt;/p&gt;
&lt;p&gt;下面摘选一些著名互联网企业的部分面试笔试真题以
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>博客的美化</title>
    <link href="http://dumengblog.club/2019/10/04/%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%BE%8E%E5%8C%96/"/>
    <id>http://dumengblog.club/2019/10/04/博客的美化/</id>
    <published>2019-10-04T13:51:51.000Z</published>
    <updated>2019-10-04T13:56:38.759Z</updated>
    
    <content type="html"><![CDATA[<p>今天水一篇了。</p><p>关于next主题我也是跟着csdn上的一个大佬一步步操作的，我把链接放在<a href="https://blog.csdn.net/nightmare_dimple/article/details/86661502" target="_blank" rel="noopener">这里</a>大家自己去浏览学习。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天水一篇了。&lt;/p&gt;
&lt;p&gt;关于next主题我也是跟着csdn上的一个大佬一步步操作的，我把链接放在&lt;a href=&quot;https://blog.csdn.net/nightmare_dimple/article/details/86661502&quot; target=&quot;_bla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>解决hexo图片不加载问题</title>
    <link href="http://dumengblog.club/2019/10/04/%E8%A7%A3%E5%86%B3hexo%E5%9B%BE%E7%89%87%E4%B8%8D%E5%8A%A0%E8%BD%BD%E9%97%AE%E9%A2%98/"/>
    <id>http://dumengblog.club/2019/10/04/解决hexo图片不加载问题/</id>
    <published>2019-10-04T13:03:08.000Z</published>
    <updated>2019-10-04T13:49:43.581Z</updated>
    
    <content type="html"><![CDATA[<p>首先我得说明我用的typora编辑器，今天在书写上一个博客的时候遇到了图片不加载的问题，百度上查了很多方法，大多更改路径或者不用Markdown的语法，用了</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;%asset_img example.jpg examplename&#125;</span><br></pre></td></tr></table></figure><p>这种标签，我挨个尝试都显示不了图片，最终我部署了一下typora，然后再用Markdown语法居然成功的显示图片了。</p><a id="more"></a><p>首先，大家还是设置站点配置文件_config.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span><span class="literal">true</span></span><br></pre></td></tr></table></figure><p>然后在博客根目录 git bash here</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-<span class="built_in">image</span> –<span class="built_in">save</span></span><br></pre></td></tr></table></figure><p>接下来我在source目录下新建了一个asset文件夹</p><p>然后我在typora编辑中文件下的偏好设置做了如下更改</p><p><img src="/../asset/1570195008613.png" alt></p><p><img src="/../asset/1570196975730.png" alt="1570196975730"></p><p>还选择了插入图片时复制到文件夹。</p><p>再重新插入图片，用的是asset文件夹下的图片。</p><p>然后hexo g -d</p><p>再看博客的时候图片就出来了。</p><p>希望我的方法可以帮助到您。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先我得说明我用的typora编辑器，今天在书写上一个博客的时候遇到了图片不加载的问题，百度上查了很多方法，大多更改路径或者不用Markdown的语法，用了&lt;/p&gt;
&lt;figure class=&quot;highlight clojure&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;%asset_img example.jpg examplename&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这种标签，我挨个尝试都显示不了图片，最终我部署了一下typora，然后再用Markdown语法居然成功的显示图片了。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>如何让百度收录自己的网站</title>
    <link href="http://dumengblog.club/2019/10/04/%E5%A6%82%E4%BD%95%E8%AE%A9%E7%99%BE%E5%BA%A6%E6%94%B6%E5%BD%95%E8%87%AA%E5%B7%B1%E7%9A%84%E7%BD%91%E7%AB%99/"/>
    <id>http://dumengblog.club/2019/10/04/如何让百度收录自己的网站/</id>
    <published>2019-10-04T07:33:05.000Z</published>
    <updated>2019-10-04T11:56:06.021Z</updated>
    
    <content type="html"><![CDATA[<p>当自己的博客搭建成功后，我们可能会去百度搜索一下自己的网站（不是输入链接那种），结果肯定是没有的，今天我就讲一下怎么让自己的hexo 博客被百度收录。首先我建议各位买个域名（我是在阿里云购买的域名），至于为什么在后面会讲到。</p><a id="more"></a><h3 id="Step1-验证网站"><a href="#Step1-验证网站" class="headerlink" title="Step1 验证网站"></a>Step1 验证网站</h3><p>首先打开百度资源平台<a href="https://ziyuan.baidu.com/，没有号的话注册一个，点击用户中心，打开站点管理。" target="_blank" rel="noopener">https://ziyuan.baidu.com/，没有号的话注册一个，点击用户中心，打开站点管理。</a></p><p><img src="/../asset/1570174900124.png" alt></p><p>点击添加网站：</p><img src="/../asset/1570174943011.png" style="zoom: 67%;"><p>前面选https，后面写自己的域名</p><img src="/../asset/1570189924025.png" alt="1570189924025" style="zoom:67%;"><img src="/../asset/1570175454427.png" style="zoom:67%;"><p>到了这一步就是核心！验证网站，此时就会体现你购买域名的方便之处了</p><p>1.文本验证就是把下载的文件放到你的博客根目录下的sourse文件夹下，然后hexo g -d，提交上去，验证一下就可以了，理论上就可以成功了。</p><p>2.html验证就是给你的代码放到head标签中。本文使用的是Next主题。在themes/next/layout/partials/head.swig内：修改meta标签为站长网站上给出的标签即可：同时，在themes/next/config.yml中将google-site-verification和baidu_site_verification的值设置为true即可。</p><p>然后控制台输入：hexo g -d，部署到网站上。<br>3.cname验证 简单地说就是解析网址。</p><p>首先说我选的是第三种。第一种看似简单，但是hexo博客会渲染那个文件，可能加了注释，或者改了配置文件就可以让他不渲染，但是过于麻烦，而且可能还有问题。第二种我试了很多次一直失败，具体原因我也不知道。第三种，只要你有域名绝对是最快最简单的。下面我会把每一步都截图发出来。</p><img src="/../asset/1570176176775.png" style="zoom:67%;"><p><strong>这个主机记录一定别全复制，只要前面那部分！！！</strong></p><p>然后打开阿里云的控制台</p><img src="/../asset/1570176275993.png" style="zoom:67%;"><p>点击解析：</p><p><img src="/../asset/1570176297414.png" alt></p><p>点击添加记录：</p><p><img src="/../asset/1570176353944.png" alt></p><img src="/../asset/1570176411057.png" style="zoom:67%;"><p>确定后，返回网站验证，提示成功。</p><img src="/../asset/1570176479888.png" style="zoom:67%;"><h3 id="Step2-生成网站地图"><a href="#Step2-生成网站地图" class="headerlink" title="Step2 生成网站地图"></a>Step2 生成网站地图</h3><p>安装 sitemap 插件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-generator-sitemap <span class="comment">--save     </span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-baidu-sitemap <span class="comment">--save12</span></span><br></pre></td></tr></table></figure><p>​    再修改博客路径下的配置文件（非主题）中的url站点地址</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line"></span><br><span class="line">## If your site <span class="keyword">is</span> <span class="keyword">put</span> in <span class="keyword">a</span> subdirectory, <span class="keyword">set</span> url <span class="keyword">as</span> <span class="string">'http://yoursite.com/child'</span> <span class="built_in">and</span> root <span class="keyword">as</span> <span class="string">'/child/'</span></span><br><span class="line"></span><br><span class="line">ur<span class="variable">l:</span> #在这儿填写你的博客域名</span><br><span class="line">roo<span class="variable">t:</span> /</span><br><span class="line">permalink: :title.html</span><br><span class="line">permalink_default<span class="variable">s:</span></span><br></pre></td></tr></table></figure><p>执行完之后就会在博客路径下生成sitemap.xml文件和baidusitemap.xml文件，可以通过http://此处填你的域名/baidusitemap.xml,查看该文件是否生成，其中sitemap.xml文件是搜索引擎通用的文件，baidusitemap.xml是百度专用的sitemap文件。</p><h3 id="Step3"><a href="#Step3" class="headerlink" title="Step3"></a>Step3</h3><p>找到百度站长平台-&gt;网站支持-&gt;数据引入-&gt;链接提交</p><img src="/../asset/1570177254217.png" style="zoom:67%;"><p>我们可以看到有两种提交方式，自动提交和手动提交，自动提交又分为主动推送、自动推送和sitemap</p><p>大家可以任选一种方式进行提交。<a href="https://blog.csdn.net/fz2543122681/article/details/53323083" target="_blank" rel="noopener">具体流程请点击这里</a>。然后，我们的hexo博客就被百度收录了，可以通过文章名百度一下就能找到对应的文章。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当自己的博客搭建成功后，我们可能会去百度搜索一下自己的网站（不是输入链接那种），结果肯定是没有的，今天我就讲一下怎么让自己的hexo 博客被百度收录。首先我建议各位买个域名（我是在阿里云购买的域名），至于为什么在后面会讲到。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>gitment 评论功能</title>
    <link href="http://dumengblog.club/2019/10/02/gitment-%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/"/>
    <id>http://dumengblog.club/2019/10/02/gitment-评论功能/</id>
    <published>2019-10-02T14:36:18.000Z</published>
    <updated>2019-10-02T14:48:35.893Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇博客说了评论第三方有Disqus，畅言，valine，gitment等，对比之后发现还是使用gitment比较靠谱，毕竟是托管在GitHub上的，用起来比较稳。</p><a id="more"></a><p>一、Gitment模块<br>    Gitment 是基于 GitHub Issues 的评论系统。支持在前端直接引入，不需要任何后端代码。可以在页面进行登录、查看、评论、点赞等操作，同时有完整的 Markdown / GFM 和代码高亮支持。尤为适合各种基于 GitHub Pages 的静态博客或项目页面。想了解具体效果，可以点击查看官方Demo Page：Gitment Demo。</p><p>二、注册OAuth Application<br>    首先我们需要申请一个Github OAuth Application，点击<a href="https://github.com/settings/applications/new进行注册，填写相关信息，注意：在Authorization" target="_blank" rel="noopener">https://github.com/settings/applications/new进行注册，填写相关信息，注意：在Authorization</a> callback URL填自己的网站url<a href="https://guidozijef.github.io，创建成功后，你会得到一个" target="_blank" rel="noopener">https://guidozijef.github.io，创建成功后，你会得到一个</a> client ID 和一个 client secret，这个将被用于之后的用户登录。</p><p>三、配置gitment<br>在主题文件夹下面的_config.yml文件（路径：themes/next/_config.yml）找到gitment的配置，修改配置。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">gitment:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  mint:</span> <span class="literal">true</span> <span class="comment"># RECOMMEND, A mint on Gitment, to support count, language and proxy_gateway</span></span><br><span class="line"><span class="attr">  count:</span> <span class="literal">true</span> <span class="comment"># Show comments count in post meta area</span></span><br><span class="line"><span class="attr">  lazy:</span> <span class="literal">false</span> <span class="comment"># Comments lazy loading with a button</span></span><br><span class="line"><span class="attr">  cleanly:</span> <span class="literal">false</span> <span class="comment"># Hide 'Powered by ...' on footer, and more</span></span><br><span class="line"><span class="attr">  language:</span> <span class="comment"># Force language, or auto switch by theme</span></span><br><span class="line"><span class="attr">  github_user:</span> <span class="string">dmabd</span>   <span class="comment"># MUST HAVE, Your Github ID</span></span><br><span class="line"><span class="attr">  github_repo:</span> <span class="string">dmabd.github.io</span> <span class="comment"># MUST HAVE, The repo you use to store Gitment comments</span></span><br><span class="line"><span class="attr">  client_id:</span> <span class="comment">#注册得到的id</span></span><br><span class="line"><span class="attr">  client_secret:</span> <span class="comment">#注册得到的secret</span></span><br><span class="line"><span class="attr">  proxy_gateway:</span> <span class="comment"># Address of api proxy, See: https://github.com/aimingoo/intersect</span></span><br><span class="line"><span class="attr">  redirect_protocol:</span> <span class="comment"># Protocol of redirect_uri with force_redirect_protocol when mint enabled</span></span><br></pre></td></tr></table></figure><p>gitment是把评论放在对应仓库的issue中的。<br>这时候应该就可以开通gitment评论功能了，发布测试一下。</p><p>由于我是一次成功，所以假如你配置后出了问题那就得找找度娘了，哈哈。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇博客说了评论第三方有Disqus，畅言，valine，gitment等，对比之后发现还是使用gitment比较靠谱，毕竟是托管在GitHub上的，用起来比较稳。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>添加留言功能</title>
    <link href="http://dumengblog.club/2019/10/02/%E6%B7%BB%E5%8A%A0%E7%95%99%E8%A8%80%E5%8A%9F%E8%83%BD/"/>
    <id>http://dumengblog.club/2019/10/02/添加留言功能/</id>
    <published>2019-10-02T12:47:59.000Z</published>
    <updated>2019-10-07T07:40:22.339Z</updated>
    
    <content type="html"><![CDATA[<p>今天想在博客中添加留言功能，发现网上以前的一些方法已经被淘汰，在一阵查询中发现使用valine是可以实现的</p><a id="more"></a><p>我用的是Next 主题，本身就已经集成了valine，直接配置即可<br>下面网上搜来的其余系统,请自行搜索教程，划横线的是因为官方已经不允许使用了</p><ul><li><del>多说</del></li><li><del>网易云跟帖</del></li><li>畅言</li><li>来必力（LiveRe）</li><li>Disqus</li><li>Hypercomments</li><li>valine</li></ul><h4 id="开启Valine"><a href="#开启Valine" class="headerlink" title="开启Valine"></a>开启Valine</h4><h5 id="注册Leancloud"><a href="#注册Leancloud" class="headerlink" title="注册Leancloud"></a>注册Leancloud</h5><p>我们的评论系统其实是放在Leancloud上的，因此首先需要去注册一个账号 <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fleancloud.cn%2F" target="_blank" rel="noopener">点我注册</a></p><p>1、 注册完以后需要创建一个应用，名字可以随便起，然后 进入应用-&gt;设置-&gt;应用key ,获取你的 <code>appid</code> 和 <code>appkey</code><br>2、 打开主题下的配置文件 搜索 valine，填入appid 和 appkey，</p><p>以下是我的配置，空白处即为你的appid和appkey。别忘记加空格</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">valine:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  appid:</span>                                         <span class="comment"># your leancloud application appid</span></span><br><span class="line"><span class="attr">  appkey:</span>                                       <span class="comment"># your leancloud application appkey</span></span><br><span class="line"><span class="attr">  notify:</span> <span class="literal">true</span> <span class="comment"># mail notifier , https://github.com/xCss/Valine/wiki</span></span><br><span class="line"><span class="attr">  verify:</span> <span class="literal">false</span> <span class="comment"># Verification code</span></span><br><span class="line"><span class="attr">  placeholder:</span> <span class="string">welcome</span> <span class="string">write</span> <span class="string">your</span> <span class="string">comment!</span> <span class="comment"># comment box placeholder</span></span><br><span class="line"><span class="attr">  avatar:</span> <span class="string">mm</span> <span class="comment"># gravatar style</span></span><br><span class="line"><span class="attr">  guest_info:</span> <span class="string">nick,mail,link</span> <span class="comment"># custom comment header</span></span><br><span class="line"><span class="attr">  pageSize:</span> <span class="number">10</span> <span class="comment"># pagination size</span></span><br><span class="line"><span class="attr">  visitors:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  comment_count:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>2、在Leancloud -&gt; 设置 -&gt; 安全中心 -&gt; Web 安全域名 把你的域名加进去</p><p>可以加你买的域名，也可以是你的github仓库名，也可以是你的本机地址也就是localhost：4000</p><h5 id="Valine配置"><a href="#Valine配置" class="headerlink" title="Valine配置"></a>Valine配置</h5><p>首先下载最新的<code>Valine.min.js</code>核心代码库到本地（下面是链接）<br><code>https://cdn.jsdelivr.net/npm/valine@1.1.9-beta9/dist/</code><br>右击<code>Valine.min.js</code>选择链接另存为即可<br><img src="https://images2018.cnblogs.com/blog/1417438/201808/1417438-20180829183748378-1923954493.png" alt="img"><br>将下载好的 <code>Valine.min.js</code> 放置于 <code>next\source\js\src\</code> 下<br>接着，打开valine配置文件进行配置<br>valine配置文件路径：<code>next\layout\_third-party\comments\valine.swig</code></p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="keyword">if</span></span> theme.valine.enable and theme.valine.appid and theme.valine.appkey %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn1.lncld.net/static/js/3.0.4/av-min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//unjkp.com/valine/dist/Valine.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  //删除Valine核心代码库外链调用</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/src/Valine.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  //调用刚下载的本地文件以加速加载速度</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  </span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> valine_uri = '/js/src/Valine.min.js' %&#125;</span><span class="xml">  //这里改为从本地加载</span></span><br><span class="line"><span class="xml">  </span><span class="template-tag">&#123;% <span class="name"><span class="keyword">if</span></span> theme.vendors.valine %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> valine_uri = theme.vendors.valine %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">  </span><span class="template-tag">&#123;% <span class="name"><span class="keyword">endif</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; valine_uri &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    var GUEST = ['nick','mail','link'];</span></span><br><span class="line"><span class="xml">    var guest = '</span><span class="template-variable">&#123;&#123; theme.valine.guest_info &#125;&#125;</span><span class="xml">';</span></span><br><span class="line"><span class="xml">    guest = guest.split(',').filter(function (item) &#123;</span></span><br><span class="line"><span class="xml">      return GUEST.indexOf(item)&gt;-1;</span></span><br><span class="line"><span class="xml">    &#125;);</span></span><br><span class="line"><span class="xml">    new Valine(&#123;</span></span><br><span class="line"><span class="xml">        el: '#comments' ,</span></span><br><span class="line"><span class="xml">        verify: </span><span class="template-variable">&#123;&#123; theme.valine.verify &#125;&#125;</span><span class="xml">,</span></span><br><span class="line"><span class="xml">        notify: </span><span class="template-variable">&#123;&#123; theme.valine.notify &#125;&#125;</span><span class="xml">,</span></span><br><span class="line"><span class="xml">        appId: '</span><span class="template-variable">&#123;&#123; theme.valine.appid &#125;&#125;</span><span class="xml">',</span></span><br><span class="line"><span class="xml">        appKey: '</span><span class="template-variable">&#123;&#123; theme.valine.appkey &#125;&#125;</span><span class="xml">',</span></span><br><span class="line"><span class="xml">        placeholder: '</span><span class="template-variable">&#123;&#123; theme.valine.placeholder &#125;&#125;</span><span class="xml">',</span></span><br><span class="line"><span class="xml">        avatar:'</span><span class="template-variable">&#123;&#123; theme.valine.avatar &#125;&#125;</span><span class="xml">',</span></span><br><span class="line"><span class="xml">        guest_info:['nick'] ,  //评论者只需要提供评论的昵称即可</span></span><br><span class="line"><span class="xml">        pageSize:'</span><span class="template-variable">&#123;&#123; theme.valine.pageSize &#125;&#125;</span><span class="xml">' || 10,</span></span><br><span class="line"><span class="xml">    &#125;);</span></span><br><span class="line"><span class="xml">    //增加以下六行代码去除 power by valine</span></span><br><span class="line"><span class="xml">    var infoEle = document.querySelector('#comments .info');</span></span><br><span class="line"><span class="xml">    if (infoEle &amp;&amp; infoEle.childNodes &amp;&amp; infoEle.childNodes.length &gt; 0)&#123;</span></span><br><span class="line"><span class="xml">      infoEle.childNodes.forEach(function(item) &#123;</span></span><br><span class="line"><span class="xml">        item.parentNode.removeChild(item);</span></span><br><span class="line"><span class="xml">      &#125;);</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="keyword">endif</span></span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure><p>然后我们去主题配置文件中进行修改<br>主题配置文件路径：<code>next\_config.yml</code><br>找到以下参数进行修改</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Valine.</span></span><br><span class="line"><span class="comment"># You can get your appid and appkey from https://leancloud.cn</span></span><br><span class="line"><span class="comment"># more info please open https://valine.js.org</span></span><br><span class="line"><span class="attr">valine:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span> <span class="string">//打开valine评论功能</span></span><br><span class="line"><span class="attr">  appid:</span> <span class="string">你的leancloud</span> <span class="string">appid</span> </span><br><span class="line"><span class="attr">  appkey:</span> <span class="string">你的leancloud</span> <span class="string">appkey</span> </span><br><span class="line"><span class="attr">  notify:</span> <span class="literal">false</span> <span class="string">//邮件提醒</span></span><br><span class="line"><span class="attr">  verify:</span> <span class="literal">true</span> <span class="string">//评论时是否有验证码，需要在Leancloud</span> <span class="string">设置-&gt;安全中心</span> <span class="string">中打开</span></span><br><span class="line"><span class="attr">  placeholder:</span> <span class="string">说点什么吧！</span> <span class="string">//评论框默认显示</span></span><br><span class="line"><span class="attr">  avatar:</span> <span class="string">hide</span> <span class="string">//评论者的头像,我这里设置的不显示</span></span><br><span class="line"><span class="attr">  guest_info:</span> <span class="string">nick</span> <span class="comment"># custom comment header</span></span><br><span class="line"><span class="attr">  pageSize:</span> <span class="number">10</span> <span class="comment"># pagination size</span></span><br></pre></td></tr></table></figure><p>PS：评论者头像可以进行如下设置<br><img src="https://images2018.cnblogs.com/blog/1417438/201808/1417438-20180829183809378-525261855.png" alt="img"></p><p>到此，一个极简评论系统就完成啦！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天想在博客中添加留言功能，发现网上以前的一些方法已经被淘汰，在一阵查询中发现使用valine是可以实现的&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="添加留言功能" scheme="http://dumengblog.club/tags/%E6%B7%BB%E5%8A%A0%E7%95%99%E8%A8%80%E5%8A%9F%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>本地hexo部署到Github</title>
    <link href="http://dumengblog.club/2019/10/02/%E6%9C%AC%E5%9C%B0hexo%E9%83%A8%E7%BD%B2%E5%88%B0Github/"/>
    <id>http://dumengblog.club/2019/10/02/本地hexo部署到Github/</id>
    <published>2019-10-02T08:48:20.000Z</published>
    <updated>2019-10-02T08:54:31.425Z</updated>
    
    <content type="html"><![CDATA[<p>今天我所做的就是将hexo部署到github上，毕竟只在自己的电脑上是没用的，借鉴了csdn许多大佬的详解，但是总有有问题的地方，最终，找到了一个讲的很细的详解，部署成功。</p><p><a href="https://blog.csdn.net/m0_38064214/article/details/84504904" target="_blank" rel="noopener">这里附上链接</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天我所做的就是将hexo部署到github上，毕竟只在自己的电脑上是没用的，借鉴了csdn许多大佬的详解，但是总有有问题的地方，最终，找到了一个讲的很细的详解，部署成功。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/m0_38064214/
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>java基础知识-基本概念</title>
    <link href="http://dumengblog.club/2019/10/01/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>http://dumengblog.club/2019/10/01/java基础知识-基本概念/</id>
    <published>2019-10-01T11:49:12.000Z</published>
    <updated>2019-10-01T14:51:15.794Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-1-java语言有哪些优点？"><a href="#1-1-java语言有哪些优点？" class="headerlink" title="1.1 java语言有哪些优点？"></a>1.1 java语言有哪些优点？</h3><p>1.java语言为纯面向对象的语言。</p><p>2.平台无关性。java语言的优点便是“一次编译，到处执行”。编译后的程序不会被平台所约束，因此java语言有很好的移植性。</p><a id="more"></a><p>3.java提供了许多内置的类库，将代码封装好来给操作人员使用，从而大大减少开发人员的时间。</p><p>4.提供了对web应用的开发的支持。</p><p>5.具有较好的安全性和健壮性。</p><p>6.去除了c++语言中难以理解，容易混淆的特性，例如头文件，指针，结构，单元运算符重载，虚拟基础类，多重继承等，所以java语言是由c++语言改进并重新设计而来的</p><p>6.去除c++语言中难以理解的</p><h3 id="1-2-java语言和c-c-有什么异同。"><a href="#1-2-java语言和c-c-有什么异同。" class="headerlink" title="1.2  java语言和c/c++有什么异同。"></a>1.2  java语言和c/c++有什么异同。</h3><p>java和C++都是面向对象的语言，都使用了面向对象的思想（例如封装，继承，多态），由于面向对象有许多非常好的特性（继承，组合等），因此二者都有很好的重用性。</p><p>下面重点说一下不同点：</p><p>1.java为解释型语言，c/c++为编译型语言，java代码由java编译器编译成字节码，然后由JVM解释，C语言代码经过编译和链接生成可执行的二进制代码，因此java的执行速度比c++慢，但是java可跨平台执行，c/c++不能</p><p>2.java语言没有指针</p><p>3.java只能实现单重继承，但是可以引入多个接口</p><p>4.java为纯面向对象语言，所有代码必须在类里实现</p><p>5.java语言提供了垃圾回收器来实现对垃圾的自动回收，c++语言中需要开发人员去管理对内存的分配。C语言，通常会把释放资源的代码放在析构函数中，Java没有但是有finalize()方法。</p><p>java语言不支持运算符重载，C语言支持</p><p>java不支持默认函数参数，c语言支持</p><p>java不提供goto语句，c/c++支持，但是在java中goto为保留关键字</p><p>java不支持自动强制类型装换，c语言支持</p><p>java具有平台无关性，就是对每种数据类型分配固定长度。</p><p>java提供对注释文档的内建支持</p><p>java包含了一些标准库</p><h3 id="1-3-为什么使用public-static-void-main（String-args）方法？"><a href="#1-3-为什么使用public-static-void-main（String-args）方法？" class="headerlink" title="1.3 为什么使用public static void main（String[] args）方法？"></a>1.3 为什么使用public static void main（String[] args）方法？</h3><p>main是程序的入口方法，所以程序执行时第一个执行的方法就是main方法。</p><p>main（）方法定义的其他几种格式：</p><p>1.static pubic void main(String[] args)</p><p>static 和public无先后顺序</p><p>2.public static final void main(String[] args)</p><p>可以定义为final</p><p>3.static public synchronized void main(String[] args)</p><p>可以定义为synchronized </p><p>不管哪种定义方式，必须保证main（）方法类型为void并且有static和public关键字修饰。不可以用abstract关键字，因为main（）为程序的入口方法。</p><h3 id="1-4静态块"><a href="#1-4静态块" class="headerlink" title="1.4静态块"></a>1.4静态块</h3><p>静态块会在类被加载时调用，可以在main（）方法前执行</p><p>例如：</p><p>public class jingtaikuai {</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"hello word"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"静态块"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>}</p><p>执行结果:</p><p>静态块<br>hello word</p><h3 id="1-5-java程序初始化顺序是怎样的"><a href="#1-5-java程序初始化顺序是怎样的" class="headerlink" title="1.5 java程序初始化顺序是怎样的"></a>1.5 java程序初始化顺序是怎样的</h3><p>java程序的初始化一般遵循三个原则（优先级依次递减）：</p><p>1.静态对象优先于非静态对象</p><p>2.父类优先于子类</p><p>3.按照成员变量定义顺序进行初始化</p><p>常见面试题：</p><p>下面代码的运行结果是什么?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">Object</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"load b1"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">B</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"create b"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"load b2"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">B</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"load a"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"create a"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 初始化顺序 </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> A();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p>load b1<br>load b2<br>load a<br>create b<br>create a</p><h3 id="1-6-java作用域"><a href="#1-6-java作用域" class="headerlink" title="1.6 java作用域"></a>1.6 java作用域</h3><h6 id="在Java语言中，变量的类型主要有3种：成员变量、静态变量和局部变量"><a href="#在Java语言中，变量的类型主要有3种：成员变量、静态变量和局部变量" class="headerlink" title="在Java语言中，变量的类型主要有3种：成员变量、静态变量和局部变量"></a>在Java语言中，变量的类型主要有3种：成员变量、静态变量和局部变量</h6><p>首先说静态变量跟局部变量</p><p>静态变量不依赖于特定的实例，而是被所有实例共享，也就是说，只要一个类被加载，JVM就会给类的静态变量分配</p><p>存储空间。因此可以通过类名.变量名来访问静态变量</p><p>局部变量的作用域与可见性为它所在的花括号内</p><p>类的成员变量的作用范围同类的实例化对象的作用范围相同。当类被实例化的时候，成员变量就会在内存中分配空间，并初始化。</p><p>直到类的实例化对象的生命周期结束时，成员变量的生命周期才结束。</p><table><thead><tr><th>作用域与可见性</th><th>当前类</th><th>同一package</th><th>子类</th><th>其他package</th></tr></thead><tbody><tr><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>private</td><td>√</td><td>×</td><td>×</td><td>×</td></tr><tr><td>protected</td><td>√</td><td>√</td><td>√</td><td>×</td></tr><tr><td>default</td><td>√</td><td>√</td><td>×</td><td>×</td></tr></tbody></table><p>重点说一下protected和default:</p><p>protected：表名成员变量或方法对该类自身，与它在同一个包中的其他类，在其他包中的该类的子类都可见</p><p>default：表明该成员变量或方法只有自己和与其位于同一包内的类可见。</p><p>若父类与子类处于同一包内，则子类对父类的default成员变量或方法都有访问权限；若父类与子类处于不同的package内，则没有访问权限</p><hr><p> 还有需要注意的是，这些修饰符只能修饰成员变量，不能修饰局部变量。</p><p>private和protected不能用来修饰类</p><h3 id="1-7-一个java文件中能否定义多个类"><a href="#1-7-一个java文件中能否定义多个类" class="headerlink" title="1.7 一个java文件中能否定义多个类"></a>1.7 一个java文件中能否定义多个类</h3><p>一个java文件中可以定义多个类，但是最多只能有一个类被public修饰，并且这个类的类名必须和文件名相同。</p><h3 id="1-8-java的构造函数"><a href="#1-8-java的构造函数" class="headerlink" title="1.8 java的构造函数"></a>1.8 java的构造函数</h3><p><strong>一、什么是构造函数</strong></p><p>java构造函数，也叫构造方法，是java中一种特殊的函数。函数名与相同，无返回值。</p><p><strong>作用：一般用来初始化成员属性和成员方法的，即new对象产生后，就调用了对象了属性和方法。</strong></p><p>在现实生活中，很多事物一出现，就天生具有某些属性和行为。比如人一出生，就有年龄、身高、体重、就会哭；汽车一出产，就有颜色、有外观、可以运行等。这些，我们就可以将这些天然的属性和行为定义在构造函数中，当new实例化对象时，也就具有这些属性和方法了，没必要再去重新定义了，从而加快了编程效率。</p><p><strong>构造函数是对象一建立就运行，给对象初始化，就包括属性，执行方法中的语句。</strong></p><p><strong>而一般函数是对象调用才执行，用”.方法名“的方式，给对象添加功能。</strong> </p><p> <strong>一个对象建立，构造函数只运行一次。</strong></p><p> <strong>而一般函数可以被该对象调用多次。</strong></p><p><strong>二、构造函数的特点</strong></p><p><strong>1、函数名与类名相同</strong></p><p><strong>2、不用定义返回值类型。（不同于void类型返回值，void是没有具体返回值类型；构造函数是连类型都没有）</strong></p><p><strong>3、不可以写return语句。（返回值类型都没有，也就不需要return语句了</strong>）</p><p><strong>注：一般函数不能调用构造函数，只有构造函数才能调用构造函数。</strong> </p><p> <strong>三、示例</strong></p><p>1、无参构造函数中只定义了一个方法。<strong>new对象时，就调用与之对应的构造函数</strong>，执行这个方法。不必写“.方法名”。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javastudy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfunDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Confun c1=<span class="keyword">new</span> Confun();            <span class="comment">//输出Hello World。new对象一建立，就会调用对应的构造函数Confun()，并执行其中的println语句。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Confun</span></span>&#123;        </span><br><span class="line">    Confun()&#123;        <span class="comment">//定义构造函数，输出Hello World</span></span><br><span class="line">        System.out.println(<span class="string">"Hellow World"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：Hellow World </p><p> 2、有参构造函数，在new对象时，将实参值传给private变量，相当于完成setter功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javastudy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfunDemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Person z=<span class="keyword">new</span> Person(<span class="string">"zhangsan"</span>,<span class="number">3</span>);        <span class="comment">//实例化对象时，new Person()里直接调用Person构造函数并转转实参，相当于setter功能</span></span><br><span class="line">        z.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String n,<span class="keyword">int</span> m)</span></span>&#123;                <span class="comment">//有参数构造函数，实现给private成员变量传参数值的功能</span></span><br><span class="line">        name=n;</span><br><span class="line">        age=m;        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//getter                                      //实例化对象时，完成了sett功能后，需要getter，获取实参值。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAget</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;                           <span class="comment">//获取private值后，并打印输出</span></span><br><span class="line">        System.out.println(name+<span class="string">"\n"</span>+age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<br>zhangsan<br>3</p><p> 以上代码，我们也可以将show()方法中的输出语句直接放在构造函数中，new对象时，即可直接输出值，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javastudy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfunDemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Person z=<span class="keyword">new</span> Person(<span class="string">"zhangsan"</span>,<span class="number">3</span>);        <span class="comment">//实例化对象时，new Person()里直接调用Person构造函数并转转实参，同时执行输出语句</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String n,<span class="keyword">int</span> m)</span></span>&#123;                <span class="comment">//有参数构造函数，实现给private成员变量传参数值的功能，同时直接输出值</span></span><br><span class="line">        name=n;</span><br><span class="line">        age=m;</span><br><span class="line">        System.out.println(name+<span class="string">"\n"</span>+age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<br>zhangsan<br>3</p><p> 或</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConFun</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Person z=<span class="keyword">new</span> Person(<span class="number">20</span>,<span class="string">"zhangsan"</span>);</span><br><span class="line">        System.out.println(z.getAge()+z.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(<span class="keyword">int</span> x,String y)</span></span>&#123;</span><br><span class="line">        age=x;</span><br><span class="line">        name=y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 3、一个对象建立后，<strong>构造函数只运行一次</strong>。</p><p><strong>如果想给对象的值再赋新的值，就要使用set和get方法，此时是当做一般函数使用</strong></p><p>如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javastudy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfunDemo4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            PersonDemo s=<span class="keyword">new</span> PersonDemo(<span class="string">"李三"</span>,<span class="number">33</span>);        <span class="comment">//new对象时，即调用对应的构造函数，并传值。同时，不能new同一个对象多次，否则会报错。</span></span><br><span class="line">            s.setName(<span class="string">"李五"</span>);                            <span class="comment">//对象建立后，想变更值时，就要用set/get方法，重新设置新的值</span></span><br><span class="line">            s.setName(<span class="string">"阿尔法狗"</span>);                        <span class="comment">//并可调用对象多次。</span></span><br><span class="line">            s.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonDemo</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    PersonDemo(String n,<span class="keyword">int</span> m)&#123;                <span class="comment">//建立有参构造函数，用于给两个private变量name、age赋值，同时输出值</span></span><br><span class="line">        name=n;</span><br><span class="line">        age=m;</span><br><span class="line">        System.out.println(<span class="string">"姓名："</span>+name+<span class="string">"年龄："</span>+age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String x)</span></span>&#123;            <span class="comment">//set方法，用于再次给name赋值</span></span><br><span class="line">        name=x;        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;                <span class="comment">//get方法，用于获取name的赋值</span></span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p>姓名：李三年龄：33<br>阿尔法狗</p><p><strong>四、默认构造函数</strong></p><p><strong>当一个类中没有定义构造函数时，系统会给该类中加一个默认的空参数的构造函数，方便该类初始化。只是该空构造函数是隐藏不见的。</strong></p><p><strong>如下，Person(){}这个默认构造函数是隐藏不显示的。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span>  </span><br><span class="line">    <span class="comment">//Person()&#123;&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>当在该类中自定义了构造函数，默认构造函数就没有了。</strong></p><p><strong>如果仍要构造函数，则需要自己在类中手动添加。</strong></p><p><strong>五、构造函数的重载</strong></p><p>构造函数也是函数的一种，同样具备函数的重载（Overloding）特性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"> </span><br><span class="line">    Person()</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"A:name="</span>+name+<span class="string">":::age="</span>+age);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    Person(String n)</span><br><span class="line">    &#123;</span><br><span class="line">        name = n;</span><br><span class="line">        System.out.println(<span class="string">"B:name="</span>+name+<span class="string">":::age="</span>+age);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    Person(String n,<span class="keyword">int</span> a)</span><br><span class="line">    &#123;  </span><br><span class="line">        name=n;</span><br><span class="line">        age=a;</span><br><span class="line">        System.out.println(<span class="string">"C:name="</span>+name+<span class="string">":::age="</span>+age);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonDemo2</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Person p1=<span class="keyword">new</span> Person();</span><br><span class="line">        Person p2=<span class="keyword">new</span> Person(<span class="string">"lishi"</span>);</span><br><span class="line">        Person p3=<span class="keyword">new</span> Person(<span class="string">"lishi"</span>,<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：<br>A:name=null:::age=0<br>B:name=lishi:::age=0<br>C:name=lishi:::age=10</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"> </span><br><span class="line">    Person()</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"A:name="</span>+name+<span class="string">":::age="</span>+age);</span><br><span class="line">        cry();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    Person(String n)</span><br><span class="line">    &#123;</span><br><span class="line">        name = n;</span><br><span class="line">        System.out.println(<span class="string">"B:name="</span>+name+<span class="string">":::age="</span>+age);</span><br><span class="line">        cry();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    Person(String n,<span class="keyword">int</span> a)</span><br><span class="line">    &#123;  </span><br><span class="line">        name=n;</span><br><span class="line">        age=a;</span><br><span class="line">        System.out.println(<span class="string">"C:name="</span>+name+<span class="string">":::age="</span>+age);</span><br><span class="line">        cry();</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cry</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Cry..............."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonDemo2</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Person p1=<span class="keyword">new</span> Person();</span><br><span class="line">        Person p2=<span class="keyword">new</span> Person(<span class="string">"lishi"</span>);</span><br><span class="line">        Person p3=<span class="keyword">new</span> Person(<span class="string">"lishi"</span>,<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：<br>A:name=null:::age=0<br>Cry……………<br>B:name=lishi:::age=0<br>Cry……………<br>C:name=lishi:::age=10<br>Cry……………</p><p>转自:<a href="http://www.cnblogs.com/ibelieve618/p/6364541.html" target="_blank" rel="noopener">http://www.cnblogs.com/ibelieve618/p/6364541.html</a></p><h3 id="1-9-java中的clone方法"><a href="#1-9-java中的clone方法" class="headerlink" title="1.9 java中的clone方法"></a>1.9 java中的clone方法</h3><p>java中所有的类都继承自Object类，这个类提供了一个clone的方法，这个方法的作用是返回一个Object对象的复制。</p><p>使用步骤：</p><p>1.继承Cloneable 接口</p><p>2.重写clone（）方法</p><p>3.clone方法中调用super.clone（）</p><p>4.把浅复制的引用指向原型对象新的克隆体</p><hr><p>一、简单用法</p><p>只需要在需要clone的对象上实现（implements）Cloneable接口，然后再在类中加上clone方法，在方法中只需要调用super.clone()，根据自己的需要实现即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Student <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (Student)<span class="keyword">super</span>.clone();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">stu.setAge(<span class="number">1</span>);</span><br><span class="line">stu.setName(<span class="string">"aa"</span>);</span><br><span class="line">System.out.println(stu + <span class="string">" age: "</span> + stu.getAge() + <span class="string">" name: "</span> + stu.getName());</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Student sC = stu.clone();</span><br><span class="line">System.out.println(sC + <span class="string">" sC.age: "</span> + sC.getAge() + <span class="string">" sC.name: "</span> + sC.getName());</span><br><span class="line">sC.setAge(<span class="number">12</span>);</span><br><span class="line">sC.setName(<span class="string">"bb"</span>);</span><br><span class="line">System.out.println(stu + <span class="string">" age: "</span> + stu.getAge() + <span class="string">" name: "</span> + stu.getName());</span><br><span class="line">System.out.println(sC + <span class="string">" sC.age: "</span> + sC.getAge() + <span class="string">" sC.name: "</span> + sC.getName());</span><br><span class="line">&#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>}</p><p>输出结果：</p><p>testClone.Student@15db9742 age: 1 name: aa<br>testClone.Student@6d06d69c sC.age: 1 sC.name: aa<br>testClone.Student@15db9742 age: 1 name: aa<br>testClone.Student@6d06d69c sC.age: 12 sC.name: bb</p><p>分析结果：1、根据输出结果中前边的类名，可以得出被克隆对象的与原来的对象是同一种类型。2、根据内存地址（hashcode）知道，被克隆对象的与原来的对象是存在于内存中的不同的两个对象。所以后边有一个赋值，对原来对象没有任何影响。</p><p>二、“影子”克隆与深度克隆</p><p>首先看一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bag</span></span>&#123;<span class="comment">//学生的书包</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> width;</span><br><span class="line"><span class="keyword">private</span> String logo;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWidth</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> width;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWidth</span><span class="params">(<span class="keyword">int</span> width)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.width = width;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getLogo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> logo;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLogo</span><span class="params">(String logo)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.logo = logo;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student2</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">private</span> Bag bag;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Bag <span class="title">getBag</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> bag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBag</span><span class="params">(Bag bag)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.bag = bag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Student2 <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (Student2)<span class="keyword">super</span>.clone();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Student2 stu = <span class="keyword">new</span> Student2();</span><br><span class="line">stu.setAge(<span class="number">1</span>);</span><br><span class="line">stu.setName(<span class="string">"aa"</span>);</span><br><span class="line">Bag b = <span class="keyword">new</span> Bag();</span><br><span class="line">b.setWidth(<span class="number">10</span>);</span><br><span class="line">b.setLogo(<span class="string">"Nike"</span>);</span><br><span class="line">stu.setBag(b);</span><br><span class="line">printStudent(stu);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Student2 sC = stu.clone();</span><br><span class="line">printStudent(sC);</span><br><span class="line">sC.setAge(<span class="number">12</span>);</span><br><span class="line">sC.setName(<span class="string">"bb"</span>);</span><br><span class="line">sC.getBag().setWidth(<span class="number">100</span>);<span class="comment">//改变书包的属性</span></span><br><span class="line">sC.getBag().setLogo(<span class="string">"JNike"</span>);</span><br><span class="line">printStudent(stu);</span><br><span class="line">printStudent(sC);</span><br><span class="line">&#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输出</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> stu</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printStudent</span><span class="params">(Student2 stu)</span> </span>&#123;</span><br><span class="line">System.out.println(stu + <span class="string">" age: "</span> + stu.getAge() + <span class="string">" name: "</span> + stu.getName() + </span><br><span class="line"><span class="string">" bag: "</span> + stu.getBag() + <span class="string">"("</span> + stu.getBag().getLogo() + <span class="string">" width: "</span> + </span><br><span class="line">stu.getBag().getWidth() + <span class="string">")"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>}<br>输出结果：<br>testClone.Student2@15db9742 age: 1 name: aa bag: testClone.Bag@6d06d69c(Nike width: 10)<br>testClone.Student2@7852e922 age: 1 name: aa bag: testClone.Bag@6d06d69c(Nike width: 10)<br>testClone.Student2@15db9742 age: 1 name: aa bag: testClone.Bag@6d06d69c(JNike width: 100)<br>testClone.Student2@7852e922 age: 12 name: bb bag: testClone.Bag@6d06d69c(JNike width: 100)</p><p>分析：发现是不是跟预期的不太一样，通过第二个同学改变书包，但是第一个同学的书包也被改变了。并且通过内存地址可知，他们是同一对象（书包）。原因：调用Object类中clone()方法产生的效果是：先在内存中开辟一块和原始对象一样的空间，然后原样拷贝原始对象中的内 容。对基本数据类型，这样的操作是没有问题的，但对非基本类型变量，我们知道它们保存的仅仅是对象的引用，这也导致clone后的非基本类型变量和原始对 象中相应的变量指向的是同一个对象。 这就是所谓的“影子”克隆。</p><p>解决方案：深度克隆，既是对里边的引用也要克隆。以下是实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bag</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;<span class="comment">//学生的书包</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> width;<span class="comment">//宽</span></span><br><span class="line"><span class="keyword">private</span> String logo;<span class="comment">//品牌</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWidth</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> width;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWidth</span><span class="params">(<span class="keyword">int</span> width)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.width = width;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getLogo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> logo;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLogo</span><span class="params">(String logo)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.logo = logo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Bag <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (Bag)<span class="keyword">super</span>.clone();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student3</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">private</span> Bag bag;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Bag <span class="title">getBag</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> bag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBag</span><span class="params">(Bag bag)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.bag = bag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Student3 <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">Student3 stu = (Student3)<span class="keyword">super</span>.clone();</span><br><span class="line">stu.bag = bag.clone();</span><br><span class="line"><span class="keyword">return</span> stu;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Student3 stu = <span class="keyword">new</span> Student3();</span><br><span class="line">stu.setAge(<span class="number">1</span>);</span><br><span class="line">stu.setName(<span class="string">"aa"</span>);</span><br><span class="line">Bag b = <span class="keyword">new</span> Bag();</span><br><span class="line">b.setWidth(<span class="number">10</span>);</span><br><span class="line">b.setLogo(<span class="string">"Nike"</span>);</span><br><span class="line">stu.setBag(b);</span><br><span class="line">printStudent(stu);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Student3 sC = stu.clone();</span><br><span class="line">printStudent(sC);</span><br><span class="line">sC.setAge(<span class="number">12</span>);</span><br><span class="line">sC.setName(<span class="string">"bb"</span>);</span><br><span class="line">sC.getBag().setWidth(<span class="number">100</span>);<span class="comment">//改变书包的属性</span></span><br><span class="line">sC.getBag().setLogo(<span class="string">"JNike"</span>);</span><br><span class="line">printStudent(stu);</span><br><span class="line">printStudent(sC);</span><br><span class="line">&#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输出</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> stu</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printStudent</span><span class="params">(Student3 stu)</span> </span>&#123;</span><br><span class="line">System.out.println(stu + <span class="string">" age: "</span> + stu.getAge() + <span class="string">" name: "</span> + stu.getName() + </span><br><span class="line"><span class="string">" bag: "</span> + stu.getBag() + <span class="string">"("</span> + stu.getBag().getLogo() + <span class="string">" width: "</span> + </span><br><span class="line">stu.getBag().getWidth() + <span class="string">")"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>}</p><p>输出：<br>testClone.Student3@15db9742 age: 1 name: aa bag: testClone.Bag@6d06d69c(Nike width: 10)<br>testClone.Student3@7852e922 age: 1 name: aa bag: testClone.Bag@4e25154f(Nike width: 10)<br>testClone.Student3@15db9742 age: 1 name: aa bag: testClone.Bag@6d06d69c(Nike width: 10)<br>testClone.Student3@7852e922 age: 12 name: bb bag: testClone.Bag@4e25154f(JNike width: 100)</p><h3 id="1-10-什么是反射机制"><a href="#1-10-什么是反射机制" class="headerlink" title="1.10 什么是反射机制"></a>1.10 什么是反射机制</h3><p>Java 反射机制是在运行状态中，对于任意一个类，都能够获得这个类的所有属性和方法，对于任意一个对象都能够调用它的任意一个属性和方法。这种在运行时动态的获取信息以及动态调用对象的方法的功能称为Java 的反射机制。</p><p>Class 类与java.lang.reflect 类库一起对反射的概念进行了支持，该类库包含了Field,Method,Constructor类(每个类都实现了Member 接口)。这些类型的对象时由JVM 在运行时创建的，用以表示未知类里对应的成员。</p><p>这样你就可以使用Constructor 创建新的对象，用get() 和set() 方法读取和修改与Field 对象关联的字段，用invoke() 方法调用与Method 对象关联的方法。另外，还可以调用getFields() getMethods() 和 getConstructors() 等很便利的方法，以返回表示字段，方法，以及构造器的对象的数组。这样匿名对象的信息就能在运行时被完全确定下来，而在编译时不需要知道任何事情。</p><h4 id="二、获取字节码的方式"><a href="#二、获取字节码的方式" class="headerlink" title="二、获取字节码的方式"></a>二、获取字节码的方式</h4><p>在Java 中可以通过三种方法获取类的字节码(Class)对象</p><ul><li><p>通过Object 类中的getClass() 方法，想要用这种方法必须要明确具体的类并且创建该类的对象。</p></li><li><p>所有数据类型都具备一个静态的属性.class 来获取对应的Class 对象。但是还是要明确到类，然后才能调用类中的静态成员。</p></li><li><p>只要通过给定类的字符串名称就可以获取该类的字节码对象，这样做扩展性更强。通过Class.forName() 方法完成，必须要指定类的全限定名，由于前两种方法都是在知道该类的情况下获取该类的字节码对象，因此不会有异常，但是Class.forName() 方法如果写错类的路径会报 ClassNotFoundException 的异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">ackage com.jas.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Fruit fruit = <span class="keyword">new</span> Fruit();</span><br><span class="line">        Class&lt;?&gt; class1 = fruit.getClass();     <span class="comment">//方法一</span></span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; class2 = Fruit.class;     <span class="comment">//方法二</span></span><br><span class="line"></span><br><span class="line">        Class class3 = <span class="keyword">null</span>;     </span><br><span class="line">        <span class="keyword">try</span> &#123;    <span class="comment">//方法三，如果这里不指定类所在的包名会报 ClassNotFoundException 异常</span></span><br><span class="line">            class3 = Class.forName(<span class="string">"com.jas.reflect.Fruit"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(class1 + <span class="string">"  "</span> +class2 + <span class="string">"    "</span> + class3);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fruit</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="三、通过反射机制获取类信息"><a href="#三、通过反射机制获取类信息" class="headerlink" title="三、通过反射机制获取类信息"></a>三、通过反射机制获取类信息</h4><p>通过反射机制创建对象，在创建对象之前要获得对象的构造函数对象，通过构造函数对象创建对应类的实例。</p><p>下面这段代码分别在运行期间创建了一个无参与有参的对象实例。由于getConstructor() 方法与newInstance() 方法抛出了很多异常(你可以通过源代码查看它们)，这里就简写了直接抛出一个Exception，下同。</p><p><a href="javascript:void(0);" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jas.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        Class clazz = <span class="keyword">null</span>;</span><br><span class="line">        clazz = Class.forName(<span class="string">"com.jas.reflect.Fruit"</span>);</span><br><span class="line">        Constructor&lt;Fruit&gt; constructor1 = clazz.getConstructor();</span><br><span class="line">        Constructor&lt;Fruit&gt; constructor2 = clazz.getConstructor(String.class);</span><br><span class="line"></span><br><span class="line">        Fruit fruit1 = constructor1.newInstance();</span><br><span class="line">        Fruit fruit2 = constructor2.newInstance(<span class="string">"Apple"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fruit</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Fruit</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"无参构造器Run..........."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Fruit</span><span class="params">(String type)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"有参构造器Run..........."</span> + type);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<br>无参构造器Run………..<br>有参构造器Run………..Apple</p><p>通过反射机制获取Class 中的属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jas.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; clazz = <span class="keyword">null</span>;</span><br><span class="line">        Field field = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        clazz = Class.forName(<span class="string">"com.jas.reflect.Fruit"</span>);</span><br><span class="line">        <span class="comment">//field = clazz.getField("num");       getField() 方法不能获取私有的属性</span></span><br><span class="line">        <span class="comment">// field = clazz.getField("type");     访问私有字段时会报 NoSuchFieldException异常</span></span><br><span class="line">        field = clazz.getDeclaredField(<span class="string">"type"</span>);     <span class="comment">//获取私有type 属性</span></span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);  <span class="comment">//对私有字段的访问取消检查</span></span><br><span class="line">        Fruit fruit = (Fruit) clazz.newInstance();  <span class="comment">//创建无参对象实例</span></span><br><span class="line">        field.set(fruit,<span class="string">"Apple"</span>);   <span class="comment">//为无参对象实例属性赋值</span></span><br><span class="line">        Object type = field.get(fruit); <span class="comment">//通过fruit 对象获取属性值</span></span><br><span class="line"></span><br><span class="line">        System.out.println(type);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fruit</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Fruit</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"无参构造器Run..........."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Fruit</span><span class="params">(String type)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"有参构造器Run..........."</span> + type);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<br>无参构造器Run………..<br>Apple</p><p>通过反射机制获取Class 中的方法并运行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jas.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        Class clazz = <span class="keyword">null</span>;</span><br><span class="line">        Method method = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        clazz = Class.forName(<span class="string">"com.jas.reflect.Fruit"</span>);</span><br><span class="line">        Constructor&lt;Fruit&gt; fruitConstructor = clazz.getConstructor(String.class);</span><br><span class="line">        Fruit fruit = fruitConstructor.newInstance(<span class="string">"Apple"</span>);    <span class="comment">//创建有参对象实例</span></span><br><span class="line"></span><br><span class="line">        method = clazz.getMethod(<span class="string">"show"</span>,<span class="keyword">null</span>);  <span class="comment">//获取空参数show 方法</span></span><br><span class="line">        method.invoke(fruit,<span class="keyword">null</span>);  <span class="comment">//执行无参方法</span></span><br><span class="line"></span><br><span class="line">        method = clazz.getMethod(<span class="string">"show"</span>,<span class="keyword">int</span>.class); <span class="comment">//获取有参show 方法</span></span><br><span class="line">        method.invoke(fruit,<span class="number">20</span>);  <span class="comment">//执行有参方法</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fruit</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Fruit</span><span class="params">(String type)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Fruit type = "</span> + type);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Fruit type = "</span> + type + <span class="string">".....Fruit num = "</span> + num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<br>Fruit type = Apple<br>Fruit type = Apple…..Fruit num = 20</p><h4 id="四、反射机制简单应用（使用简单工厂创建对象）"><a href="#四、反射机制简单应用（使用简单工厂创建对象）" class="headerlink" title="四、反射机制简单应用（使用简单工厂创建对象）"></a>四、反射机制简单应用（使用简单工厂创建对象）</h4><p>Class.forName() 生成的结果是在编译时不可知的，因此所有的方法特征签名信息都是在执行时被提取出来的。反射机制能过创建一个在编译期完全未知的对象，并调用该对象的方法。</p><p>以下是反射机制与泛型的一个应用，通过一个工厂类创建不同类型的实例。</p><p>要创建对象的实例类Apple ：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">package com.jas.reflect;</span><br><span class="line"></span><br><span class="line">public<span class="built_in"> interface </span>Fruit &#123;&#125;</span><br><span class="line">class Apple implements Fruit&#123;&#125;</span><br></pre></td></tr></table></figure><p>加载的配置文件config.properties：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Fruit=com<span class="selector-class">.jas</span><span class="selector-class">.reflect</span><span class="selector-class">.Apple</span></span><br></pre></td></tr></table></figure><p>工厂类BasicFactory ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jas.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">BasicFactory</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> BasicFactory bf = <span class="keyword">new</span> BasicFactory();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Properties pro = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        pro = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="keyword">try</span>&#123;    </span><br><span class="line">            <span class="comment">//通过类加载器加载配置文件</span></span><br><span class="line">            pro.load(<span class="keyword">new</span> FileReader(BasicFactory.class.getClassLoader().</span><br><span class="line">                    getResource(<span class="string">"config.properties"</span>).getPath()));</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BasicFactory <span class="title">getFactory</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bf;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用泛型获得通用的对象</span></span><br><span class="line">    <span class="keyword">public</span>  &lt;T&gt; <span class="function">T <span class="title">newInstance</span><span class="params">(Class&lt;T&gt; clazz)</span></span>&#123;</span><br><span class="line">        String cName = clazz.getSimpleName();   <span class="comment">//获得字节码对象的类名</span></span><br><span class="line">        String clmplName = pro.getProperty(cName);   <span class="comment">//根据字节码对象的类名通过配置文件获得类的全限定名</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (T)Class.forName(clmplName).newInstance();   <span class="comment">//根据类的全限定名创建实例对象</span></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建对象实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jas.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Fruit fruit = BasicFactory.getFactory().newInstance(Fruit.class);</span><br><span class="line">        System.out.println(fruit);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出<br>com.jas.reflect.Apple@4554617c</p><p>上面这个实例通过一个工厂创建不同对象的实例，通过这种方式可以降低代码的耦合度，代码得到了很大程度的扩展，以前要创建Apple 对象需要通过new 关键字创建Apple 对象，如果我们也要创建Orange 对象呢？是不是也要通过new 关键字创建实例并向上转型为Fruit ，这样做是麻烦的。</p><p>现在我们直接有一个工厂，你只要在配置文件中配置你要创建对象的信息，你就可以创建任何类型你想要的对象，是不是简单很多了呢？可见反射机制的价值是很惊人的。</p><p>Spring 中的 IOC 的底层实现原理就是反射机制，Spring 的容器会帮我们创建实例，该容器中使用的方法就是反射，通过解析xml文件，获取到id属性和class属性里面的内容，利用反射原理创建配置文件里类的实例对象，存入到Spring的bean容器中。</p><p>  参考书籍：<br> 《Java 编程思想》 Bruce Eckel 著 陈昊鹏 译</p><h3 id="1-10-java创建对象的几种方式"><a href="#1-10-java创建对象的几种方式" class="headerlink" title="1.10 java创建对象的几种方式"></a>1.10 java创建对象的几种方式</h3><ol><li>通过new实例化一个对象</li><li>通过反射机制创建对象</li><li>通过clone方法创建一个对象</li><li>通过反序列化方式创建一个对象</li></ol><h3 id="1-11-package作用"><a href="#1-11-package作用" class="headerlink" title="1.11 package作用"></a>1.11 package作用</h3><p>package的作用</p><ul><li>package的中文意思是“包”，它是一个比较抽象的逻辑概念，其宗旨是把.java文件 (Java源文件）、.class文件（编译后的文件）以及其他resource文件（例如.xml文件、.avi文件、.mp3文件、.txt文件等）有条理地进行一个组织，以供使用。它类似于Linux文件系统, 有一个根，从根开始有目录和文件，然后目录中嵌套目录。</li><li>具体而言，package主要有以下两个作用：<br>第一，提供多层命名空间，解决命名冲突，通过使用package,使得处于不同package中的类可以存在相同的名字。<br>第二，对类按功能进行分类，使项目的组织更加清晰。当开发一个有非常多的类的项目时，如果不使用package对类进行分类，而是把所有类都放在一个package下，这样的代码不仅可读性差，而且可维护性也不好，会严重影响开发效率。</li></ul><p>2）package的用法</p><ul><li>package的用法一般如下（源文件所在目录为当前目录）：<br>1.在每个源文件的开头加上”package packagename;”，然后源文件所在目录下创建一个新目录，名称为 packapename。<br>2.用javac指令编译每个sourcename. java源文件，将生成的sourcename. classname文件复制到packagename 目录。<br>3.用 java 指令运行程序：java packagename. sourcename。</li></ul><p>3）实例<br>以下是一个简单的程序示例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.itcourse.pkg;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPackage</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：<br>Hello World!</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-1-java语言有哪些优点？&quot;&gt;&lt;a href=&quot;#1-1-java语言有哪些优点？&quot; class=&quot;headerlink&quot; title=&quot;1.1 java语言有哪些优点？&quot;&gt;&lt;/a&gt;1.1 java语言有哪些优点？&lt;/h3&gt;&lt;p&gt;1.java语言为纯面向对象的语言。&lt;/p&gt;
&lt;p&gt;2.平台无关性。java语言的优点便是“一次编译，到处执行”。编译后的程序不会被平台所约束，因此java语言有很好的移植性。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>数组</title>
    <link href="http://dumengblog.club/2019/09/22/%E6%95%B0%E7%BB%84/"/>
    <id>http://dumengblog.club/2019/09/22/数组/</id>
    <published>2019-09-22T06:55:55.000Z</published>
    <updated>2019-10-07T07:40:41.563Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Java 数组初始化的两种方法：</strong>  </p><p>静态初始化： 程序员在初始化数组时为数组每个元素赋值；<br> 动态初始化： 数组初始化时，程序员只指定数组的长度，由系统为每个元素赋初值。</p><a id="more"></a><p><strong>数组是否必须初始化</strong></p><p>对于这个问题，关键在于要弄清楚数组变量和数组对象的差别。数组变量是存放在栈内存中的，数组对象是存放在堆内存中的。数组变量只是一个引用变量，他能够指向实际的数组对象。</p><p>所谓的数组初始化并非对数组变量初始化，而是对数组对象进行初始化。</p><p><strong>定义数组</strong></p><p>　　<strong>方式1</strong>（推荐，更能表明数组类型）<br> 　　type[] 变量名 = new type[数组中元素的个数];<br> 　　比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><p>　　数组名，也即引用a，指向数组元素的首地址。</p><p>　　<strong>方式2</strong>（同C语言）</p><p>　　type变量名[] = new type[数组中元素的个数];</p><p>　　如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><p>　　<strong>方式3</strong> 定义时直接初始化</p><p>　　type[] 变量名 = new type[]{逗号分隔的初始化值};</p><p>　　其中红色部分可省略，所以又有两种：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br></pre></td></tr></table></figure><p>其中int[] a = new int[]{1,2,3,4};的第二个方括号中不能加上数组长度，因为元素个数是由后面花括号的内容决定的。</p><p>1.</p><p>利用Arrays库中的sort方法对数组排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day1;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Arraysort</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner input=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> a[]=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++) &#123;</span><br><span class="line">System.out.println(<span class="string">"请输入第"</span>+(i+<span class="number">1</span>)+<span class="string">"位学员的成绩"</span>);</span><br><span class="line">    a[i]=input.nextInt();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"您输入的分数数据排序前为："</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++) &#123;</span><br><span class="line">System.out.print(a[i]+<span class="string">"\t"</span>);</span><br><span class="line">&#125;</span><br><span class="line">Arrays.sort(a);</span><br><span class="line">System.out.println(<span class="string">"您输入排序后的数列为："</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++) &#123;</span><br><span class="line">System.out.print(a[i]+<span class="string">"\t"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二维数组基础</p><p>　　基本的定义方式有两种形式，如：</p><p>　　</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type[][] [][]i = <span class="keyword">new</span> type[<span class="number">2</span>][<span class="number">3</span>]<span class="comment">//推荐使用</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type i[][] = <span class="keyword">new</span> type[<span class="number">2</span>][<span class="number">3</span>];</span><br></pre></td></tr></table></figure><p>　　如下程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayTest3</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">int</span>[][] i = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line">       System.out.println(<span class="string">"Is i an Object? "</span></span><br><span class="line">              + (i <span class="keyword">instanceof</span> Object));</span><br><span class="line">       System.out.println(<span class="string">"Is i[0] an int[]? "</span></span><br><span class="line">              + (i[<span class="number">0</span>] <span class="keyword">instanceof</span> <span class="keyword">int</span>[]));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为两个true</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Java 数组初始化的两种方法：&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;静态初始化： 程序员在初始化数组时为数组每个元素赋值；&lt;br&gt; 动态初始化： 数组初始化时，程序员只指定数组的长度，由系统为每个元素赋初值。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="java数组" scheme="http://dumengblog.club/tags/java%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>JAVA类和对象</title>
    <link href="http://dumengblog.club/2019/09/19/JAVA%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/"/>
    <id>http://dumengblog.club/2019/09/19/JAVA类和对象/</id>
    <published>2019-09-19T11:52:40.000Z</published>
    <updated>2019-10-01T14:55:38.733Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、类"><a href="#一、类" class="headerlink" title="一、类"></a>一、类</h2><p>　　类是封装对象的属性和行为的载体，在Java语言中对象的属性以成员变量的形式存在，而对象的方法以成员方法的形式存在。</p><a id="more"></a><h3 id="1-类的构造方法"><a href="#1-类的构造方法" class="headerlink" title="　　1. 类的构造方法"></a>　　1. 类的构造方法</h3><p>　　<strong>构造方法是一个与类同名的方法</strong>，对象的创建就是通过构造方法完成的，构造方法分为有参构造方法和无参构造方法，区别就在于有没有参数。说这么多概念是不是感觉有点麻木，直接看下面的例子吧。</p><p>public class Example {</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Example</span><span class="params">()</span>  </span>&#123;                              <span class="comment">// 定义无参构造方法</span></span><br><span class="line">    System.out.println(<span class="string">"无参构造方法"</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Example</span><span class="params">(String name)</span> </span>&#123;                   <span class="comment">// 定义有参构造方法</span></span><br><span class="line">    System.out.println(<span class="string">"有参构造方法"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在定义构造方法时，构造方法没有返回值，且构造方法不需要void关键字进行修饰。“public”是构造方法的修饰符，“Example”是构造方法的名称。</p><p>　　在构造方法中可以为成员变量赋值，这样当实例化一个本类的对象时，相应的成员变量也将被初始化。</p><h3 id="2-类的主方法"><a href="#2-类的主方法" class="headerlink" title="2. 类的主方法"></a>2. 类的主方法</h3><p>　　主方法其实我们已经见过很多次了，Java编译器通过主方法来执行程序，是类的入口点，语法格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　“static”是指主方法是静态的，若在其中调用其它方法，则该方法也必须是静态的；”void”是指主方法没有返回值；“String[] args”是指主方法的形参为数组，用args[0]~args[n]分别表示程序的第一到第n个参数，可以使用args.length获取参数的个数。</p><h3 id="3-成员变量"><a href="#3-成员变量" class="headerlink" title="3. 成员变量"></a>3. 成员变量</h3><p>　　对象的属性称为成员变量，也可称为属性。下面以学生类（可比作学生证）举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">int</span> id;                    <span class="comment">// 定义一个int型成员变量，学号</span></span><br><span class="line">     <span class="keyword">private</span> String name;            <span class="comment">// 定义一个String型成员变量， 姓名</span></span><br><span class="line">     </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;                <span class="comment">// 定义无参构造方法</span></span><br><span class="line">         </span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;    <span class="comment">// 定义有参构造方法</span></span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;            <span class="comment">// 定义一个setName()方法，用于导入学生姓名</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;                    <span class="comment">// 将参数值赋给成员变量</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;        <span class="comment">// 定义一个getName()方法，用于获取学生姓</span></span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> Student <span class="title">getStudent</span><span class="params">()</span> </span>&#123;        <span class="comment">// 返回Student类引用</span></span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　这就是个比较全的例子了，在Java语言中使用class关键字来定义类，Student是类的名称；在Student类中定义了三个成员变量，分别为学号和姓名，可设置初始值也可不设置初始值，若不设置初始值则会有默认值；private关键字用于定义一个私有成员，后面会介绍public、protected和private。接下来的两个构造方法上面已经提到过了，this关键字用于引用对象的成员变量和方法，在后面会有所介绍。一般在这样的类中每一个变量都会有set和get方法，set方法是带参数的方法没有返回值，get方法是有返回值的方法，用于获取。最后还有一个getStudent()方法，它的类型是Student类的，用于返回Student类的引用，用this关键字实现。</p><h3 id="4-成员方法"><a href="#4-成员方法" class="headerlink" title="　　4. 成员方法"></a>　　4. 成员方法</h3><p>　　成员方法对应类的行为，就是上述实例中的getName()和setName()方法，分别为获取学生姓名和设置学生姓名的方法，语法格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">权限修饰符 返回值类型 方法名(参数类型 参数名)&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　若无返回值，返回值类型用void关键字表示，如上述setName()方法。若有返回值，返回值类型要与方法返回值类型一致。</p><h3 id="5-局部变量"><a href="#5-局部变量" class="headerlink" title="　　5. 局部变量"></a>　　5. 局部变量</h3><p>　　如果在成员方法中定义一个变量，那么这个变量别称为局部变量。例如在上述Student类中的getName()方法中定义一个局部变量id如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">    <span class="keyword">int</span> id = <span class="number">0</span>;                        <span class="comment">// 定义一个局部变量</span></span><br><span class="line">    <span class="keyword">return</span> id + <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　局部变量是在方法执行时创建，在方法执行结束时被销毁，使用时必须赋值或初始化。所以<strong>局部变量的有效范围从该变量的声明开始到该变量的结束为止</strong>。</p><p>　　若一个方法中含有与成员变量同名的局部变量，则方法中对这个变量的访问以局部变量进行访问。例如id，在上述方法中id=0，而不是Student类中的成员变量id的值。</p><h3 id="6-静态变量、常量和方法"><a href="#6-静态变量、常量和方法" class="headerlink" title="　　6. 静态变量、常量和方法"></a>　　6. 静态变量、常量和方法</h3><p>　　由static修饰的变量、常量和方法被称作静态变量、常量和方法。静态成员是属于类所有的，区别于个别对象，可以在本类或其他类中使用类名和“.”运算符调用，这个在之前的篇幅中的例子也出现过，语法格式为： 类名.静态类成员 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticTest</span> </span>&#123;</span><br><span class="line">   <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">double</span> PI = <span class="number">3.1415926</span>;        <span class="comment">// 在类中定义静态常量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> id;                        <span class="comment">// 在类中定义静态变量</span></span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(StaticTest.PI);        <span class="comment">// 调用静态常量</span></span><br><span class="line">       System.out.println(StaticTest.id);        <span class="comment">// 调用静态变量</span></span><br><span class="line">       StaticTest.demo01();                    <span class="comment">// 调用静态方法</span></span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>权限修饰符</li></ol><p>　　Java中的权限修饰符主要包括private、public和protected，这些修饰符控制着对类和类的成员变量以及成员方法的访问。区别见下表：</p><table><thead><tr><th>访问位置</th><th>private</th><th>protected</th><th>public</th></tr></thead><tbody><tr><td>本类</td><td>可见</td><td>可见</td><td>可见</td></tr><tr><td>同包其他类或子类</td><td>不可见</td><td>可见</td><td>可见</td></tr><tr><td>其他包的类或子类</td><td>不可见</td><td>不可见</td><td>可见</td></tr></tbody></table><p>　若一个类的访问权限为不可见，这个类将隐藏其内的所有数据，以免用户直接访问它。当声明类时不使用public、protected或private修饰符设置类的权限，则这个类预设为包存取范围，即只有同一个包中的类可以调用这个类的成员变量或成员方法。</p><h3 id="8-this关键字"><a href="#8-this关键字" class="headerlink" title="　8. this关键字"></a>　8. this关键字</h3><p>　　在Java中，this关键字被隐式地用于引用对象的成员变量和方法，如前面“成员变量”中的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;            <span class="comment">// 定义一个setName()方法，用于导入学生姓名</span></span><br><span class="line">    <span class="keyword">this</span>.name = name;                    <span class="comment">// 将参数值赋给成员变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　setName()方法中，this.name指定的就是Student类中name变量，而“this.name=name”语句中第二个name则指定的是形参name。实质上，setName()方法实现的功能就是将形参name的值赋予成员变量name。</p><p>　　this除了可以调用成员变量或成员方法之外，还可以作为方法的返回值。如前面“成员变量”中的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Student <span class="title">getStudent</span><span class="params">()</span> </span>&#123;        <span class="comment">// 返回Student类引用</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　在getStudent()方法中，方法的返回值为Student类，所以方法体中使用return this这种形式将Student类的对象进行返回。</p><h2 id="二、对象"><a href="#二、对象" class="headerlink" title="二、对象"></a>二、对象</h2><p>　　Java是面向对象的程序设计语言，对象是由类抽象出来的，所有的问题都是通过对象来处理，对象可以操作类的基本属性和方法解决相应的问题。</p><h3 id="1-对象的创建"><a href="#1-对象的创建" class="headerlink" title="　　1. 对象的创建"></a>　　1. 对象的创建</h3><p>　　在Java中可以使用new操作符调用构造方法创建对象，语法格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Test test = <span class="keyword">new</span> Test();</span><br><span class="line">Test test = <span class="keyword">new</span> Test(<span class="string">"a"</span>);</span><br></pre></td></tr></table></figure><p>　　test对象被创建出来时，test对象就是一个对象的引用，这个引用在内存中为对象分配了存储空间，可以在构造方法中初始化成员变量，当创建对象时，自动调用构造方法。</p><p>　　在Java中对象和实例事实上可以通用，下面看一个创建对象的实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateObject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CreateObject</span><span class="params">()</span> </span>&#123;        <span class="comment">// 构造方法</span></span><br><span class="line">        System.out.println(<span class="string">"test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> CreateObject();        <span class="comment">//  创建对象</span></span><br></pre></td></tr></table></figure><p>　　在上述实例的主方法中使用new操作符创建对象，在创建对象的同时，自动调用构造方法中的代码。</p><h3 id="2-访问对象的属性和行为"><a href="#2-访问对象的属性和行为" class="headerlink" title="　　2. 访问对象的属性和行为"></a>　　2. 访问对象的属性和行为</h3><p>　　当用户使用new操作符创建一个对象后，可以使用“对象.类成员”来获取对象的属性和行为。话不多说，直接上代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">     <span class="keyword">int</span> i = <span class="number">2018</span>;        <span class="comment">// 成员变量</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;    <span class="comment">// 成员方法</span></span><br><span class="line">         <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++) &#123;</span><br><span class="line">             System.out.print(i + <span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">2</span> ) &#123;</span><br><span class="line">                 System.out.println();        <span class="comment">// 换行</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ObjectTest</span><span class="params">()</span> </span>&#123;        <span class="comment">// 构造方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ObjectTest o1 = <span class="keyword">new</span> ObjectTest();        <span class="comment">// 创建一个对象</span></span><br><span class="line">        ObjectTest o2 = <span class="keyword">new</span> ObjectTest();        <span class="comment">// 创建另一个对象</span></span><br><span class="line">        o2.i = <span class="number">60</span>;        <span class="comment">// 给第二个类成员变量赋值</span></span><br><span class="line">       </span><br><span class="line">        System.out.println(<span class="string">"第一个实例对象调用变量i的结果为："</span>+ o1.i);</span><br><span class="line">        o1.call();         </span><br><span class="line">        System.out.println(<span class="string">"第二个实例对象调用变量i的结果为："</span>+ o2.i);</span><br><span class="line">        o2.call();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　这里我们可以看到，虽然使用两个对象调用同一个成员变量，结果却不相同，因为在打印这个成员变量的值之前将该值重新赋值为60，但在赋值时使用的是第二个对象o2调用的成员变量，所以在第一个对象o1调用成员变量打印该值时仍然是成员变量的初始值。所以两个对象的产生是相互独立的。</p><p> 　　如果希望成员变量不被其中任何一个对象改变，可以使用static关键字，也即改第三行代码为 static int i = 2018; ，运行结果如下：</p><p> 　　这里由于第19行代码“o2.i=60;”改变了静态成员变量的值，所以使对象o1调用成员变量的值也变为了60；当“o1.i”执行完后，再次调用call()方法，使i的值又重新赋值为0，循环打印，最后i为3，退出循环，所以对象o2调用成员变量的值变成了3。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、类&quot;&gt;&lt;a href=&quot;#一、类&quot; class=&quot;headerlink&quot; title=&quot;一、类&quot;&gt;&lt;/a&gt;一、类&lt;/h2&gt;&lt;p&gt;　　类是封装对象的属性和行为的载体，在Java语言中对象的属性以成员变量的形式存在，而对象的方法以成员方法的形式存在。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>程序流程控制</title>
    <link href="http://dumengblog.club/2019/09/18/%E7%A8%8B%E5%BA%8F%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    <id>http://dumengblog.club/2019/09/18/程序流程控制/</id>
    <published>2019-09-18T06:14:22.000Z</published>
    <updated>2019-10-01T14:55:23.821Z</updated>
    
    <content type="html"><![CDATA[<h2 id="程序流程控制有-选择，循环，以及跳转结构"><a href="#程序流程控制有-选择，循环，以及跳转结构" class="headerlink" title="程序流程控制有 选择，循环，以及跳转结构"></a>程序流程控制有 选择，循环，以及跳转结构</h2><h4 id="选择结构中无非就是-If-和-switch语句我两种都做了一些小案例"><a href="#选择结构中无非就是-If-和-switch语句我两种都做了一些小案例" class="headerlink" title="选择结构中无非就是 If 和 switch语句我两种都做了一些小案例"></a>选择结构中无非就是 If 和 switch语句我两种都做了一些小案例</h4><a id="more"></a><p>1.</p><p>利用Scanner库来获得控制台用户输入的数字与代码中定义的变量比较</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day1;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">If</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> jiangjin=<span class="number">500</span>;</span><br><span class="line">Scanner input =<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">"请输入奖金，猜是否与规定的数目相符："</span>);</span><br><span class="line"><span class="keyword">int</span> in =input.nextInt();</span><br><span class="line"><span class="keyword">if</span> (in==jiangjin) &#123;</span><br><span class="line">System.out.println(<span class="string">"恭喜您中500万"</span>);</span><br><span class="line">System.out.println(<span class="string">"买车"</span>);</span><br><span class="line">System.out.println(<span class="string">"买房"</span>);</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"谢谢惠顾"</span>);</span><br><span class="line">System.out.println(<span class="string">"您得继续吃方便面"</span>);</span><br><span class="line">System.out.println(<span class="string">"革命尚未成功，同志仍需努力"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="//dumengblog.club/2019/09/18/程序流程控制/E:%5CBlog%5Cimage%5CQQ%E6%88%AA%E5%9B%BE20190915142446.png" alt="运行截图">2.</p><p>利用Scanner库来获得控制台用户输入的数字并利用switch case在控制台输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day1;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Switchtest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"请输入数字"</span>);</span><br><span class="line">Scanner input=<span class="keyword">new</span> Scanner (System.in);</span><br><span class="line"><span class="keyword">int</span> num=input.nextInt();</span><br><span class="line"><span class="keyword">switch</span>(num) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">System.out.print(<span class="string">"输出1"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">System.out.print(<span class="string">"输出2"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">System.out.print(<span class="string">"输出3"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">System.out.print(<span class="string">"输出4"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">System.out.print(<span class="string">"啥都不是"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="循环结构就是for-和while语句"><a href="#循环结构就是for-和while语句" class="headerlink" title="循环结构就是for 和while语句"></a>循环结构就是for 和while语句</h4><p>1.很经典的99乘法表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day1;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fortext</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner input=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++) &#123;</span><br><span class="line">System.out.print(i+<span class="string">"*"</span>+j+<span class="string">"="</span>+i*j+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.print(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.</p><p>利用while 不断输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day1;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">While</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=<span class="number">100</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"我喜欢你，我已经说了"</span>+i+<span class="string">"遍"</span>);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Java语言中提供了3种跳转语句，分别是break语句、continue语句和return语句。"><a href="#Java语言中提供了3种跳转语句，分别是break语句、continue语句和return语句。" class="headerlink" title="Java语言中提供了3种跳转语句，分别是break语句、continue语句和return语句。"></a>Java语言中提供了3种跳转语句，分别是break语句、continue语句和return语句。</h4><h5 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h5><p>break语句经常在循环switch语句中使用，break语句用于中止下面case语句的比较。实际上break语句还可以应用在for,while和do-while循环语句中，用于强行退出循环，也就是忽略循环体 中其他语句和循环条件的限制。</p><h5 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Break</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        String flag=<span class="string">"从1到100之间的连续整数的和是："</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)&#123;   <span class="comment">//循环从1-100的数</span></span><br><span class="line">            sum+=i;        <span class="comment">//将各数进行相加</span></span><br><span class="line">            <span class="keyword">if</span>(sum&gt;<span class="number">1000</span>)&#123;   <span class="comment">//如果sum大于1000</span></span><br><span class="line">                flag=<span class="string">"从1到"</span>+i+<span class="string">"之间的连续整数的和是："</span>;</span><br><span class="line">                <span class="keyword">break</span>;   <span class="comment">//break关键字退出循环</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(flag+sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="continue-语句"><a href="#continue-语句" class="headerlink" title="continue 语句"></a>continue 语句</h5><p>continue语句只能应用在for,while和do…while循环语句中，用于让程序直接跳过其后面的语句，进行下一次的循环。</p><h5 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h5><h5 id="return语句"><a href="#return语句" class="headerlink" title="return语句"></a>return语句</h5><p><code>return[表达式];</code></p><p>表达式：可选参数，表标要返回的值。它的数据类型要与方法声明中的返回值类型一致，可以通过强制类型转换实现。</p><h5 id="Example-2"><a href="#Example-2" class="headerlink" title="Example"></a>Example</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BreakCyc</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"\n----------------中断单层的例子。-------------"</span>);</span><br><span class="line">        String[] array = <span class="keyword">new</span> String[]&#123;<span class="string">"白鹭"</span>,<span class="string">"丹顶鹤"</span>,<span class="string">"黄鹂"</span>,<span class="string">"鹦鹉"</span>,<span class="string">"乌鸦"</span>,<span class="string">"喜鹊"</span>,<span class="string">"老鹰"</span>,<span class="string">"布谷鸟"</span>,<span class="string">"老鹰"</span></span><br><span class="line">        ,<span class="string">"灰纹鸟"</span>,<span class="string">"老鹰"</span>,<span class="string">"百灵鸟"</span>&#125;;      <span class="comment">//创建数组</span></span><br><span class="line">        System.out.println(<span class="string">"在你发现第一只老鹰之前，告诉我都有什么鸟："</span>);</span><br><span class="line">        <span class="keyword">for</span>(String string:array)&#123;             <span class="comment">//使用foreach循环遍历数组</span></span><br><span class="line">            <span class="keyword">if</span>(string.equals(<span class="string">"老鹰"</span>))     <span class="comment">//如果遇到老鹰，</span></span><br><span class="line">                <span class="keyword">break</span>;                    <span class="comment">//中断循环</span></span><br><span class="line">            System.out.println(<span class="string">"有："</span>+string+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"\n\n----------中断双层循环的例子。----------"</span>);</span><br><span class="line">        <span class="comment">//创建成绩数组</span></span><br><span class="line">        <span class="keyword">int</span>[][] myScore=<span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">67</span>,<span class="number">78</span>,<span class="number">63</span>,<span class="number">22</span>,<span class="number">66</span>&#125;,&#123;<span class="number">55</span>,<span class="number">68</span>,<span class="number">78</span>,<span class="number">95</span>,<span class="number">44</span>&#125;,&#123;<span class="number">95</span>,<span class="number">97</span>,<span class="number">92</span>,<span class="number">93</span>,<span class="number">81</span>&#125;&#125;;</span><br><span class="line">        System.out.println(<span class="string">"宝宝这次考试成绩：\n\t数学\t语文\t英语\t美术\t历史"</span>);</span><br><span class="line">        <span class="comment">//遍历成绩数组</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//No1是标记名称   如果条件成立，就中断标记的这个循环</span></span><br><span class="line">        No1:<span class="keyword">for</span>(<span class="keyword">int</span>[] is:myScore)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i:is)&#123;</span><br><span class="line">                System.out.print(i+<span class="string">"\t"</span>);     <span class="comment">//输出成绩</span></span><br><span class="line">                <span class="comment">//中途遇到不合格的，直接中断所有输出</span></span><br><span class="line">                <span class="keyword">if</span>(i&lt;<span class="number">60</span>)&#123;</span><br><span class="line">                    System.out.println(<span class="string">"\n\t等等，"</span>+i+<span class="string">"分是什么？这个为什么不及格？"</span>);</span><br><span class="line">                    <span class="keyword">break</span> No1;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;程序流程控制有-选择，循环，以及跳转结构&quot;&gt;&lt;a href=&quot;#程序流程控制有-选择，循环，以及跳转结构&quot; class=&quot;headerlink&quot; title=&quot;程序流程控制有 选择，循环，以及跳转结构&quot;&gt;&lt;/a&gt;程序流程控制有 选择，循环，以及跳转结构&lt;/h2&gt;&lt;h4 id=&quot;选择结构中无非就是-If-和-switch语句我两种都做了一些小案例&quot;&gt;&lt;a href=&quot;#选择结构中无非就是-If-和-switch语句我两种都做了一些小案例&quot; class=&quot;headerlink&quot; title=&quot;选择结构中无非就是 If 和 switch语句我两种都做了一些小案例&quot;&gt;&lt;/a&gt;选择结构中无非就是 If 和 switch语句我两种都做了一些小案例&lt;/h4&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JAVA API</title>
    <link href="http://dumengblog.club/2019/09/17/JAVA-API/"/>
    <id>http://dumengblog.club/2019/09/17/JAVA-API/</id>
    <published>2019-09-17T12:16:18.000Z</published>
    <updated>2019-10-01T14:52:39.674Z</updated>
    
    <content type="html"><![CDATA[<p>java 系统中提供了大量的类和接口供程序开发人员使用，并且按照功能的不同，存放在不同的包中。这些包的集合称为标准类库（Java Foundation Class,JFC）,也称为“类库”，即为应用程序接口（API）。</p><a id="more"></a><p>下列例举java中几种核心包：</p><p>java.lang:  这个包下包含了Java语言的核心类，如String、Math、Sytem和Thread类等，使用这个包无需使用import语句导入，系统会自动导入这个包中的所有类。</p><p>java.util: 这个包下包含java的大量工具类/接口和集合框架类/接口。如Arrays和List、Set等。</p><p>java.net: 这个包下包含了一些Java网络编程相关的类/接口。</p><p>java.io: 这个包含了一些Java输入/输出编程相关的类/接口。</p><p>java.text: 这个包下包含一些Java格式化相关的类。</p><p>java.sql: 这个包下包含了java进行JDBC数据库编程的相关类/接口。</p><p>java.awt: 这个包下包含了抽象窗口工具集(Abstract Window Toolkits) 的相关类/接口，这些类主要用于构建图形用户界面(GUI)程序。</p><p>java.swing:这个包下包含了Swing图形用户界面编程的相关类/接口，这些可用于构建平台无关的GUI程序。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;java 系统中提供了大量的类和接口供程序开发人员使用，并且按照功能的不同，存放在不同的包中。这些包的集合称为标准类库（Java Foundation Class,JFC）,也称为“类库”，即为应用程序接口（API）。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>java常见系统类</title>
    <link href="http://dumengblog.club/2019/09/15/java%E5%B8%B8%E8%A7%81%E7%B3%BB%E7%BB%9F%E7%B1%BB/"/>
    <id>http://dumengblog.club/2019/09/15/java常见系统类/</id>
    <published>2019-09-15T12:25:26.000Z</published>
    <updated>2019-10-01T14:54:07.643Z</updated>
    
    <content type="html"><![CDATA[<p>Scanner类</p><ul><li><p>hasNextXxx() 判断是否还有下一个输入项，其中Xxx可以是Int,Double等。如果需要判断是否包含下一个字符串，则可以省略Xxx</p></li><li><p>nextXxx() 获取下一个输入项。Xxx的含义和上个方法中的Xxx相同，默认情况下，Scanner使用空格，回车等作为分隔符</p> <a id="more"></a> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">      Scanner sc = <span class="keyword">new</span> Scanner(System in);</span><br><span class="line">      <span class="keyword">if</span>(sc.hasNextInt()) &#123;</span><br><span class="line"><span class="keyword">int</span> i = sc.nextInt();</span><br><span class="line">         System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><pre><code><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* <span class="keyword">public</span> <span class="built_in">int</span> nextInt():获取一个<span class="built_in">Int</span>类型的值</span><br></pre></td></tr></table></figure></code></pre><p>​    </p><p>String类</p><p>  构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> * <span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">()</span>:空构造</span></span><br><span class="line"><span class="function">    * String s1 </span>= <span class="keyword">new</span> String()</span><br><span class="line">* <span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span>:把字节数组转成字符串</span></span><br><span class="line"><span class="function">    * <span class="keyword">byte</span>[] arr1 </span>= &#123;<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>&#125;;</span><br><span class="line">    * String s2 = <span class="keyword">new</span> String(arr1);</span><br><span class="line">    * System.out.println(s2);</span><br><span class="line">    输出的结果：abc</span><br><span class="line">* <span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">byte</span>[] bytes,<span class="keyword">int</span> index,<span class="keyword">int</span> length)</span>：把字节数组的一部分转成字符串</span></span><br><span class="line"><span class="function">    * <span class="keyword">byte</span>[] arr2 </span>= &#123;<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>,<span class="number">100</span>,<span class="number">101</span>,<span class="number">102</span>&#125;;</span><br><span class="line">    * String s3 = <span class="keyword">new</span> String(arr2,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">    * System.out.println(s3)</span><br><span class="line">    输出的结果：cde</span><br><span class="line">* <span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">char</span>[] value)</span>:把字符数组转成字符串</span></span><br><span class="line"><span class="function">    * <span class="keyword">char</span>[] arr3 </span>= &#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>&#125;;</span><br><span class="line">    * String s4 = <span class="keyword">new</span> String(arr3);</span><br><span class="line">    * System.out.println(s4);</span><br><span class="line">    输出的结果：abcde</span><br><span class="line">* <span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">char</span>[] value,<span class="keyword">int</span> index,<span class="keyword">int</span> count)</span>:把字符数组的一部分转成字符串</span></span><br><span class="line"><span class="function">    * String s5 </span>= <span class="keyword">new</span> String(arr3,<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">    * System.out.println(s5);</span><br><span class="line">    输出的结果：bcd</span><br><span class="line">* <span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">(String original)</span>:把字符串常量值转成一字符串</span></span><br><span class="line"><span class="function">    * String s6 </span>= <span class="keyword">new</span> String(<span class="string">"wodetian"</span>);</span><br><span class="line">    * System.out.println(s6);</span><br><span class="line">    输出的结果：wodetian</span><br></pre></td></tr></table></figure><p>  判断功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">* <span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span>:比较字符串的内容是否相同，区分大小写</span></span><br><span class="line"><span class="function">* <span class="keyword">boolean</span> <span class="title">equalsIgnoreCase</span><span class="params">(String str)</span>:比较字符串的内容是否相同，忽略大小写</span></span><br><span class="line"><span class="function">* <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(String str)</span>:判断大字符串中是否包含小字符串</span></span><br><span class="line"><span class="function">* <span class="keyword">boolean</span> <span class="title">startsWith</span><span class="params">(String str)</span>:判断字符串是否以某个字符串开头</span></span><br><span class="line"><span class="function">* <span class="keyword">boolean</span> <span class="title">endsWith</span><span class="params">(String str)</span>:判断字符串是否以某个指定的字符串开头</span></span><br><span class="line"><span class="function">* <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span>:判断字符串是否为空</span></span><br></pre></td></tr></table></figure><p>  获取功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">* <span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">()</span>:获取指定索引位置的字符</span></span><br><span class="line"><span class="function">* <span class="keyword">char</span> <span class="title">charAt</span><span class="params">(<span class="keyword">int</span> index)</span>:获取指定索引位置的字符</span></span><br><span class="line"><span class="function">* <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(<span class="keyword">int</span> ch)</span>:返回指定字符在此字符串中第一次出现处的索引</span></span><br><span class="line"><span class="function">* <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(String str)</span>:返回指定字符串在此字符串中第一次出现出的索引</span></span><br><span class="line"><span class="function">* <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(<span class="keyword">int</span> ch,<span class="keyword">int</span> fromIndex)</span>:返回指定字符在此字符串中从指定位置后第一次出现处的索引</span></span><br><span class="line"><span class="function">* <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(String str,<span class="keyword">int</span> fromindex)</span>:返回指定字符串在此字符串中从指定位置后第一次出现处的索引</span></span><br><span class="line"><span class="function">* lastIndexOf</span></span><br><span class="line"><span class="function">* String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> start)</span>:从指定位置开始截取字符串，默认到末尾</span></span><br><span class="line"><span class="function">* String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span>:从指定位置开始到指定位置结束截取字符串</span></span><br></pre></td></tr></table></figure><p>  转换功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">* <span class="keyword">byte</span>[] getBytes():把字符串转换为字节数组</span><br><span class="line">* <span class="keyword">char</span>[] toCharArray():把字符串转换为字符数组</span><br><span class="line">* <span class="function"><span class="keyword">static</span> String <span class="title">valueOf</span><span class="params">(<span class="keyword">char</span>[] chs)</span>:把字符数组转成字符串</span></span><br><span class="line"><span class="function">* <span class="keyword">static</span> String <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span>:把<span class="keyword">int</span>类型的数据转成字符串</span></span><br><span class="line"><span class="function">   * 注意：String类的valueOf方法可以把任意类型的数据转成字符串</span></span><br><span class="line"><span class="function">* String <span class="title">toLowerCase</span><span class="params">()</span>:把字符串转成小写</span></span><br><span class="line"><span class="function">* String <span class="title">toUpperCase</span><span class="params">()</span>:把字符串转成大写</span></span><br><span class="line"><span class="function">* String <span class="title">concat</span><span class="params">(String str)</span>:把字符串拼接</span></span><br></pre></td></tr></table></figure><p>  替换功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* <span class="function">String <span class="title">replace</span><span class="params">(<span class="keyword">char</span> old,<span class="keyword">char</span> new)</span></span></span><br><span class="line"><span class="function">* String <span class="title">replace</span><span class="params">(String old,String new)</span></span></span><br></pre></td></tr></table></figure><p>  去处字符串两空格<br>     * String trim()</p><p>StringBuffer类</p><p>  构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* <span class="function"><span class="keyword">public</span> <span class="title">StringBuffer</span><span class="params">()</span>:无参构造方法</span></span><br><span class="line"><span class="function">* <span class="keyword">public</span> <span class="title">StringBuffer</span><span class="params">(<span class="keyword">int</span> capacity)</span>:指定容量的字符串缓冲区对象</span></span><br><span class="line"><span class="function">* <span class="keyword">public</span> <span class="title">StringBuffer</span><span class="params">(String str)</span>:指定字符串内容的字符串缓冲区对象</span></span><br><span class="line"><span class="function">* <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span>:返回长度（字符数）。 实际值</span></span><br></pre></td></tr></table></figure><p>  添加功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* <span class="function"><span class="keyword">public</span> StringBuffer <span class="title">append</span><span class="params">(String str)</span>:</span></span><br><span class="line"><span class="function">   * 可以把任意类型数据添加到字符串缓冲区里面,并返回字符串缓冲区本身</span></span><br><span class="line"><span class="function">* <span class="keyword">public</span> StringBuffer <span class="title">insert</span><span class="params">(<span class="keyword">int</span> offset,String str)</span>:</span></span><br><span class="line"><span class="function">   * 在指定位置把任意类型的数据插入到字符串缓冲区里面,并返回字符串缓冲区本身</span></span><br></pre></td></tr></table></figure><p>  删除功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* <span class="function"><span class="keyword">public</span> StringBuffer <span class="title">deleteCharAt</span><span class="params">(<span class="keyword">int</span> index)</span>:</span></span><br><span class="line"><span class="function">  * 删除指定位置的字符，并返回本身</span></span><br><span class="line"><span class="function">* <span class="keyword">public</span> StringBuffer <span class="title">delete</span><span class="params">(<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span>:</span></span><br><span class="line"><span class="function">  * 删除从指定位置开始指定位置结束的内容，并返回本身</span></span><br></pre></td></tr></table></figure><p>  替换功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* <span class="function"><span class="keyword">public</span> StringBuffer <span class="title">replace</span><span class="params">(<span class="keyword">int</span> start,<span class="keyword">int</span> end,String str)</span>:</span></span><br><span class="line"><span class="function"> * 从start开始到end用str替换</span></span><br></pre></td></tr></table></figure><p>  反转功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* <span class="function"><span class="keyword">public</span> StringBuffer <span class="title">reverse</span><span class="params">()</span>:</span></span><br><span class="line"><span class="function"> * 字符串反转</span></span><br></pre></td></tr></table></figure><p>  截取功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* <span class="function"><span class="keyword">public</span> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> start)</span>:</span></span><br><span class="line"><span class="function"> * 从指定位置截取到末尾</span></span><br><span class="line"><span class="function">* <span class="keyword">public</span> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span>:</span></span><br><span class="line"><span class="function"> * 截取从指定位置开始到结束位置，包括开始位置，不包括结束位置</span></span><br></pre></td></tr></table></figure><p>Arrays类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toString</span><span class="params">(<span class="keyword">int</span>[] a)</span></span></span><br><span class="line"><span class="function">* <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a)</span></span></span><br><span class="line"><span class="function">* <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> key)</span></span></span><br></pre></td></tr></table></figure><p>Integer类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* <span class="function"><span class="keyword">public</span> <span class="title">Integer</span><span class="params">(<span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function">* <span class="keyword">public</span> <span class="title">Integer</span><span class="params">(String s)</span></span></span><br></pre></td></tr></table></figure><p>Math类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">* <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">abs</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"> Math.<span class="title">abs</span><span class="params">()</span>  取绝对值</span></span><br><span class="line"><span class="function">* <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">ceil</span><span class="params">(<span class="keyword">double</span> a)</span></span></span><br><span class="line"><span class="function"> Math.<span class="title">ceil</span><span class="params">()</span> 向上取整，结果是一个<span class="keyword">double</span>值</span></span><br><span class="line"><span class="function">* <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">floor</span><span class="params">(<span class="keyword">double</span> a)</span></span></span><br><span class="line"><span class="function"> Math.<span class="title">floor</span><span class="params">()</span> 向下取整，结果是一个<span class="keyword">double</span>值</span></span><br><span class="line"><span class="function">* <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> min自学</span></span><br><span class="line"><span class="function"> Math.<span class="title">max</span><span class="params">(a,b)</span> 获取两个值当中的最大值</span></span><br><span class="line"><span class="function">* <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">pow</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">double</span> b)</span></span></span><br><span class="line"><span class="function"> Math.<span class="title">pow</span><span class="params">(a,b)</span> 求a得b次方</span></span><br><span class="line"><span class="function">* <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">random</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> Math.<span class="title">random</span><span class="params">()</span> 生成0.0到1.0之间的所有小数，包括0.0，不包括1.0</span></span><br><span class="line"><span class="function">* <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">round</span><span class="params">(<span class="keyword">float</span> a)</span> 参数为<span class="keyword">double</span>的自学</span></span><br><span class="line"><span class="function"> Math.<span class="title">round</span><span class="params">()</span> 四舍五入</span></span><br><span class="line"><span class="function">* <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">sqrt</span><span class="params">(<span class="keyword">double</span> a)</span></span></span><br><span class="line"><span class="function"> Math.<span class="title">sqrt</span><span class="params">()</span> 开平方</span></span><br></pre></td></tr></table></figure><p>Random类 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">构造方法</span><br><span class="line">      * <span class="function"><span class="keyword">public</span> <span class="title">Random</span><span class="params">()</span></span></span><br><span class="line"><span class="function">      * <span class="keyword">public</span> <span class="title">Random</span><span class="params">(<span class="keyword">long</span> seed)</span></span></span><br><span class="line"><span class="function">  成员方法</span></span><br><span class="line"><span class="function">      * <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nextInt</span><span class="params">()</span></span></span><br><span class="line"><span class="function">      * <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nextInt</span><span class="params">(<span class="keyword">int</span> n)</span><span class="params">(重点掌握)</span></span></span><br><span class="line"><span class="function">          Random r </span>= <span class="keyword">new</span> Random();</span><br><span class="line">          <span class="keyword">int</span> i = r.nextInt(<span class="number">100</span>);</span><br><span class="line">          System.out.println(i);     返回<span class="number">0</span>到<span class="number">99</span>的<span class="keyword">int</span>值</span><br></pre></td></tr></table></figure><p>System类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">成员方法</span><br><span class="line">      * <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">gc</span><span class="params">()</span></span></span><br><span class="line"><span class="function">          System.<span class="title">gc</span><span class="params">()</span> 运行垃圾回收器，相当于呼叫保洁阿姨</span></span><br><span class="line"><span class="function">      * <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exit</span><span class="params">(<span class="keyword">int</span> status)</span></span></span><br><span class="line"><span class="function">          System.<span class="title">exit</span><span class="params">(<span class="number">0</span>)</span> 退出jvm,0是正常终止，非0是异常终止</span></span><br><span class="line"><span class="function">      * <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">currentTimeMillis</span><span class="params">()</span></span></span><br><span class="line"><span class="function">          System.<span class="title">currentTimeMillis</span><span class="params">()</span> 返回当前时间与协调世界时1970年1月1日午夜之间的时间差（以毫秒为单位测量）</span></span><br><span class="line"><span class="function">      * pubiic <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">arraycopy</span><span class="params">(Object src, <span class="keyword">int</span> srcPos, Object dest, <span class="keyword">int</span> destPos, <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function">          <span class="keyword">int</span>[] src </span>= &#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>&#125;;</span><br><span class="line">          <span class="keyword">int</span>[] dest = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">8</span>];</span><br><span class="line">          System.arraycopy(src,<span class="number">0</span>,dest,<span class="number">0</span>,src.length);</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dest.length; i++) &#123;</span><br><span class="line">              System.out.println(dest[i]);</span><br><span class="line">       &#125;</span><br><span class="line">       输出的结果为：<span class="number">11</span> <span class="number">22</span> <span class="number">33</span> <span class="number">44</span> <span class="number">55</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>BigInteger类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">构造方法</span><br><span class="line">      * <span class="function"><span class="keyword">public</span> <span class="title">BigInteger</span><span class="params">(String val)</span></span></span><br><span class="line"><span class="function">         String s </span>= <span class="string">"123456789987654321"</span>;</span><br><span class="line">         BigInteger bt = <span class="keyword">new</span> BigInteger(s);</span><br><span class="line">         System.out.println(bt);</span><br><span class="line">       输出的结果为：<span class="number">123456789987654321</span></span><br><span class="line"></span><br><span class="line">成员方法</span><br><span class="line">      * <span class="function"><span class="keyword">public</span> BigInteger <span class="title">add</span><span class="params">(BigInteger val)</span></span></span><br><span class="line"><span class="function">          a.<span class="title">add</span><span class="params">(b)</span> a+b</span></span><br><span class="line"><span class="function">      * <span class="keyword">public</span> BigInteger <span class="title">subtract</span><span class="params">(BigInteger val)</span></span></span><br><span class="line"><span class="function">          a.<span class="title">subtract</span><span class="params">(b)</span> a-b</span></span><br><span class="line"><span class="function">      * <span class="keyword">public</span> BigInteger <span class="title">multiply</span><span class="params">(BigInteger val)</span></span></span><br><span class="line"><span class="function">          a.<span class="title">mulitiply</span><span class="params">(b)</span> a*b</span></span><br><span class="line"><span class="function">      * <span class="keyword">public</span> BigInteger <span class="title">divide</span><span class="params">(BigInteger val)</span></span></span><br><span class="line"><span class="function">          a.<span class="title">divide</span><span class="params">(b)</span> a/b</span></span><br><span class="line"><span class="function">      * <span class="keyword">public</span> BigInteger[] <span class="title">divideAndRemainder</span><span class="params">(BigInteger val)</span></span></span><br><span class="line"><span class="function">          a.<span class="title">divideAndReminder</span><span class="params">(b)</span> a/b的值和a/b的余数</span></span><br></pre></td></tr></table></figure><pre><code>* public BigInteger add(BigInteger val)    a.add(b) a+b       * public BigInteger subtract(BigInteger val)    a.subtract(b) a-b              * public BigInteger multiply(BigInteger val)    a.mulitiply(b) a*b                     * public BigInteger divide(BigInteger val)    a.divide(b) a/b                            * public BigInteger[] divideAndRemainder(BigInteger val)    a.divideAndReminder(b) a/b的值和a/b的余数</code></pre><p>BigDecimal类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">构造方法</span><br><span class="line">       * <span class="function"><span class="keyword">public</span> <span class="title">BigDecimal</span><span class="params">(String val)</span></span></span><br><span class="line"><span class="function"> 成员方法</span></span><br><span class="line"><span class="function">       * <span class="keyword">public</span> BigDecimal <span class="title">add</span><span class="params">(BigDecimal augend)</span></span></span><br><span class="line"><span class="function">       * <span class="keyword">public</span> BigDecimal <span class="title">subtract</span><span class="params">(BigDecimal subtrahend)</span></span></span><br><span class="line"><span class="function">       * <span class="keyword">public</span> BigDecimal <span class="title">multiply</span><span class="params">(BigDecimal multiplicand)</span></span></span><br><span class="line"><span class="function">       * <span class="keyword">public</span> BigDecimal <span class="title">divide</span><span class="params">(BigDecimal divisor)</span></span></span><br><span class="line"><span class="function">           BigDecimal bd1 </span>= <span class="keyword">new</span> BigDecimal(<span class="string">"2.0"</span>);</span><br><span class="line">           BigDecimal bd2 = <span class="keyword">new</span> BigDecimal(<span class="string">"1.1"</span>);</span><br><span class="line">           System.out.println(bd1.subtract(bd2));</span><br><span class="line">           输出的结果为：<span class="number">0.9</span></span><br></pre></td></tr></table></figure><p>Date类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">构造方法</span><br><span class="line">       * <span class="function"><span class="keyword">public</span> <span class="title">Date</span><span class="params">()</span></span></span><br><span class="line"><span class="function">       * <span class="keyword">public</span> <span class="title">Date</span><span class="params">(<span class="keyword">long</span> date)</span></span></span><br><span class="line"><span class="function">  成员方法</span></span><br><span class="line"><span class="function">       * <span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getTime</span><span class="params">()</span></span></span><br><span class="line"><span class="function">           获取毫秒值，和System,<span class="title">currentTimeMillis</span><span class="params">()</span>相似</span></span><br><span class="line"><span class="function">       * <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTime</span><span class="params">(<span class="keyword">long</span> time)</span></span></span><br><span class="line"><span class="function">           设置毫秒值</span></span><br><span class="line"><span class="function">           Date d </span>= <span class="keyword">new</span> Date();</span><br><span class="line">           d.setTime(<span class="number">1000</span>);</span><br><span class="line">           System.out.println(d);</span><br><span class="line">           输出的结果为：Thu Jan <span class="number">01</span> <span class="number">08</span>:<span class="number">00</span>:<span class="number">01</span> CST <span class="number">1970</span></span><br></pre></td></tr></table></figure><p>SimpleDateFormat类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">构造方法</span><br><span class="line">       * <span class="function"><span class="keyword">public</span> <span class="title">SimpleDateFormat</span><span class="params">()</span></span></span><br><span class="line"><span class="function">       * <span class="keyword">public</span> <span class="title">SimpleDateFormat</span><span class="params">(String pattern)</span></span></span><br><span class="line"><span class="function">  成员方法</span></span><br><span class="line"><span class="function">       * <span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">format</span><span class="params">(Date date)</span></span></span><br><span class="line"><span class="function">           <span class="title">format</span><span class="params">()</span>是将日期对象转换为字符串的形式输出</span></span><br><span class="line"><span class="function">           Date d </span>= <span class="keyword">new</span> Date();</span><br><span class="line">           SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日 HH:mm:ss"</span>);</span><br><span class="line">           System.out.println(sdf.format(d));</span><br><span class="line">           输出的结果：<span class="number">2017</span>年<span class="number">08</span>月<span class="number">07</span>日 <span class="number">09</span>:<span class="number">45</span>:<span class="number">02</span></span><br><span class="line">       * <span class="function"><span class="keyword">public</span> Date <span class="title">parse</span><span class="params">(String source)</span></span></span><br><span class="line"><span class="function">           <span class="title">parse</span><span class="params">()</span>是将时间字符串换成日期对象</span></span><br><span class="line"><span class="function">           String s </span>= <span class="string">"2000年08月08日 08:08:08"</span>;</span><br><span class="line">           SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yy年MM月dd日 HH:mm:ss"</span>);</span><br><span class="line">           Date d = sdf.parse(s);</span><br><span class="line">           System.out.println(d);</span><br><span class="line">           输出的结果为：Tue Aug <span class="number">08</span> <span class="number">08</span>:<span class="number">08</span>:<span class="number">08</span> CST <span class="number">2000</span></span><br></pre></td></tr></table></figure><p>Calendar类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">成员方法</span><br><span class="line">      * <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Calendar <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">      * <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> field)</span></span></span><br><span class="line"><span class="function">          Calendar c </span>= Calendar.getInstance();     <span class="comment">//父类引用子类对象</span></span><br><span class="line">          System.out.println(c.get(Calendar.YEAR));</span><br><span class="line">          System.out.println(c.get(Calendar.MONTH));</span><br><span class="line">          输出的结果：<span class="number">2017</span></span><br><span class="line">                  <span class="number">7</span>                            <span class="comment">//这里的7不是7月，是8月</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> * <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> field,<span class="keyword">int</span> amount)</span></span></span><br><span class="line"><span class="function">    Calendar c </span>= Calendar.getInstance();  <span class="comment">//父类引用子类对象</span></span><br><span class="line">    c.add(Calendar.YEAR, <span class="number">1</span>);</span><br><span class="line">    System.out.println(c.get(Calendar.YEAR));</span><br><span class="line">    输出的结果：<span class="number">2018</span></span><br><span class="line">* <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> year,<span class="keyword">int</span> month,<span class="keyword">int</span> date)</span></span></span><br><span class="line"><span class="function">    Calendar c </span>= Calendar.getInstance();  <span class="comment">//父类引用子类对象</span></span><br><span class="line">    c.set(Calendar.YEAR, <span class="number">2000</span>);</span><br><span class="line">    System.out.println(c.get(Calendar.YEAR));</span><br><span class="line">    输出的结果为：<span class="number">2000</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Scanner类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;hasNextXxx() 判断是否还有下一个输入项，其中Xxx可以是Int,Double等。如果需要判断是否包含下一个字符串，则可以省略Xxx&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;nextXxx() 获取下一个输入项。Xxx的含义和上个方法中的Xxx相同，默认情况下，Scanner使用空格，回车等作为分隔符&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>hello world</title>
    <link href="http://dumengblog.club/2019/09/15/helloworld/"/>
    <id>http://dumengblog.club/2019/09/15/helloworld/</id>
    <published>2019-09-15T05:53:02.000Z</published>
    <updated>2019-09-15T06:09:15.860Z</updated>
    
    <content type="html"><![CDATA[<p>第一个肯定就是Hello world了，因为世界上第一个程序就是hello world这是一个程序员良好的开始，也是一个传统。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day1;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWord</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">System.out.print(<span class="string">"你好，hello，word"</span>);<span class="comment">//输出消息到控制台（单行注释）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;第一个肯定就是Hello world了，因为世界上第一个程序就是hello world这是一个程序员良好的开始，也是一个传统。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;sp
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>第一次搭建博客</title>
    <link href="http://dumengblog.club/2019/09/15/%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://dumengblog.club/2019/09/15/第一次搭建博客/</id>
    <published>2019-09-15T05:32:17.000Z</published>
    <updated>2019-10-01T14:55:00.509Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搭建博客的第一天"><a href="#搭建博客的第一天" class="headerlink" title="搭建博客的第一天"></a>搭建博客的第一天</h1><p>​       如今的我已经大三了，我应该努力去学好自己的专业课，在大二我就决定将java作为以后主攻的语言，接下来的日子我将复习大二所学习的知识，然后进一步学会javaEE</p><p>博客利用了hexo+github page搭建，<a href="https://blog.csdn.net/grave2015/article/details/79961843" target="_blank" rel="noopener">教程链接</a>，书写博客需要Markdown语法，当然利用Typora事半功倍。<a href="https://blog.csdn.net/wsmrzx/article/details/81478945" target="_blank" rel="noopener">教程链接</a>，美化就百度就可以了，这两个博客个人觉得写的详细到位。</p><p>​        </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;搭建博客的第一天&quot;&gt;&lt;a href=&quot;#搭建博客的第一天&quot; class=&quot;headerlink&quot; title=&quot;搭建博客的第一天&quot;&gt;&lt;/a&gt;搭建博客的第一天&lt;/h1&gt;&lt;p&gt;​       如今的我已经大三了，我应该努力去学好自己的专业课，在大二我就决定将java作
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://dumengblog.club/2019/09/09/hello-world/"/>
    <id>http://dumengblog.club/2019/09/09/hello-world/</id>
    <published>2019-09-09T12:50:23.354Z</published>
    <updated>2019-09-09T12:50:23.355Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
