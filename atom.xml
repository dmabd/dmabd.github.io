<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dumeng&#39;s Blog</title>
  
  <subtitle>writedown everything</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://dumengblog.club/"/>
  <updated>2019-10-20T11:38:52.332Z</updated>
  <id>http://dumengblog.club/</id>
  
  <author>
    <name>dumeng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>创建空类时，哪些成员函数是系统默认的</title>
    <link href="http://dumengblog.club/2019/10/20/%E5%88%9B%E5%BB%BA%E7%A9%BA%E7%B1%BB%E6%97%B6%EF%BC%8C%E5%93%AA%E4%BA%9B%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0%E6%98%AF%E7%B3%BB%E7%BB%9F%E9%BB%98%E8%AE%A4%E7%9A%84/"/>
    <id>http://dumengblog.club/2019/10/20/创建空类时，哪些成员函数是系统默认的/</id>
    <published>2019-10-20T11:36:54.000Z</published>
    <updated>2019-10-20T11:38:52.332Z</updated>
    
    <content type="html"><![CDATA[<p>默认产生4个类成员函数：<br>构造函数<br>析构函数<br>拷贝构造函数<br>赋值函数</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;默认产生4个类成员函数：&lt;br&gt;构造函数&lt;br&gt;析构函数&lt;br&gt;拷贝构造函数&lt;br&gt;赋值函数&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="java面试考察知识点" scheme="http://dumengblog.club/tags/java%E9%9D%A2%E8%AF%95%E8%80%83%E5%AF%9F%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>java值传递和引用传递</title>
    <link href="http://dumengblog.club/2019/10/20/java%E5%80%BC%E4%BC%A0%E9%80%92%E5%92%8C%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92/"/>
    <id>http://dumengblog.club/2019/10/20/java值传递和引用传递/</id>
    <published>2019-10-20T04:35:03.000Z</published>
    <updated>2019-10-20T11:30:29.836Z</updated>
    
    <content type="html"><![CDATA[<p>方法调用是编程语言中非常重要的一个特性，在方法调用时，通常需要传递一些参数来实现功能。Java中有两种参数的传递方式：<a id="more"></a></p><p>1.值传递</p><p>2.引用传递</p><p>（1）值传递</p><p>在方法调用中，实参会把他的值传递给形参，形参只是用实参的值初始化一个临时的存储单元，因此实参虽然有相同的值，但是却有不同的存储单元，因此对形参的改变不会影响实参的值</p><p>（2）引用传递</p><p>在方法调用中，传递的是对象，这时形参和实参的对象指向同一块存储单元，因此对形参的修改就会影响实参的值</p><p>所谓的按值调用表示方法接收的是调用着提供的值，而按引用调用则表示方法接收的是调用者提供的变量地址(如果是C语言的话来说就是指针啦，当然java并没有指针的概念)。这里我们需要注意的是一个方法可以修改传递引用所对应的变量值，而不能修改传递值调用所对应的变量值，这句话相当重要，这是按值调用与引用调用的根本区别，当然如果还不理解，没关系，下面就要图文并茂的彻底分析啦。</p><p>前面我们说过java中并不存在引用调用，这点是没错的，因为java程序设计语言确实是采用了按值调用，即call by value。也就是说方法得到的是所有参数值的一个拷贝，方法并不能修改传递给它的任何参数变量的内容。下面我们来看一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallByValue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> x=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">updateValue</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">  value = <span class="number">3</span> * value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  System.out.println(<span class="string">"调用前x的值："</span>+x);</span><br><span class="line">  updateValue(x);</span><br><span class="line">  System.out.println(<span class="string">"调用后x的值："</span>+x);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行程序，结果如下：</p><p>调用前x的值：10</p><p>调用后x的值：10</p><p>可以看到x的值并没有变化，接下来我们一起来看一下具体的执行过程：</p><img src="/../asset/20160419170342841.png" style="zoom:50%;"><p>分析：</p><p>1）value被初始化为x值的一个拷贝（也就是10）</p><p>2）value被乘以3后等于30，但注意此时x的值仍为10！</p><p>3）这个方法结束后，参数变量value不再使用，被回收。</p><p>结论：当传递方法参数类型为基本数据类型（数字以及布尔值）时，一个方法是不可能修改一个基本数据类型的参数。</p><p>当然java中除了基本数据类型还有引用数据类型，也就是对象引用，那么对于这种数据类型又是怎么样的情况呢？我们还是一样先来看一个例子：</p><p>声明一个User对象类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name=name;</span><br><span class="line"><span class="keyword">this</span>.age=age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行类如下：</p><p>执行类如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallByValue</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> User user=<span class="keyword">null</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(User student)</span></span>&#123;</span><br><span class="line">student.setName(<span class="string">"Lishen"</span>);</span><br><span class="line">student.setAge(<span class="number">18</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">user = <span class="keyword">new</span> User(<span class="string">"zhangsan"</span>,<span class="number">26</span>);</span><br><span class="line">System.out.println(<span class="string">"调用前user的值："</span>+user.toString());</span><br><span class="line">updateUser(user);</span><br><span class="line">System.out.println(<span class="string">"调用后user的值："</span>+user.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p>运行结果如下：</p><p>调用前user的值：User [name=zhangsan, age=26]</p><p>调用后user的值：User [name=Lishen, age=18]</p><p>很显然，User的值被改变了，也就是说方法参数类型如果是引用类型的话，引用类型对应的值将会被修改，下面我们来分析一下这个过程：</p><p><img src="/../asset/20160419170656251-1571570649328.png" alt="img"></p><p>过程分析：</p><p>1）student变量被初始化为user值的拷贝，这里是一个对象的引用。</p><p>2）调用student变量的set方法作用在这个引用对象上，user和student同时引用的User对象内部值被修改。</p><p>3）方法结束后，student变量不再使用，被释放，而user还是没有变，依然指向User对象。</p><p>结论：当传递方法参数类型为引用数据类型时，一个方法将修改一个引用数据类型的参数所指向对象的值。</p><p>虽然到这里两个数据类型的传递都分析完了，也明白的基本数据类型的传递和引用数据类型的传递区别，前者将不会修改原数据的值，而后者将会修改引用所指向对象的值。可通过上面的实例我们可能就会觉得java同时拥有按值调用和按引用调用啊，可惜的是这样的理解是有误导性的，虽然上面引用传递表面上体现了按引用调用现象，但是java中确实只有按值调用而没有按引用调用。到这里估计不少人都蒙逼了，下面我们通过一个反例来说明（回忆一下开头我们所说明的按值调用与按引用调用的根本区别）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallByValue</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> User user=<span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> User stu=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">- 交换两个对象</span></span><br><span class="line"><span class="comment">- <span class="doctag">@param</span> x</span></span><br><span class="line"><span class="comment">- <span class="doctag">@param</span> y</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(User x,User y)</span></span>&#123;</span><br><span class="line">  User temp =x;</span><br><span class="line">  x=y;</span><br><span class="line">  y=temp;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">user = <span class="keyword">new</span> User(<span class="string">"user"</span>,<span class="number">26</span>);</span><br><span class="line">stu = <span class="keyword">new</span> User(<span class="string">"stu"</span>,<span class="number">18</span>);</span><br><span class="line">System.out.println(<span class="string">"调用前user的值："</span>+user.toString());</span><br><span class="line">System.out.println(<span class="string">"调用前stu的值："</span>+stu.toString());</span><br><span class="line">swap(user,stu);</span><br><span class="line">System.out.println(<span class="string">"调用后user的值："</span>+user.toString());</span><br><span class="line">System.out.println(<span class="string">"调用后stu的值："</span>+stu.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们通过一个swap函数来交换两个变量user和stu的值，在前面我们说过，如果是按引用调用那么一个方法可以修改传递引用所对应的变量值，也就是说如果java是按引用调用的话，那么swap方法将能够实现数据的交换，而实际运行结果是：</p><p>我们通过一个swap函数来交换两个变量user和stu的值，在前面我们说过，如果是按引用调用那么一个方法可以修改传递引用所对应的变量值，也就是说如果java是按引用调用的话，那么swap方法将能够实现数据的交换，而实际运行结果是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">调用前user的值：User [name=user, age=26]</span><br><span class="line"></span><br><span class="line">调用前stu的值：User [name=stu, age=18]</span><br><span class="line"></span><br><span class="line">调用后user的值：User [name=user, age=26]</span><br><span class="line"></span><br><span class="line">调用后stu的值：User [name=stu, age=18]</span><br></pre></td></tr></table></figure><p>我们发现user和stu的值并没有发生变化，也就是方法并没有改变存储在变量user和stu中的对象引用。swap方法的参数x和y被初始化为两个对象引用的拷贝，这个方法交换的是这两个拷贝的值而已，最终，所做的事都是白费力气罢了。在方法结束后x，y将被丢弃，而原来的变量user和stu仍然引用这个方法调用之前所引用的对象。</p><p><img src="/../asset/20160419170901739.png" alt="img"></p><p>这个过程也充分说明了java程序设计语言对对象采用的不是引用调用，实际上是对象引用进行的是值传递，当然在这里我们可以简单理解为这就是按值调用和引用调用的区别，而且必须明白即使java函数在传递引用数据类型时，也只是拷贝了引用的值罢了，之所以能修改引用数据是因为它们同时指向了一个对象，但这仍然是按值调用而不是引用调用。</p><p>总结：</p><p>一个方法不能修改一个基本数据类型的参数（数值型和布尔型）。</p><p>一个方法可以修改一个引用所指向的对象状态，但这仍然是按值调用而非引用调用。</p><p>上面两种传递都进行了值拷贝的过程。<br><em>本文借鉴</em>：<a href="https://blog.csdn.net/javazejian/article/details/51192130" target="_blank" rel="noopener">https://blog.csdn.net/javazejian/article/details/51192130</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;方法调用是编程语言中非常重要的一个特性，在方法调用时，通常需要传递一些参数来实现功能。Java中有两种参数的传递方式：&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="java面试考查知识点" scheme="http://dumengblog.club/tags/java%E9%9D%A2%E8%AF%95%E8%80%83%E6%9F%A5%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>java多态的实现机制</title>
    <link href="http://dumengblog.club/2019/10/20/java%E5%A4%9A%E6%80%81%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6/"/>
    <id>http://dumengblog.club/2019/10/20/java多态的实现机制/</id>
    <published>2019-10-20T04:26:41.000Z</published>
    <updated>2019-10-20T04:32:21.386Z</updated>
    
    <content type="html"><![CDATA[<p>　   Java提供了编译时多态和运行时多态两种多态机制。前者是通过方法重载实现的，后者是通过方法的覆盖实现的。</p><p>　　在方法覆盖中，子类可以覆盖父类的方法，因此同类的方法会在父类与子类中有着不同的表现形式。</p><a id="more"></a><p>　　在Java语言中，基类的引用变量不仅可以指向基类的实例对象，也可以指向其子类中的实例对象。同样，接口中的引用变量也可以指向其实现类的实例对象。而程序调用的方法在运行时期才动态绑定（绑定是指将一个方法调用和一个方法主体联系在一起），绑定的是引用变量所指向的具体实例对象的方法，也就是内存中正在运行的那个对象的方法，而不是引用变量的类型中定义的方法。通过这种动态绑定实现了多态。由于只有在运行时才能确定调用哪个方法，因此通过方法覆盖实现的多态也可以被称为运行时多态。</p><p>　　</p><p>　　示例一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line"> <span class="number">2</span>     <span class="function"><span class="keyword">public</span> <span class="title">Base</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="number">3</span>         g();</span><br><span class="line"> <span class="number">4</span>     &#125;</span><br><span class="line"> <span class="number">5</span> </span><br><span class="line"> <span class="number">6</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="number">7</span>         System.out.println(<span class="string">"Base g()"</span>);</span><br><span class="line"> <span class="number">8</span>     &#125;</span><br><span class="line"> <span class="number">9</span>     </span><br><span class="line"><span class="number">10</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="number">11</span>         System.out.println(<span class="string">"Base f()"</span>);</span><br><span class="line"><span class="number">12</span>     &#125;</span><br><span class="line"><span class="number">13</span> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Derived</span> <span class="keyword">extends</span> <span class="title">Base</span></span>&#123;</span><br><span class="line"> <span class="number">2</span>     </span><br><span class="line"> <span class="number">3</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="number">4</span>         System.out.println(<span class="string">"Derived g()"</span>);</span><br><span class="line"> <span class="number">5</span>     &#125;</span><br><span class="line"> <span class="number">6</span>     </span><br><span class="line"> <span class="number">7</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="number">8</span>         System.out.println(<span class="string">"Derived f()"</span>);</span><br><span class="line"> <span class="number">9</span>     &#125;</span><br><span class="line"><span class="number">10</span>     </span><br><span class="line"><span class="number">11</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="number">12</span>         Base base=<span class="keyword">new</span> Derived();</span><br><span class="line"><span class="number">13</span>         base.f();</span><br><span class="line"><span class="number">14</span>         base.g();</span><br><span class="line"><span class="number">15</span>     &#125;</span><br><span class="line"><span class="number">16</span> &#125;</span><br></pre></td></tr></table></figure><p>　　程序运行结果：</p><p>　　　　　　　　　　<img src="https://images2017.cnblogs.com/blog/1216873/201709/1216873-20170910171938538-686565903.png" alt="img"></p><p>　　在上面的例子中，由于子类Derived的f()方法和g()方法与父类Base方法同名，因此Derived的方法会覆盖Base的方法。在执行  Base base=new Derived();  语句时，会调用Base类的构造函数，而在Base的构造函数中，执行了g()方法，由于Java语言的多态性，此时会调用子类Derived的g()方法，而不是父类Base 的g()方法，因此会输出”Derived g()”.由于实际创建的是Derived对象，后面的方法调用都会调用子类Derived的方法。</p><p>　　但要注意，若此时父类中没有f()方法和g()方法，会编译报错。</p><p>　　示例二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">package</span> Test;</span><br><span class="line"> <span class="number">2</span> </span><br><span class="line"> <span class="number">3</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line"> <span class="number">4</span>     <span class="keyword">private</span> String baseName=<span class="string">"base"</span>;</span><br><span class="line"> <span class="number">5</span>     <span class="function"><span class="keyword">public</span> <span class="title">Base</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="number">6</span>         callName();</span><br><span class="line"> <span class="number">7</span>     &#125;</span><br><span class="line"> <span class="number">8</span>     </span><br><span class="line"> <span class="number">9</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callName</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="number">10</span>         System.out.println(baseName);</span><br><span class="line"><span class="number">11</span>     &#125;</span><br><span class="line"><span class="number">12</span>     </span><br><span class="line"><span class="number">13</span>     <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Base</span></span>&#123;</span><br><span class="line"><span class="number">14</span>         <span class="keyword">private</span> String baseName=<span class="string">"sub"</span>;</span><br><span class="line"><span class="number">15</span>         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callName</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="number">16</span>             System.out.println(baseName);</span><br><span class="line"><span class="number">17</span>         &#125;</span><br><span class="line"><span class="number">18</span>     &#125;</span><br><span class="line"><span class="number">19</span>     </span><br><span class="line"><span class="number">20</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="number">21</span>         Base base=<span class="keyword">new</span> Sub();</span><br><span class="line"><span class="number">22</span>     &#125;</span><br><span class="line"><span class="number">23</span> &#125;</span><br></pre></td></tr></table></figure><p>　　程序运行结果：</p><p>　　　　　　　　<img src="https://images2017.cnblogs.com/blog/1216873/201709/1216873-20170914125536844-1147006267.png" alt="img"></p><p>　　在上面的例子中，new Sub();在创造派生类的过程中首先创建基类对象，然后才能创建派生类。创建基类即默认调用Base()方法，在方法中调用callName()方法，由于派生类中存在此方法，则被调用的callName（）方法是派生类中的方法，此时派生类中普通成员变量（private String baseName=”sub”;）还未构造，所以变量baseName的值为null。</p><p>　　此外，只有类的方法才有多态的概念，类的成员变量没有多态的概念。示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line"><span class="number">2</span>     <span class="keyword">public</span> <span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line"><span class="number">3</span> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Derived</span> <span class="keyword">extends</span> <span class="title">Base</span></span>&#123;</span><br><span class="line"><span class="number">2</span>     </span><br><span class="line"><span class="number">3</span>     <span class="keyword">private</span> <span class="keyword">int</span> i=<span class="number">2</span>;</span><br><span class="line"><span class="number">4</span>     </span><br><span class="line"><span class="number">5</span>     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="number">6</span>         Base base=<span class="keyword">new</span> Derived();</span><br><span class="line"><span class="number">7</span>         System.out.println(base.i);</span><br><span class="line"><span class="number">8</span>     &#125;</span><br><span class="line"><span class="number">9</span> &#125;</span><br></pre></td></tr></table></figure><p>　　程序运行结果：</p><p>　　　　　　　　　<img src="https://images2017.cnblogs.com/blog/1216873/201709/1216873-20170910173413976-1479161606.png" alt="img"></p><p>　　由此可见，成员变量是无法实现多态的，类的成员变量的值取父类还是子类并不取决于创建对象的类型，而是取决于所定义变量的类型，这是在编译期间确定</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　   Java提供了编译时多态和运行时多态两种多态机制。前者是通过方法重载实现的，后者是通过方法的覆盖实现的。&lt;/p&gt;
&lt;p&gt;　　在方法覆盖中，子类可以覆盖父类的方法，因此同类的方法会在父类与子类中有着不同的表现形式。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="java面试考查知识点" scheme="http://dumengblog.club/tags/java%E9%9D%A2%E8%AF%95%E8%80%83%E6%9F%A5%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>java接口和抽象类的区别</title>
    <link href="http://dumengblog.club/2019/10/20/java%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://dumengblog.club/2019/10/20/java接口和抽象类的区别/</id>
    <published>2019-10-20T04:19:45.000Z</published>
    <updated>2019-10-20T04:24:36.189Z</updated>
    
    <content type="html"><![CDATA[<p>java接口和抽象类的区别：</p><a id="more"></a><table><thead><tr><th><strong>参数</strong></th><th><strong>抽象类</strong></th><th><strong>接口</strong></th></tr></thead><tbody><tr><td>默认的方法实现</td><td>它可以有默认的方法实现</td><td>接口完全是抽象的。它根本不存在方法的实现</td></tr><tr><td>实现</td><td>子类使用<strong>extends</strong>关键字来继承抽象类。如果子类不是抽象类的话，它需要提供抽象类中所有声明的方法的实现。</td><td>子类使用关键字<strong>implements</strong>来实现接口。它需要提供接口中所有声明的方法的实现</td></tr><tr><td>构造器</td><td>抽象类可以有构造器</td><td>接口不能有构造器</td></tr><tr><td>与正常Java类的区别</td><td>除了你不能实例化抽象类之外，它和普通Java类没有任何区别</td><td>接口是完全不同的类型</td></tr><tr><td>访问修饰符</td><td>抽象方法可以有<strong>public</strong>、<strong>protected</strong>和<strong>default</strong>这些修饰符</td><td>接口方法默认修饰符是<strong>public</strong>。你不可以使用其它修饰符。</td></tr><tr><td>main方法</td><td>抽象方法可以有main方法并且我们可以运行它</td><td>接口没有main方法，因此我们不能运行它。</td></tr><tr><td>多继承</td><td>抽象方法可以继承一个类和实现多个接口</td><td>接口只可以继承一个或多个其它接口</td></tr><tr><td>速度</td><td>它比接口速度要快</td><td>接口是稍微有点慢的，因为它需要时间去寻找在类中实现的方法。</td></tr><tr><td>添加新方法</td><td>如果你往抽象类中添加新的方法，你可以给它提供默认的实现。因此你不需要改变你现在的代码。</td><td>如果你往接口中添加方法，那么你必须改变实现该接口的类。</td></tr></tbody></table><h3 id="什么时候使用抽象类和接口"><a href="#什么时候使用抽象类和接口" class="headerlink" title="什么时候使用抽象类和接口"></a>什么时候使用抽象类和接口</h3><ul><li>如果你拥有一些方法并且想让它们中的一些有默认实现，那么使用抽象类吧。</li><li>如果你想实现多重继承，那么你必须使用接口。由于<strong>Java不支持多继承</strong>，子类不能够继承多个类，但可以实现多个接口。因此你就可以使用接口来解决它。</li><li>如果基本功能在不断改变，那么就需要使用抽象类。如果不断改变基本功能并且使用接口，那么就需要改变所有实现了该接口的类。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;java接口和抽象类的区别：&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="java面试考查知识点" scheme="http://dumengblog.club/tags/java%E9%9D%A2%E8%AF%95%E8%80%83%E6%9F%A5%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>i++和++i的区别</title>
    <link href="http://dumengblog.club/2019/10/20/i-%E5%92%8C-i%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://dumengblog.club/2019/10/20/i-和-i的区别/</id>
    <published>2019-10-20T02:08:47.000Z</published>
    <updated>2019-10-20T04:16:08.449Z</updated>
    
    <content type="html"><![CDATA[<p>在编程时，经会使用到变量的自增和自减操作，尤其在循环中用的最多。以自增为例，有两种自增方式，前置和后置，即i++和++i，他们的不同点在于i++是程序执行完毕后进行自增，++i程序开始时自增，实例如下：</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> mianshi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">zizengtest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">System.out.println(i++ + i++);</span><br><span class="line">System.out.println(<span class="string">"i="</span>+i);</span><br><span class="line">System.out.println(i++ + ++i);</span><br><span class="line">System.out.println(<span class="string">"i="</span>+i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>3<br>i=3<br>8<br>i=5</p><p>很多人可能以为自己i++和++i概念了解的很明白，但是其实这东西没你想象的那么简单，比如以上的运行结果就会让你很迷惑，假如你质疑这个运行结果的话大可自己一试。</p><p>接下来我解释一下这几个操作：</p><p>i+++i++，这个首先是i++操作，此时注意i++的概念是程序执行完毕后进行自增，所以运算的值还是1，（你可以理解为i++就是一个指令让下一个i的为2，所以还是1）但是自增操作还是有的所以此时i为2，然后再加一个i++，还是程序执行完毕后进行自增所以运算的值为2，所以i+++i++就是1+2=3，在自增操作后i为3。</p><p>i++ + ++i，首先i++操作，此时运算值为3，但是自增操作还是有的所以此时i为4，接下来执行++i，++i直接执行所以值为5，i++ + ++i=8，i的值为5。</p><p>总结：你可以把i++当做一个指令让下一次i的值加1，而本身运算值不变</p><p>​            ++i，直接执行i+1。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在编程时，经会使用到变量的自增和自减操作，尤其在循环中用的最多。以自增为例，有两种自增方式，前置和后置，即i++和++i，他们的不同点在于i++是程序执行完毕后进行自增，++i程序开始时自增，实例如下：&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="java面试考察知识点" scheme="http://dumengblog.club/tags/java%E9%9D%A2%E8%AF%95%E8%80%83%E5%AF%9F%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>数据结构（1）链表</title>
    <link href="http://dumengblog.club/2019/10/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%881%EF%BC%89%E9%93%BE%E8%A1%A8/"/>
    <id>http://dumengblog.club/2019/10/13/数据结构（1）链表/</id>
    <published>2019-10-13T02:36:25.000Z</published>
    <updated>2019-10-20T04:16:29.712Z</updated>
    
    <content type="html"><![CDATA[<p>链表作为最基本的数据结构，在程序设计中有着非常重要的作用，其存储特点如下：可以用任意一组存储单元来存储单链表中的数据元素（存储单元可以是不连续的）,而且，除了存储每个数据元素ai的值以外，还必须存储指示其直接后继元素的信息。<a id="more"></a>这两部分信息组成的数据结构元素ai的存储映像称为结点。N个结点链在一起被称为链表，当结点只包含其后继结点的信息的链表就被称为单链表，在内存中存储的方式如下图：</p><p><img src="/../asset/1570937260779.png" alt="1570937260779"></p><h4 id="1-链表基础操作"><a href="#1-链表基础操作" class="headerlink" title="1.链表基础操作"></a>1.链表基础操作</h4><p>链表最重要的操作就是向链表中插入和删除元素。</p><p>单链表的插入操作是将值为x的新结点插入到单链表的第i个结点的位置上，即插入到数据元素ai-1与ai之间。</p><p>具体步骤如下：</p><ol><li>找到ai的引用 p</li><li>生成一个数据域为x的新结点s。</li><li>设置p.next=s。</li><li>设置s.next=a。</li></ol><p>示意图如下：</p><p><img src="/../asset/1570939794478.png" alt="1570939794478"></p><p>单链表的删除操作是将单链表的第i个结点删去。其具体步骤如下：</p><p>1.找到ai-1的存储位置p</p><p>2.令p.next指向ai的直接后续结点（即把i从链上摘下）ai+1</p><p>下面我将给出链表基础操作的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> mianshi;</span><br><span class="line"><span class="comment">//存储结点信息</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">Node next=<span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">int</span> data;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.data=data;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">linkedlist</span> </span>&#123;</span><br><span class="line">Node head=<span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//向链表中添加数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNode</span><span class="params">(<span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">Node newnode =<span class="keyword">new</span> Node(d);</span><br><span class="line"><span class="keyword">if</span>(head==<span class="keyword">null</span>)&#123; </span><br><span class="line">head =newnode;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Node tmp=head;</span><br><span class="line"><span class="keyword">while</span>(tmp.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">tmp=tmp.next;</span><br><span class="line">&#125;</span><br><span class="line">tmp.next=newnode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出链表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printlist</span><span class="params">()</span></span>&#123;</span><br><span class="line">Node tmp=head;</span><br><span class="line"><span class="keyword">while</span>(tmp!=<span class="keyword">null</span>)&#123;</span><br><span class="line">System.out.print(tmp.data+<span class="string">" "</span>);</span><br><span class="line">tmp=tmp.next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//链表的长度</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> length=<span class="number">0</span>;</span><br><span class="line">Node tmp=head;</span><br><span class="line"><span class="keyword">while</span>(tmp!=<span class="keyword">null</span>)&#123;</span><br><span class="line">length++;</span><br><span class="line">tmp=tmp.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除第index个结点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Boolean <span class="title">deleteNode</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(index&lt;<span class="number">1</span>||index&gt;length())&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(index==<span class="number">1</span>)&#123;</span><br><span class="line">head=head.next;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">2</span>;</span><br><span class="line">Node prenode=head;</span><br><span class="line">Node curnode=prenode.next;</span><br><span class="line"><span class="keyword">while</span>(curnode!=<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(i==index)&#123;</span><br><span class="line">prenode.next=curnode.next;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">prenode=curnode;</span><br><span class="line">curnode=curnode.next;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对链表排序</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">orderList</span><span class="params">()</span></span>&#123;</span><br><span class="line">Node nextnode=<span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">int</span> temp=<span class="number">0</span>;</span><br><span class="line">Node curnode=head;</span><br><span class="line"><span class="keyword">while</span>(curnode.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">nextnode=curnode.next;</span><br><span class="line"><span class="keyword">while</span>(nextnode !=<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(curnode.data&gt;nextnode.data)&#123;</span><br><span class="line">temp=curnode.data;</span><br><span class="line">curnode.data=nextnode.data;</span><br><span class="line">nextnode.data=temp;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">nextnode=nextnode.next;</span><br><span class="line">&#125;</span><br><span class="line">curnode=curnode.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除重复元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteduplecate</span><span class="params">()</span></span>&#123;</span><br><span class="line">Node p=head;</span><br><span class="line"><span class="keyword">while</span>(p!=<span class="keyword">null</span>)&#123;</span><br><span class="line">Node q=p;</span><br><span class="line"><span class="keyword">while</span>(q.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(p.data==q.next.data)&#123;</span><br><span class="line">q.next=q.next.next;</span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line">q=q.next;</span><br><span class="line">&#125;</span><br><span class="line">p=p.next;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">linkedlist list=<span class="keyword">new</span> linkedlist();</span><br><span class="line">list.addNode(<span class="number">3</span>);</span><br><span class="line">list.addNode(<span class="number">2</span>);</span><br><span class="line">list.addNode(<span class="number">4</span>);</span><br><span class="line">list.addNode(<span class="number">1</span>);</span><br><span class="line">list.addNode(<span class="number">5</span>);</span><br><span class="line">System.out.println(<span class="string">"before order:"</span>);</span><br><span class="line">list.printlist();</span><br><span class="line">list.orderList();</span><br><span class="line">System.out.println(<span class="string">"\n"</span>+<span class="string">"after order:"</span>);</span><br><span class="line">list.printlist();</span><br><span class="line">list.deleteNode(<span class="number">1</span>);</span><br><span class="line">System.out.println(<span class="string">"\n"</span>+<span class="string">"after delete first:"</span>);</span><br><span class="line">list.printlist();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>before order:<br>3 2 4 1 5<br>after order:<br>1 2 3 4 5<br>after delete first:<br>2 3 4 5 </p><h4 id="2-删除链表中重复元素"><a href="#2-删除链表中重复元素" class="headerlink" title="2.删除链表中重复元素"></a>2.删除链表中重复元素</h4><p>本方法主要思路是对链表进行双重循环遍历，外循环正常遍历链表，内循环从头结点开始遍历，如果碰到和当前结点结点值相同则删除这个节点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteduplecate</span><span class="params">()</span></span>&#123;</span><br><span class="line">Node p=head;</span><br><span class="line"><span class="keyword">while</span>(p!=<span class="keyword">null</span>)&#123;</span><br><span class="line">Node q=p;</span><br><span class="line"><span class="keyword">while</span>(q.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(p.data==q.next.data)&#123;</span><br><span class="line">q.next=q.next.next;</span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line">q=q.next;</span><br><span class="line">&#125;</span><br><span class="line">p=p.next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-如何检测一个链表是否有环"><a href="#3-如何检测一个链表是否有环" class="headerlink" title="3.如何检测一个链表是否有环"></a>3.如何检测一个链表是否有环</h4><p>定义两个指针fast和slow,fast是快指针，slow是满指针，二者的初始值都指向链表头，slow每次进行一步，fast每次进行两步，两个指针同时向前移动，快指针每次都要和慢指针比较，直到当快指针等于慢指针为止，就证明这个链表有环，否则无环（fast先到尾部为null）</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isloop</span><span class="params">(Node head)</span></span>&#123;</span><br><span class="line">Node fast=head;</span><br><span class="line">Node slow=head;</span><br><span class="line"><span class="keyword">if</span>(fast==<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(fast!=<span class="keyword">null</span>&amp;&amp;fast.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">fast=fast.next.next;</span><br><span class="line">slow=slow.next;</span><br><span class="line"><span class="keyword">if</span>(fast==slow)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> !(fast==<span class="keyword">null</span>||fast.next==<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-链表的反转"><a href="#4-链表的反转" class="headerlink" title="4.链表的反转"></a>4.链表的反转</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverseIteatively</span><span class="params">(Node head)</span></span>&#123;</span><br><span class="line">Node pReversedhead=head;</span><br><span class="line">Node pNode=head;</span><br><span class="line">Node pPrev=<span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">while</span> (pNode!=<span class="keyword">null</span>)&#123;</span><br><span class="line">Node pNext=pNode.next;</span><br><span class="line"><span class="keyword">if</span>(pNext!=<span class="keyword">null</span>)&#123;</span><br><span class="line">pReversedhead=pNode;</span><br><span class="line">&#125;</span><br><span class="line">pNode.next=pPrev;</span><br><span class="line">pPrev=pNode;</span><br><span class="line">pNode=pNext;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-从尾到头输出链表"><a href="#5-从尾到头输出链表" class="headerlink" title="5.从尾到头输出链表"></a>5.从尾到头输出链表</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printlistReversely</span><span class="params">(Node plisthead)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(plisthead!=<span class="keyword">null</span>)&#123;</span><br><span class="line">printlistReversely(plisthead.next);</span><br><span class="line">System.out.println(plisthead.data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-两个有序单链表合并"><a href="#6-两个有序单链表合并" class="headerlink" title="6.两个有序单链表合并"></a>6.两个有序单链表合并</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 为了方便，这两个变量都使用public，而不用private就不需要编写get、set方法了。</span></span><br><span class="line"><span class="comment">     * 存放数据的变量，简单点，直接为int型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> data;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存放结点的变量,默认为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Node next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造方法，在构造时就能够给data赋值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">实现类</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span>: lawt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018/11/6 09</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 两个有序单链表合并</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyList</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递归方式合并两个单链表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head1 有序链表1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head2 有序链表2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 合并后的链表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">mergeTwoList</span><span class="params">(Node head1, Node head2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//递归结束条件</span></span><br><span class="line">        <span class="keyword">if</span> (head1 == <span class="keyword">null</span> &amp;&amp; head2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (head1 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (head2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//合并后的链表</span></span><br><span class="line">        Node head = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (head1.data &gt; head2.data) &#123;</span><br><span class="line">            <span class="comment">//把head较小的结点给头结点</span></span><br><span class="line">            head = head2;</span><br><span class="line">            <span class="comment">//继续递归head2</span></span><br><span class="line">            head.next = mergeTwoList(head1, head2.next);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            head = head1;</span><br><span class="line">            head.next = mergeTwoList(head1.next, head2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 非递归方式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head1 有序单链表1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head2 有序单链表2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 合并后的单链表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">mergeTwoList2</span><span class="params">(Node head1, Node head2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head1 == <span class="keyword">null</span> || head2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head1 != <span class="keyword">null</span> ? head1 : head2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//合并后单链表头结点</span></span><br><span class="line">        Node head = head1.data &lt; head2.data ? head1 : head2;</span><br><span class="line"></span><br><span class="line">        Node cur1 = head == head1 ? head1 : head2;</span><br><span class="line">        Node cur2 = head == head1 ? head2 : head1;</span><br><span class="line"></span><br><span class="line">        Node pre = <span class="keyword">null</span>;<span class="comment">//cur1前一个元素</span></span><br><span class="line">        Node next = <span class="keyword">null</span>;<span class="comment">//cur2的后一个元素</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (cur1 != <span class="keyword">null</span> &amp;&amp; cur2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//第一次进来肯定走这里</span></span><br><span class="line">            <span class="keyword">if</span> (cur1.data &lt;= cur2.data) &#123;</span><br><span class="line">                pre = cur1;</span><br><span class="line">                cur1 = cur1.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                next = cur2.next;</span><br><span class="line">                pre.next = cur2;</span><br><span class="line">                cur2.next = cur1;</span><br><span class="line">                pre = cur2;</span><br><span class="line">                cur2 = next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        pre.next = cur1 == <span class="keyword">null</span> ? cur2 : cur1;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Node node1 = <span class="keyword">new</span> Node(<span class="number">1</span>);</span><br><span class="line">        Node node2 = <span class="keyword">new</span> Node(<span class="number">2</span>);</span><br><span class="line">        Node node3 = <span class="keyword">new</span> Node(<span class="number">3</span>);</span><br><span class="line">        Node node4 = <span class="keyword">new</span> Node(<span class="number">4</span>);</span><br><span class="line">        Node node5 = <span class="keyword">new</span> Node(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        node1.next = node3;</span><br><span class="line">        node3.next = node5;</span><br><span class="line">        node2.next = node4;</span><br><span class="line"><span class="comment">//        Node node = mergeTwoList(node1, node2);</span></span><br><span class="line">        Node node = mergeTwoList2(node2, node1);</span><br><span class="line">        <span class="keyword">while</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.print(node.data + <span class="string">" "</span>);</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链表作为最基本的数据结构，在程序设计中有着非常重要的作用，其存储特点如下：可以用任意一组存储单元来存储单链表中的数据元素（存储单元可以是不连续的）,而且，除了存储每个数据元素ai的值以外，还必须存储指示其直接后继元素的信息。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="java数据结构" scheme="http://dumengblog.club/tags/java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>==和equal的区别</title>
    <link href="http://dumengblog.club/2019/10/10/%E5%92%8Cequal%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://dumengblog.club/2019/10/10/和equal的区别/</id>
    <published>2019-10-10T13:09:20.000Z</published>
    <updated>2019-10-20T04:15:49.448Z</updated>
    
    <content type="html"><![CDATA[<p>​        1.“==”运算符专门用来比较两个变量的值是否相等，也就是用于比较变量所对应的内存中所存储的数值是否相同，要比较两个基本类型的数据或两个引用变量是否相等，只能用==操作符。</p><a id="more"></a><p>​        如果一个变量指向的数据是对象类型的，那么，这时候涉及了两块内存，对象本身占用一块内存（堆内存），变量也占用一块内存，例如Objet obj = new Object();变量obj是一个内存，new Object()是另一个内存，此时，变量obj所对应的内存中存储的数值就是对象占用的那块内存的首地址。对于指向对象类型的变量，如果要比较两个变量是否指向同一个对象，即要看这两个变量所对应的内存中的数值是否相等，这时候就需要用==操作符进行比较。但是如果要比较这两个对象的内容是否相等，那么“==”运算符就无法实现了。</p><p>​        2.equals（Object）方法的特殊之处就在于它可以被覆盖，如果在没有覆盖方法的情况下，equal（Object）和“==”运算符一样，比较的是引用，可以通过覆盖的方法可以让他不是比较引用而是比较数据内容。例如String类的equals方法是比较两个独立对象的内容是否相同，即堆中的内容是否相同。</p><p>例如，对于下面的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String a=<span class="keyword">new</span> String(<span class="string">"foo"</span>);</span><br><span class="line"></span><br><span class="line">String b=<span class="keyword">new</span> String(<span class="string">"foo"</span>);</span><br></pre></td></tr></table></figure><p>​         两条new语句创建了两个对象，然后用a、b这两个变量分别指向了其中一个对象，这是两个不同的对象，它们的首地址是不同的，即a和b中存储的数值是不相同的，所以，表达式a==b将返回false，而这两个对象中的内容是相同的，所以，表达式a.equals(b)将返回true。</p><p>​        如果一个类没有自己定义equals方法，那么它将继承Object类的equals方法，Object类的equals方法的实现代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>==o;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        这说明，如果一个类没有自己定义equals方法，它默认的equals方法（从Object类继承的）就是使用==操作符，也是在比较两个变量指向的对象是否是同一对象，这时候使用equals和使用==会得到同样的结果，如果比较的是两个独立的对象则总返回false。如果你编写的类希望能够比较该类创建的两个实例对象的内容是否相同，那么你必须覆盖equals方法，由你自己写代码来决定在什么情况即可认为两个对象的内容是相同的。</p><p>​        </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​        1.“==”运算符专门用来比较两个变量的值是否相等，也就是用于比较变量所对应的内存中所存储的数值是否相同，要比较两个基本类型的数据或两个引用变量是否相等，只能用==操作符。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="java面试考察知识点" scheme="http://dumengblog.club/tags/java%E9%9D%A2%E8%AF%95%E8%80%83%E5%AF%9F%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>组合和继承的区别</title>
    <link href="http://dumengblog.club/2019/10/10/%E7%BB%84%E5%90%88%E5%92%8C%E7%BB%A7%E6%89%BF%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://dumengblog.club/2019/10/10/组合和继承的区别/</id>
    <published>2019-10-10T11:30:01.000Z</published>
    <updated>2019-10-20T04:13:32.911Z</updated>
    
    <content type="html"><![CDATA[<p>​        组合和继承是面向对象中两种代码复用的方式。组合是指在新类中创建原有类的对象，重复利用已有类的功能。继承是面向对象的主要特性之一，它允许设计人员根据其他类的实现来定义一个类的实现。组合和继承都允许在新的类中设置子对象，只是组合是显示的，而继承是隐式的。组合和继承存在着对应关系：组合中的整体类和继承中的子类对应，组合中的的局部类和继承中的父类对应。</p><a id="more"></a><p>​        说到底两者的区别到底在哪里呢？首先做一个实例。Car表示汽车对象，Vihicle表示交通工具对象，Tire表示轮胎对象。三者的关系如图：</p><p><img src="/../asset/1570708506054.png" alt></p><p>car是vehicle的一种，因此是种继承关系（也可称为is-a关系）</p><p>car拥有多个tire，因此是一种组合关系（称为has-a关系）</p><table><thead><tr><th align="left">继承</th><th align="left">组合</th></tr></thead><tbody><tr><td align="left">class Vehicle{ }                                                                                                                class Car extends Vehicle{}</td><td align="left">class Tire{  }                                                                                                       class Car extends Vehicle{                                                                      private Tire t=new Tire() ; }</td></tr></tbody></table><p>既然组合和继承都可以实现代码的重用，那么我们应该如何选择呢？一般情况下，遵循以下两点原则：</p><p>1.除非两个类是”is-a”关系，否则不要轻易地使用继承，不要单纯的为了实现代码的重用而使用继承，因为过多使用继承会破坏代码的可维护性，当父类被修改时，会影响到所有继承自他的子类，从而增加程序的维护难度和成本。</p><p>2.不要为了实现多态而使用继承，如果类中没有”is-a”的关系，可以通过实现接口和组合的方式来达到相同的目的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​        组合和继承是面向对象中两种代码复用的方式。组合是指在新类中创建原有类的对象，重复利用已有类的功能。继承是面向对象的主要特性之一，它允许设计人员根据其他类的实现来定义一个类的实现。组合和继承都允许在新的类中设置子对象，只是组合是显示的，而继承是隐式的。组合和继承存在着对应关系：组合中的整体类和继承中的子类对应，组合中的的局部类和继承中的父类对应。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="java面试考察知识点" scheme="http://dumengblog.club/tags/java%E9%9D%A2%E8%AF%95%E8%80%83%E5%AF%9F%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>overload和override的区别</title>
    <link href="http://dumengblog.club/2019/10/09/overload%E5%92%8Coverride%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://dumengblog.club/2019/10/09/overload和override的区别/</id>
    <published>2019-10-09T08:04:49.000Z</published>
    <updated>2019-10-20T04:13:02.037Z</updated>
    
    <content type="html"><![CDATA[<p>1、重载(overload)和覆盖(override)是java多态性的两种不同表现方式</p><p>覆盖(Overriding)是父类与子类之间多态性的一种表现，而重载(Overloading)是一个类中多态性的一种表现如果在子类中定义某方法与其父类有相同的名称和参数，我们说该方法被重写 (Overriding) 。子类的对象使用这个方法时，将调用子类中的定义，对它而言，父类中的定义如同被屏蔽了。</p><a id="more"></a><p>2、如果在一个类中定义了多个同名的方法，它们或有不同的参数个数或有不同的参数类型或有不同的参数次序，则称为方法的重载(Overloading)。不能通过访问权限、返回类型、抛出的异常进行重载。重载overload的特点就是与返回值无关，只看参数列表，所以重载的方法是可以改变返回值类型的。</p><h4 id="1-Overload-特点"><a href="#1-Overload-特点" class="headerlink" title="1. Overload 特点"></a><strong>1. Overload 特点</strong></h4><ul><li><p>1、重载时通过不同的参数样式来区分。例如，不同的参数类型，不同的参数个数，不同的参数顺序）   </p></li><li><p>2、不能通过方法法人访问权限、返回类型、抛出的异常进行重载；   </p></li><li><p>3、方法的异常类型和数目不会对重载造成影响；   </p></li><li><p>4、对于继承来说，如果基类方法的访问权限为private，那么就不能再派生类中进行重载，只是一个新的方法而已。</p></li></ul><h4 id="2-Override-特点"><a href="#2-Override-特点" class="headerlink" title="2. Override 特点"></a><strong>2. Override 特点</strong></h4><p>​      1、覆盖的方法的标志必须要和被覆盖的方法的标志完全匹配，才能达到覆盖的效果；   </p><p>​      2、覆盖的方法的返回值必须和被覆盖的方法的返回一致；   </p><p>​      3、覆盖的方法所抛出的异常必须和被覆盖方法的所抛出的异常一致，或者是其子类； </p><p>​      4、方法被定义为final不能被重写；</p><p>​      5、对于继承来说，如果某一方法在父类中是访问权限是private，那么就不能在子类对其进行重写        覆盖，如果定义的话，也只是定义了一个新方法，而不会达到重写覆盖的效果。（通常存在于父类和  子类之间。） </p><h4 id="3-重载（overload）和覆盖（override）主要区别："><a href="#3-重载（overload）和覆盖（override）主要区别：" class="headerlink" title="3. 重载（overload）和覆盖（override）主要区别："></a>3. 重载（overload）和覆盖（override）主要区别：</h4><p>1）覆盖是子类和父类之间的关系，是垂直关系；重载是同一个类中多个方法的联系属于水平的关系；</p><p>2）覆盖只能由一个方法或一对方法产生关系，重载是多个方法之间的联系；</p><p>3）覆盖要求参数列表相同；重载要求参数列表不同；</p><p>4）覆盖关系中，调用方法体是根据对象的类型（对象对应存储空间决定的）；而重载是根据调用时的实参表与形参表来选择方法体的。</p><table><thead><tr><th>区别点</th><th>覆盖</th><th>重载</th></tr></thead><tbody><tr><td>参数列表</td><td>必须不同</td><td>必须相同</td></tr><tr><td>返回类型</td><td>无限制</td><td>必须相同</td></tr><tr><td>异常</td><td>可以修改</td><td>异常只能减少或删除</td></tr><tr><td>访问权限</td><td>可以修改</td><td>不可以降低方法的访问权限</td></tr></tbody></table><p><em>重载实例</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> height;</span><br><span class="line">    MyClass() &#123;</span><br><span class="line">        System.out.println(<span class="string">"调用无参数构造函数"</span>);</span><br><span class="line">        height = <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    MyClass(<span class="keyword">int</span> i) &#123;</span><br><span class="line">        System.out.println(<span class="string">"调用有参数构造函数"</span>);</span><br><span class="line">        height = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">info</span><span class="params">(<span class="keyword">int</span> a, String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(s+<span class="string">"：房子高度为 "</span>+height + <span class="string">" 米"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">info</span><span class="params">(String s, <span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"参数顺序不同构成重载："</span> +s + <span class="string">": 房子高度为 "</span> + height + <span class="string">" 米"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">info</span><span class="params">(<span class="keyword">int</span> b, <span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"方法修饰符可以不同"</span> +<span class="string">": 房子高度为 "</span> + height + <span class="string">" 米"</span>);</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">float</span> <span class="title">info</span><span class="params">(<span class="keyword">int</span> b, <span class="keyword">int</span> a, <span class="keyword">float</span> c)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"方法返回值类型可以不同"</span> +<span class="string">": 房子高度为 "</span> + height + <span class="string">" 米"</span>);</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ytt</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyClass t = <span class="keyword">new</span> MyClass(<span class="number">3</span>);</span><br><span class="line">        t.info(<span class="number">1</span>,<span class="string">"测试1"</span>);</span><br><span class="line">        t.info(<span class="string">"测试2"</span>,<span class="number">2</span>);  <span class="comment">//参数顺序不同构成重载</span></span><br><span class="line">        t.info(<span class="number">1</span>,<span class="number">2</span>);        <span class="comment">//方法修饰符可以不同,方法返回值类型不影响重载</span></span><br><span class="line">        t.info(<span class="number">1</span>,<span class="number">2</span>,<span class="number">6f</span>);  <span class="comment">//方法返回值类型可以不同</span></span><br><span class="line">        <span class="comment">//重载构造函数</span></span><br><span class="line">        <span class="keyword">new</span> MyClass();  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>重写实例</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">info</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是父类："</span>+s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClassRoom</span> <span class="keyword">extends</span> <span class="title">MyClass</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">info</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是子类："</span>+s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">info</span><span class="params">(String s,<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是子类："</span>+s);</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ytt</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyClass t = <span class="keyword">new</span> MyClass();</span><br><span class="line">        t.info(<span class="string">"测试1"</span>);</span><br><span class="line">        MyClassRoom r = <span class="keyword">new</span> MyClassRoom ();</span><br><span class="line">        r.info(<span class="string">"测试2"</span>);  <span class="comment">//方法覆盖</span></span><br><span class="line">        r.info(<span class="string">"测试3"</span>,<span class="number">3</span>);  <span class="comment">//不属于方法覆盖；严格意义上说，方法重载发生在一个类内部，因此也不属于方法重载。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1、重载(overload)和覆盖(override)是java多态性的两种不同表现方式&lt;/p&gt;
&lt;p&gt;覆盖(Overriding)是父类与子类之间多态性的一种表现，而重载(Overloading)是一个类中多态性的一种表现如果在子类中定义某方法与其父类有相同的名称和参数，我们说该方法被重写 (Overriding) 。子类的对象使用这个方法时，将调用子类中的定义，对它而言，父类中的定义如同被屏蔽了。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="java面试考察知识点" scheme="http://dumengblog.club/tags/java%E9%9D%A2%E8%AF%95%E8%80%83%E5%AF%9F%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>final,finally,finalize有什么区别</title>
    <link href="http://dumengblog.club/2019/10/08/final-finally-finalize%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/"/>
    <id>http://dumengblog.club/2019/10/08/final-finally-finalize有什么区别/</id>
    <published>2019-10-08T13:37:20.000Z</published>
    <updated>2019-10-20T04:12:46.593Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、final"><a href="#一、final" class="headerlink" title="一、final"></a>一、final</h4><p>1.final用于声明属性、方法和类，分别表示属性不可变，方法不可覆盖类和类不可能被继承（不可能再派生出新的子类）。</p><p>final属性：被final修饰的变量不可变。</p><a id="more"></a><p>1）.引用不可变</p><p>2）.对象不可变</p><p>1.final在定义的时候初始化。</p><p>2.final成员变量可以再初始化块中初始化，不能在静态初始化块中初始化。</p><p>3.静态final成员变量可以在静态初始化中初始化但不可以在初始化块中初始化。</p><p>4.类的构造器中初始化，但静态final成员变量不可以在构造函数中初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">finaltest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> StringBuffer stringBuffer=<span class="keyword">new</span> StringBuffer(<span class="string">"hello"</span>);</span><br><span class="line">    stringBuffer.append(<span class="string">" word"</span>);</span><br><span class="line">    System.out.println(stringBuffer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：hello word</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">finaltest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> StringBuffer stringBuffer=<span class="keyword">new</span> StringBuffer(<span class="string">"hello"</span>);</span><br><span class="line">        stringBuffer =<span class="keyword">new</span> StringBuffer(<span class="string">"hello word"</span>);</span><br><span class="line">    System.out.println(stringBuffer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译期间报错。</p><p>final方法：当一个方法声明为final时，该方法不允许任何子类重写这个方法，但子类仍然可以使用这个方法。</p><p>final参数：用来表示这个参数在函数内部不允许修改。</p><p>final类：当一个类被声明为final时，此类不能被继承，所有方法都不能被重写。</p><p>一个类既不能被声明为abstract，又被声明为final。</p><h4 id="二、finally"><a href="#二、finally" class="headerlink" title="二、finally"></a>二、finally</h4><p>finally作为异常处理的一部分，他只能使用于try/catch语句中，并且附带一个语句块，表示这个语句块最终一定被执行，经常使用与需要释放资源的情况下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Connection conn;</span><br><span class="line">Statement stmt;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    conn=DriverMannager.getConnection(url,username,password);</span><br><span class="line">    stmt=conn.createStatement();</span><br><span class="line">    stmt.executeUpdate(sql);</span><br><span class="line">    stmt.close();</span><br><span class="line">    conn.close();</span><br><span class="line"><span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">System.out.println(e);</span><br><span class="line">&#125;fianlly&#123;</span><br><span class="line"><span class="keyword">if</span>(stmt!=NUll)</span><br><span class="line">stmt.close();</span><br><span class="line"><span class="keyword">if</span>(conn!=NUll)</span><br><span class="line">    conn.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三、finalize"><a href="#三、finalize" class="headerlink" title="三、finalize　　"></a>三、finalize　　</h4><p>　　finalize()是在java.lang.Object里定义的，也就是说每一个对象都有这么个方法。这个方法在gc启动，该对象被回收的时候被调用。其实gc可以回收大部分的对象（凡是new出来的对象，gc都能搞定，一般情况下我们又不会用new以外的方式去创建对象），所以一般是不需要程序员去实现finalize的。<br>特殊情况下，需要程序员实现finalize，当对象被回收的时候释放一些资源，比如：一个socket链接，在对象初始化时创建，整个生命周期内有效，那么就需要实现finalize，关闭这个链接。<br>　　使用finalize还需要注意一个事，调用super.finalize();</p><p>　　一个对象的finalize()方法只会被调用一次，而且finalize()被调用不意味着gc会立即回收该对象，所以有可能调用finalize()后，该对象又不需要被回收了，然后到了真正要被回收的时候，因为前面调用过一次，所以不会调用finalize()，产生问题。 所以，推荐不要使用finalize()方法，它跟析构函数不一样。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;一、final&quot;&gt;&lt;a href=&quot;#一、final&quot; class=&quot;headerlink&quot; title=&quot;一、final&quot;&gt;&lt;/a&gt;一、final&lt;/h4&gt;&lt;p&gt;1.final用于声明属性、方法和类，分别表示属性不可变，方法不可覆盖类和类不可能被继承（不可能再派生出新的子类）。&lt;/p&gt;
&lt;p&gt;final属性：被final修饰的变量不可变。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="java面试考察知识点" scheme="http://dumengblog.club/tags/java%E9%9D%A2%E8%AF%95%E8%80%83%E5%AF%9F%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>static 的作用</title>
    <link href="http://dumengblog.club/2019/10/07/static-%E7%9A%84%E4%BD%9C%E7%94%A8/"/>
    <id>http://dumengblog.club/2019/10/07/static-的作用/</id>
    <published>2019-10-07T07:38:48.000Z</published>
    <updated>2019-10-20T04:12:27.564Z</updated>
    
    <content type="html"><![CDATA[<p>static 关键字主要有两种作用：</p><p>1.为某特定数据类型或对象分配单一的存储空间，而与创建对象的个数无关。</p><p>2.实现某个方法或属性 与类而不是对象关联在一起，也就是说在不创建对象的情况下可以通过类直接调用方法或调用类的属性。</p><p>具体而言，static主要有4种使用情况</p><a id="more"></a><h4 id="1、-static成员变量"><a href="#1、-static成员变量" class="headerlink" title="1、  static成员变量"></a>1、  static成员变量</h4><p>JAVA语言中没有全局变量的概念，但是可以通过static关键字定义来实现全局的效果。java提供了两种类型的变量：用static修饰的静态变量，和不用static修饰的实例变量。静态变量属于类，在内存中只有一个复制，只要静态变量所在的类被加载，这个静态变量就会被分配空间，因此就可以被使用了。</p><p>对静态变量的引用有两种方式：</p><ul><li>类.静态变量</li><li>对象.静态变量</li></ul><p>接下来给出静态变量和实例变量的使用实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">jtbl</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> staticint=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> sint=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">jtbl j=<span class="keyword">new</span> jtbl();</span><br><span class="line">System.out.println(<span class="string">"j.staticint:"</span>+j.staticint);</span><br><span class="line">System.out.println(<span class="string">"jtbl.staticint:"</span>+jtbl.staticint);</span><br><span class="line">System.out.println(<span class="string">"j.sint:"</span>+j.sint);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>j.staticint:1<br>jtbl.staticint:1<br>j.sint:0</p><p>静态变量只有一个，被类拥有，所有对象都共享这个静态变量，而实例对象是与具体对象相关的。</p><p><strong>JAVA语言中不能在方法体中定义static变量。</strong></p><h4 id="2、-static成员方法"><a href="#2、-static成员方法" class="headerlink" title="2、 static成员方法"></a>2、 static成员方法</h4><p>static方法是类的方法，不需要创建对象就可以调用。</p><p>static方法中不能使用this和super关键字，不能调用非static方法，只能调用所属类的静态成员变量和成员方法</p><p>static一个很重要的用途是实现单例模式，单例设计模式的特点是该类只能有一个实例，为了实现这一功能，必须隐藏类的构造函数，即把构造函数声明为private，并提供一个创建对象的方法，由于构造对象被声明为private，外界无法直接创建这个类型的对象，只能通过该类提供的方法来获取类的对象，要达到这样的目的只能把创建对象的方法声明为static，程序实例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、-static代码块"><a href="#3、-static代码块" class="headerlink" title="3、 static代码块"></a>3、 static代码块</h4><p>static代码块，不在任何一个方法体内，static块可以置于类中的任何地方，类中可以有多个static块。在类初次被加载的时候，会按照static块的顺序来执行每个static块，并且只会执行一次。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">statictest</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>  a;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">statictest.a=<span class="number">1</span>;</span><br><span class="line">System.out.println(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"程序开始"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>运行结果：</p></li></ol><p>1<br>程序开始</p><h4 id="4、static内部类"><a href="#4、static内部类" class="headerlink" title="4、static内部类"></a>4、static内部类</h4><p>static内部类是指被static修饰的内部类。它可以不依赖于外部类实例对象而被实例化。静态内部类不能与外部类有相同的名字，不能访问外部类的普通成员变量，只能访问外部类中的静态成员和静态方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> a=<span class="number">5</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">accessAttrformouter</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Inner:outer.a="</span>+a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Outer.Inner nInner=<span class="keyword">new</span> Outer.Inner();</span><br><span class="line">nInner.accessAttrformouter();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>Inner:outer.a=5</p><p><strong>只有内部类才能定义为static</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;static 关键字主要有两种作用：&lt;/p&gt;
&lt;p&gt;1.为某特定数据类型或对象分配单一的存储空间，而与创建对象的个数无关。&lt;/p&gt;
&lt;p&gt;2.实现某个方法或属性 与类而不是对象关联在一起，也就是说在不创建对象的情况下可以通过类直接调用方法或调用类的属性。&lt;/p&gt;
&lt;p&gt;具体而言，static主要有4种使用情况&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="java面试考察知识点" scheme="http://dumengblog.club/tags/java%E9%9D%A2%E8%AF%95%E8%80%83%E5%AF%9F%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>企业面试知识点</title>
    <link href="http://dumengblog.club/2019/10/07/%E4%BC%81%E4%B8%9A%E9%9D%A2%E8%AF%95%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://dumengblog.club/2019/10/07/企业面试知识点/</id>
    <published>2019-10-07T05:54:55.000Z</published>
    <updated>2019-10-20T04:11:53.828Z</updated>
    
    <content type="html"><![CDATA[<p>我首先个人建议面试互联网企业。假如你选择以搜索为核心的互联网企业那么你需要掌握算法，操作系统，数据库的知识，而电子商务企业除了基础知识更需要java方面的知识，网络安全企业侧重有关软件安全 和网络安全的专业知识。</p><a id="more"></a><p>下面摘选一些著名互联网企业的部分面试笔试真题以及考查知识点。</p><p>摘自《java程序员面试笔试宝典》</p><p>1) static 的作用。</p><p>2) final 的作用。</p><p>3) overload 与override的区别。</p><p>4) 组合与继承的区别。</p><p>5) clone 的作用。</p><p>6)前置++与后置++。</p><p>7)内部类。</p><p>8)二维数组的表示。</p><p>9)接口与抽象类的对比。</p><p>10)反射机制。</p><p>11)函数调用方式。</p><p>12)重载函数。</p><p>13)构造函数。</p><p>14)合并两个有序链表。</p><p>15)逻辑推理–智 力题。</p><p>16)从100亿条记录的文本文件中取出重复数最多的前10条。</p><p>17)判断单列表是否又环。</p><p>18)二叉树的多种遍历算法实现。</p><p>19)有读和写两个线程和一个队列， 读线程从队列中读数据，写线程往队列中写数据。</p><p>20) stack 和heap.</p><p>21) TCP的流量控制和拥塞控制机制。</p><p>22)写一个函数，返回一个字符串中只出现1次的第一个字符。</p><p>23)求一个 数组中第k大的数的位置。</p><p>24)面向对象继承、多态问题;例如多态的实现机制。</p><p>25)值传递与引用传递。</p><p>26)什么是不变量?</p><p>27) == 与equal的区别。</p><p>28)创建空类时，哪些成员函数是系统默认的?  </p><p>29)有10万个段，这些IP段之间都不重合，随便给定一个IP,求出属于那个IP段。</p><p>30)网络编程(网络编程范式，非阻塞connect）。</p><p>31) TCP/IP</p><p>32) Linu的命令。原理以及底层实现。</p><p>33) Lim编程。包括所有互斥的方法、多线程编程，进程间通信。</p><p>34)一个一维数轴上有不同的线段，求重复最长的两个线段，例如，a:1<del>3,b:2</del>7, c: 2~8,最长重复是b和c。</p><p>35) Java人口函数的特点。</p><p>36)内存溢出与内存泄漏有什么区别?</p><p>37)利用互斥量和条件变量设计一个清息队列，具有以下功能:①创建消息队列(消息中所含的元素):②消息队列中插人消息;③取出一个清息(阻塞方式);④取出第一消息(非阻塞方式)。注意:互斥量、条件变量和队列由系统给定。</p><p>38)用非递归方法完成二叉树的遍历。</p><p>39)如何实现类似函数指针的功能。</p><p>40)设计模式。</p><p>41)排列组合问题。</p><p>42)若有序表的关键字序列为(b,e,d,e,fg,q,r,s,t),则在二分查找关键字b的过程中，先后进行比较的关键字依次是什么?</p><p>43)有一个虚拟存储系统，若进程在内存中占3页(开始时内存为空)，若采用先进出(FIFO) 页面淘汰算法，当执行如下访问序列后，1,2,3,4,5,1,2.5,1,2,3,4,5, 会发生多少缺页?</p><p>44)有一个顺序栈S,元素s1,s2,s3,s4,s5,s6依次进栈，若6个元素的出栈顺序为s2,s3,s4,s6,s5,s1, 则顺序栈的容量至少应该有多少?</p><p>45) [0,2,1,4,3,9,5,8,6,7]是以数组形式存 储的最小堆，删除堆顶元素0后的结果是多少?</p><p>46)某页式存储管理系统中，地址寄存器长度为24位，其中号占14位，则主存的分块大小是多少字节?</p><p>47) 内存泄露。</p><p>48)各种排序算法使用与比较。</p><p>49)默认初始化问题。</p><p>50)字符串的存储方式。</p><p>51)面向对象与面向过程编程的区别?</p><p>52) 异常处理。</p><p>53)垃圾回收器。</p><p>54) 多线程同步。</p><p>55)数据库内连接与外连接的区别。</p><p>56)设计模式。  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我首先个人建议面试互联网企业。假如你选择以搜索为核心的互联网企业那么你需要掌握算法，操作系统，数据库的知识，而电子商务企业除了基础知识更需要java方面的知识，网络安全企业侧重有关软件安全 和网络安全的专业知识。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="企业面试知识点总结" scheme="http://dumengblog.club/tags/%E4%BC%81%E4%B8%9A%E9%9D%A2%E8%AF%95%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>博客的美化</title>
    <link href="http://dumengblog.club/2019/10/04/%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%BE%8E%E5%8C%96/"/>
    <id>http://dumengblog.club/2019/10/04/博客的美化/</id>
    <published>2019-10-04T13:51:51.000Z</published>
    <updated>2019-10-20T04:10:29.551Z</updated>
    
    <content type="html"><![CDATA[<p>今天水一篇了。</p><p>关于next主题我也是跟着csdn上的一个大佬一步步操作的，我把链接放在<a href="https://blog.csdn.net/nightmare_dimple/article/details/86661502" target="_blank" rel="noopener">这里</a>大家自己去浏览学习。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天水一篇了。&lt;/p&gt;
&lt;p&gt;关于next主题我也是跟着csdn上的一个大佬一步步操作的，我把链接放在&lt;a href=&quot;https://blog.csdn.net/nightmare_dimple/article/details/86661502&quot; target=&quot;_bla
      
    
    </summary>
    
    
    
      <category term="hexo博客" scheme="http://dumengblog.club/tags/hexo%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>解决hexo图片不加载问题</title>
    <link href="http://dumengblog.club/2019/10/04/%E8%A7%A3%E5%86%B3hexo%E5%9B%BE%E7%89%87%E4%B8%8D%E5%8A%A0%E8%BD%BD%E9%97%AE%E9%A2%98/"/>
    <id>http://dumengblog.club/2019/10/04/解决hexo图片不加载问题/</id>
    <published>2019-10-04T13:03:08.000Z</published>
    <updated>2019-10-20T04:13:53.254Z</updated>
    
    <content type="html"><![CDATA[<p>首先我得说明我用的typora编辑器，今天在书写上一个博客的时候遇到了图片不加载的问题，百度上查了很多方法，大多更改路径或者不用Markdown的语法，用了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;%asset_img example.jpg examplename&#125;</span><br></pre></td></tr></table></figure><p>这种标签，我挨个尝试都显示不了图片，最终我部署了一下typora，然后再用Markdown语法居然成功的显示图片了。</p><a id="more"></a><p>首先，大家还是设置站点配置文件_config.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder:true</span><br></pre></td></tr></table></figure><p>然后在博客根目录 git bash here</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-image –save</span><br></pre></td></tr></table></figure><p>接下来我在source目录下新建了一个asset文件夹</p><p>然后我在typora编辑中文件下的偏好设置做了如下更改，然后打开格式菜单中图像下的设置图片根目录，把_post设为根目录。</p><p><img src="/../asset/1570195008613.png" alt="根目录"></p><p><img src="/../asset/1570196975730.png" alt="1570196975730"></p><p>再重新插入图片，用的是asset文件夹下的图片。</p><p>然后hexo g -d</p><p>再看博客的时候图片就出来了。</p><p>希望我的方法可以帮助到您。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先我得说明我用的typora编辑器，今天在书写上一个博客的时候遇到了图片不加载的问题，百度上查了很多方法，大多更改路径或者不用Markdown的语法，用了&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;%asset_img example.jpg examplename&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这种标签，我挨个尝试都显示不了图片，最终我部署了一下typora，然后再用Markdown语法居然成功的显示图片了。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="hexo博客搭建" scheme="http://dumengblog.club/tags/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>如何让百度收录自己的网站</title>
    <link href="http://dumengblog.club/2019/10/04/%E5%A6%82%E4%BD%95%E8%AE%A9%E7%99%BE%E5%BA%A6%E6%94%B6%E5%BD%95%E8%87%AA%E5%B7%B1%E7%9A%84%E7%BD%91%E7%AB%99/"/>
    <id>http://dumengblog.club/2019/10/04/如何让百度收录自己的网站/</id>
    <published>2019-10-04T07:33:05.000Z</published>
    <updated>2019-10-20T04:10:05.402Z</updated>
    
    <content type="html"><![CDATA[<p>当自己的博客搭建成功后，我们可能会去百度搜索一下自己的网站（不是输入链接那种），结果肯定是没有的，今天我就讲一下怎么让自己的hexo 博客被百度收录。首先我建议各位买个域名（我是在阿里云购买的域名），至于为什么在后面会讲到。</p><a id="more"></a><h3 id="Step1-验证网站"><a href="#Step1-验证网站" class="headerlink" title="Step1 验证网站"></a>Step1 验证网站</h3><p>首先打开百度资源平台<a href="https://ziyuan.baidu.com/，没有号的话注册一个，点击用户中心，打开站点管理。" target="_blank" rel="noopener">https://ziyuan.baidu.com/，没有号的话注册一个，点击用户中心，打开站点管理。</a></p><p><img src="/../asset/1570174900124.png" alt></p><p>点击添加网站：</p><img src="/../asset/1570174943011.png" style="zoom: 67%;"><p>前面选https，后面写自己的域名</p><img src="/../asset/1570189924025.png" alt="1570189924025" style="zoom:67%;"><img src="/../asset/1570175454427.png" style="zoom:67%;"><p>到了这一步就是核心！验证网站，此时就会体现你购买域名的方便之处了</p><p>1.文本验证就是把下载的文件放到你的博客根目录下的sourse文件夹下，然后hexo g -d，提交上去，验证一下就可以了，理论上就可以成功了。</p><p>2.html验证就是给你的代码放到head标签中。本文使用的是Next主题。在themes/next/layout/partials/head.swig内：修改meta标签为站长网站上给出的标签即可：同时，在themes/next/config.yml中将google-site-verification和baidu_site_verification的值设置为true即可。</p><p>然后控制台输入：hexo g -d，部署到网站上。<br>3.cname验证 简单地说就是解析网址。</p><p>首先说我选的是第三种。第一种看似简单，但是hexo博客会渲染那个文件，可能加了注释，或者改了配置文件就可以让他不渲染，但是过于麻烦，而且可能还有问题。第二种我试了很多次一直失败，具体原因我也不知道。第三种，只要你有域名绝对是最快最简单的。下面我会把每一步都截图发出来。</p><img src="/../asset/1570176176775.png" style="zoom:67%;"><p><strong>这个主机记录一定别全复制，只要前面那部分！！！</strong></p><p>然后打开阿里云的控制台</p><img src="/../asset/1570176275993.png" style="zoom:67%;"><p>点击解析：</p><p><img src="/../asset/1570176297414.png" alt></p><p>点击添加记录：</p><p><img src="/../asset/1570176353944.png" alt></p><img src="/../asset/1570176411057.png" style="zoom:67%;"><p>确定后，返回网站验证，提示成功。</p><img src="/../asset/1570176479888.png" style="zoom:67%;"><h3 id="Step2-生成网站地图"><a href="#Step2-生成网站地图" class="headerlink" title="Step2 生成网站地图"></a>Step2 生成网站地图</h3><p>安装 sitemap 插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save     </span><br><span class="line">npm install hexo-generator-baidu-sitemap --save12</span><br></pre></td></tr></table></figure><p>​    再修改博客路径下的配置文件（非主题）中的url站点地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line"></span><br><span class="line">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</span><br><span class="line"></span><br><span class="line">url: #在这儿填写你的博客域名</span><br><span class="line">root: /</span><br><span class="line">permalink: :title.html</span><br><span class="line">permalink_defaults:</span><br></pre></td></tr></table></figure><p>执行完之后就会在博客路径下生成sitemap.xml文件和baidusitemap.xml文件，可以通过http://此处填你的域名/baidusitemap.xml,查看该文件是否生成，其中sitemap.xml文件是搜索引擎通用的文件，baidusitemap.xml是百度专用的sitemap文件。</p><h3 id="Step3"><a href="#Step3" class="headerlink" title="Step3"></a>Step3</h3><p>找到百度站长平台-&gt;网站支持-&gt;数据引入-&gt;链接提交</p><img src="/../asset/1570177254217.png" style="zoom:67%;"><p>我们可以看到有两种提交方式，自动提交和手动提交，自动提交又分为主动推送、自动推送和sitemap</p><p>大家可以任选一种方式进行提交。<a href="https://blog.csdn.net/fz2543122681/article/details/53323083" target="_blank" rel="noopener">具体流程请点击这里</a>。然后，我们的hexo博客就被百度收录了，可以通过文章名百度一下就能找到对应的文章。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当自己的博客搭建成功后，我们可能会去百度搜索一下自己的网站（不是输入链接那种），结果肯定是没有的，今天我就讲一下怎么让自己的hexo 博客被百度收录。首先我建议各位买个域名（我是在阿里云购买的域名），至于为什么在后面会讲到。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="百度收录" scheme="http://dumengblog.club/tags/%E7%99%BE%E5%BA%A6%E6%94%B6%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>gitment 评论功能</title>
    <link href="http://dumengblog.club/2019/10/02/gitment-%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/"/>
    <id>http://dumengblog.club/2019/10/02/gitment-评论功能/</id>
    <published>2019-10-02T14:36:18.000Z</published>
    <updated>2019-10-20T04:09:36.680Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇博客说了评论第三方有Disqus，畅言，valine，gitment等，对比之后发现还是使用gitment比较靠谱，毕竟是托管在GitHub上的，用起来比较稳。</p><a id="more"></a><p>一、Gitment模块<br>    Gitment 是基于 GitHub Issues 的评论系统。支持在前端直接引入，不需要任何后端代码。可以在页面进行登录、查看、评论、点赞等操作，同时有完整的 Markdown / GFM 和代码高亮支持。尤为适合各种基于 GitHub Pages 的静态博客或项目页面。想了解具体效果，可以点击查看官方Demo Page：Gitment Demo。</p><p>二、注册OAuth Application<br>    首先我们需要申请一个Github OAuth Application，点击<a href="https://github.com/settings/applications/new进行注册，填写相关信息，注意：在Authorization" target="_blank" rel="noopener">https://github.com/settings/applications/new进行注册，填写相关信息，注意：在Authorization</a> callback URL填自己的网站url<a href="https://guidozijef.github.io，创建成功后，你会得到一个" target="_blank" rel="noopener">https://guidozijef.github.io，创建成功后，你会得到一个</a> client ID 和一个 client secret，这个将被用于之后的用户登录。</p><p>三、配置gitment<br>在主题文件夹下面的_config.yml文件（路径：themes/next/_config.yml）找到gitment的配置，修改配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">gitment:</span><br><span class="line">  enable: true</span><br><span class="line">  mint: true # RECOMMEND, A mint on Gitment, to support count, language and proxy_gateway</span><br><span class="line">  count: true # Show comments count in post meta area</span><br><span class="line">  lazy: false # Comments lazy loading with a button</span><br><span class="line">  cleanly: false # Hide &apos;Powered by ...&apos; on footer, and more</span><br><span class="line">  language: # Force language, or auto switch by theme</span><br><span class="line">  github_user: dmabd   # MUST HAVE, Your Github ID</span><br><span class="line">  github_repo: dmabd.github.io # MUST HAVE, The repo you use to store Gitment comments</span><br><span class="line">  client_id: #注册得到的id</span><br><span class="line">  client_secret: #注册得到的secret</span><br><span class="line">  proxy_gateway: # Address of api proxy, See: https://github.com/aimingoo/intersect</span><br><span class="line">  redirect_protocol: # Protocol of redirect_uri with force_redirect_protocol when mint enabled</span><br></pre></td></tr></table></figure><p>gitment是把评论放在对应仓库的issue中的。<br>这时候应该就可以开通gitment评论功能了，发布测试一下。</p><p>由于我是一次成功，所以假如你配置后出了问题那就得找找度娘了，哈哈。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇博客说了评论第三方有Disqus，畅言，valine，gitment等，对比之后发现还是使用gitment比较靠谱，毕竟是托管在GitHub上的，用起来比较稳。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="hexo博客优化" scheme="http://dumengblog.club/tags/hexo%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>添加留言功能</title>
    <link href="http://dumengblog.club/2019/10/02/%E6%B7%BB%E5%8A%A0%E7%95%99%E8%A8%80%E5%8A%9F%E8%83%BD/"/>
    <id>http://dumengblog.club/2019/10/02/添加留言功能/</id>
    <published>2019-10-02T12:47:59.000Z</published>
    <updated>2019-10-20T04:10:49.837Z</updated>
    
    <content type="html"><![CDATA[<p>今天想在博客中添加留言功能，发现网上以前的一些方法已经被淘汰，在一阵查询中发现使用valine是可以实现的</p><a id="more"></a><p>我用的是Next 主题，本身就已经集成了valine，直接配置即可<br>下面网上搜来的其余系统,请自行搜索教程，划横线的是因为官方已经不允许使用了</p><ul><li><del>多说</del></li><li><del>网易云跟帖</del></li><li>畅言</li><li>来必力（LiveRe）</li><li>Disqus</li><li>Hypercomments</li><li>valine</li></ul><h4 id="开启Valine"><a href="#开启Valine" class="headerlink" title="开启Valine"></a>开启Valine</h4><h5 id="注册Leancloud"><a href="#注册Leancloud" class="headerlink" title="注册Leancloud"></a>注册Leancloud</h5><p>我们的评论系统其实是放在Leancloud上的，因此首先需要去注册一个账号 <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fleancloud.cn%2F" target="_blank" rel="noopener">点我注册</a></p><p>1、 注册完以后需要创建一个应用，名字可以随便起，然后 进入应用-&gt;设置-&gt;应用key ,获取你的 <code>appid</code> 和 <code>appkey</code><br>2、 打开主题下的配置文件 搜索 valine，填入appid 和 appkey，</p><p>以下是我的配置，空白处即为你的appid和appkey。别忘记加空格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">valine:</span><br><span class="line">  enable: true</span><br><span class="line">  appid:                                         # your leancloud application appid</span><br><span class="line">  appkey:                                       # your leancloud application appkey</span><br><span class="line">  notify: true # mail notifier , https://github.com/xCss/Valine/wiki</span><br><span class="line">  verify: false # Verification code</span><br><span class="line">  placeholder: welcome write your comment! # comment box placeholder</span><br><span class="line">  avatar: mm # gravatar style</span><br><span class="line">  guest_info: nick,mail,link # custom comment header</span><br><span class="line">  pageSize: 10 # pagination size</span><br><span class="line">  visitors: true</span><br><span class="line">  comment_count: true</span><br></pre></td></tr></table></figure><p>2、在Leancloud -&gt; 设置 -&gt; 安全中心 -&gt; Web 安全域名 把你的域名加进去</p><p>可以加你买的域名，也可以是你的github仓库名，也可以是你的本机地址也就是localhost：4000</p><h5 id="Valine配置"><a href="#Valine配置" class="headerlink" title="Valine配置"></a>Valine配置</h5><p>首先下载最新的<code>Valine.min.js</code>核心代码库到本地（下面是链接）<br><code>https://cdn.jsdelivr.net/npm/valine@1.1.9-beta9/dist/</code><br>右击<code>Valine.min.js</code>选择链接另存为即可<br><img src="https://images2018.cnblogs.com/blog/1417438/201808/1417438-20180829183748378-1923954493.png" alt="img"><br>将下载好的 <code>Valine.min.js</code> 放置于 <code>next\source\js\src\</code> 下<br>接着，打开valine配置文件进行配置<br>valine配置文件路径：<code>next\layout\_third-party\comments\valine.swig</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.valine.enable and theme.valine.appid and theme.valine.appkey %&#125;</span><br><span class="line">  &lt;script src=&quot;//cdn1.lncld.net/static/js/3.0.4/av-min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;//unjkp.com/valine/dist/Valine.min.js&quot;&gt;&lt;/script&gt;  //删除Valine核心代码库外链调用</span><br><span class="line">  &lt;script src=&quot;/js/src/Valine.min.js&quot;&gt;&lt;/script&gt;  //调用刚下载的本地文件以加速加载速度</span><br><span class="line"></span><br><span class="line">  &#123;% set valine_uri = &apos;/js/src/Valine.min.js&apos; %&#125;  //这里改为从本地加载</span><br><span class="line">  &#123;% if theme.vendors.valine %&#125;</span><br><span class="line">    &#123;% set valine_uri = theme.vendors.valine %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">  &lt;script src=&quot;&#123;&#123; valine_uri &#125;&#125;&quot;&gt;&lt;/script&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    var GUEST = [&apos;nick&apos;,&apos;mail&apos;,&apos;link&apos;];</span><br><span class="line">    var guest = &apos;&#123;&#123; theme.valine.guest_info &#125;&#125;&apos;;</span><br><span class="line">    guest = guest.split(&apos;,&apos;).filter(function (item) &#123;</span><br><span class="line">      return GUEST.indexOf(item)&gt;-1;</span><br><span class="line">    &#125;);</span><br><span class="line">    new Valine(&#123;</span><br><span class="line">        el: &apos;#comments&apos; ,</span><br><span class="line">        verify: &#123;&#123; theme.valine.verify &#125;&#125;,</span><br><span class="line">        notify: &#123;&#123; theme.valine.notify &#125;&#125;,</span><br><span class="line">        appId: &apos;&#123;&#123; theme.valine.appid &#125;&#125;&apos;,</span><br><span class="line">        appKey: &apos;&#123;&#123; theme.valine.appkey &#125;&#125;&apos;,</span><br><span class="line">        placeholder: &apos;&#123;&#123; theme.valine.placeholder &#125;&#125;&apos;,</span><br><span class="line">        avatar:&apos;&#123;&#123; theme.valine.avatar &#125;&#125;&apos;,</span><br><span class="line">        guest_info:[&apos;nick&apos;] ,  //评论者只需要提供评论的昵称即可</span><br><span class="line">        pageSize:&apos;&#123;&#123; theme.valine.pageSize &#125;&#125;&apos; || 10,</span><br><span class="line">    &#125;);</span><br><span class="line">    //增加以下六行代码去除 power by valine</span><br><span class="line">    var infoEle = document.querySelector(&apos;#comments .info&apos;);</span><br><span class="line">    if (infoEle &amp;&amp; infoEle.childNodes &amp;&amp; infoEle.childNodes.length &gt; 0)&#123;</span><br><span class="line">      infoEle.childNodes.forEach(function(item) &#123;</span><br><span class="line">        item.parentNode.removeChild(item);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>然后我们去主题配置文件中进行修改<br>主题配置文件路径：<code>next\_config.yml</code><br>找到以下参数进行修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># Valine.</span><br><span class="line"># You can get your appid and appkey from https://leancloud.cn</span><br><span class="line"># more info please open https://valine.js.org</span><br><span class="line">valine:</span><br><span class="line">  enable: true //打开valine评论功能</span><br><span class="line">  appid: 你的leancloud appid </span><br><span class="line">  appkey: 你的leancloud appkey </span><br><span class="line">  notify: false //邮件提醒</span><br><span class="line">  verify: true //评论时是否有验证码，需要在Leancloud 设置-&gt;安全中心 中打开</span><br><span class="line">  placeholder: 说点什么吧！ //评论框默认显示</span><br><span class="line">  avatar: hide //评论者的头像,我这里设置的不显示</span><br><span class="line">  guest_info: nick # custom comment header</span><br><span class="line">  pageSize: 10 # pagination size</span><br></pre></td></tr></table></figure><p>PS：评论者头像可以进行如下设置<br><img src="https://images2018.cnblogs.com/blog/1417438/201808/1417438-20180829183809378-525261855.png" alt="img"></p><p>到此，一个极简评论系统就完成啦！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天想在博客中添加留言功能，发现网上以前的一些方法已经被淘汰，在一阵查询中发现使用valine是可以实现的&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="hexo博客优化" scheme="http://dumengblog.club/tags/hexo%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>本地hexo部署到Github</title>
    <link href="http://dumengblog.club/2019/10/02/%E6%9C%AC%E5%9C%B0hexo%E9%83%A8%E7%BD%B2%E5%88%B0Github/"/>
    <id>http://dumengblog.club/2019/10/02/本地hexo部署到Github/</id>
    <published>2019-10-02T08:48:20.000Z</published>
    <updated>2019-10-20T04:09:04.671Z</updated>
    
    <content type="html"><![CDATA[<p>今天我所做的就是将hexo部署到github上，毕竟只在自己的电脑上是没用的，借鉴了csdn许多大佬的详解，但是总有有问题的地方，最终，找到了一个讲的很细的详解，部署成功。</p><p><a href="https://blog.csdn.net/m0_38064214/article/details/84504904" target="_blank" rel="noopener">这里附上链接</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天我所做的就是将hexo部署到github上，毕竟只在自己的电脑上是没用的，借鉴了csdn许多大佬的详解，但是总有有问题的地方，最终，找到了一个讲的很细的详解，部署成功。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/m0_38064214/
      
    
    </summary>
    
    
    
      <category term="hexo博客搭建" scheme="http://dumengblog.club/tags/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>java基础知识-基本概念</title>
    <link href="http://dumengblog.club/2019/10/01/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>http://dumengblog.club/2019/10/01/java基础知识-基本概念/</id>
    <published>2019-10-01T11:49:12.000Z</published>
    <updated>2019-10-20T04:13:18.876Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-1-java语言有哪些优点？"><a href="#1-1-java语言有哪些优点？" class="headerlink" title="1.1 java语言有哪些优点？"></a>1.1 java语言有哪些优点？</h3><p>1.java语言为纯面向对象的语言。</p><p>2.平台无关性。java语言的优点便是“一次编译，到处执行”。编译后的程序不会被平台所约束，因此java语言有很好的移植性。</p><a id="more"></a><p>3.java提供了许多内置的类库，将代码封装好来给操作人员使用，从而大大减少开发人员的时间。</p><p>4.提供了对web应用的开发的支持。</p><p>5.具有较好的安全性和健壮性。</p><p>6.去除了c++语言中难以理解，容易混淆的特性，例如头文件，指针，结构，单元运算符重载，虚拟基础类，多重继承等，所以java语言是由c++语言改进并重新设计而来的</p><h3 id="1-2-java语言和c-c-有什么异同。"><a href="#1-2-java语言和c-c-有什么异同。" class="headerlink" title="1.2  java语言和c/c++有什么异同。"></a>1.2  java语言和c/c++有什么异同。</h3><p>java和C++都是面向对象的语言，都使用了面向对象的思想（例如封装，继承，多态），由于面向对象有许多非常好的特性（继承，组合等），因此二者都有很好的重用性。</p><p>下面重点说一下不同点：</p><p>1.java为解释型语言，c/c++为编译型语言，java代码由java编译器编译成字节码，然后由JVM解释，C语言代码经过编译和链接生成可执行的二进制代码，因此java的执行速度比c++慢，但是java可跨平台执行，c/c++不能</p><p>2.java语言没有指针</p><p>3.java只能实现单重继承，但是可以引入多个接口</p><p>4.java为纯面向对象语言，所有代码必须在类里实现</p><p>5.java语言提供了垃圾回收器来实现对垃圾的自动回收，c++语言中需要开发人员去管理对内存的分配。C语言，通常会把释放资源的代码放在析构函数中，Java没有但是有finalize()方法。</p><p>java语言不支持运算符重载，C语言支持</p><p>java不支持默认函数参数，c语言支持</p><p>java不提供goto语句，c/c++支持，但是在java中goto为保留关键字</p><p>java不支持自动强制类型装换，c语言支持</p><p>java具有平台无关性，就是对每种数据类型分配固定长度。</p><p>java提供对注释文档的内建支持</p><p>java包含了一些标准库</p><h3 id="1-3-为什么使用public-static-void-main（String-args）方法？"><a href="#1-3-为什么使用public-static-void-main（String-args）方法？" class="headerlink" title="1.3 为什么使用public static void main（String[] args）方法？"></a>1.3 为什么使用public static void main（String[] args）方法？</h3><p>main是程序的入口方法，所以程序执行时第一个执行的方法就是main方法。</p><p>main（）方法定义的其他几种格式：</p><p>1.static pubic void main(String[] args)</p><p>static 和public无先后顺序</p><p>2.public static final void main(String[] args)</p><p>可以定义为final</p><p>3.static public synchronized void main(String[] args)</p><p>可以定义为synchronized </p><p>不管哪种定义方式，必须保证main（）方法类型为void并且有static和public关键字修饰。不可以用abstract关键字，因为main（）为程序的入口方法。</p><h3 id="1-4静态块"><a href="#1-4静态块" class="headerlink" title="1.4静态块"></a>1.4静态块</h3><p>静态块会在类被加载时调用，可以在main（）方法前执行</p><p>例如：</p><p>public class jingtaikuai {</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"hello word"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"静态块"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>}</p><p>执行结果:</p><p>静态块<br>hello word</p><h3 id="1-5-java程序初始化顺序是怎样的"><a href="#1-5-java程序初始化顺序是怎样的" class="headerlink" title="1.5 java程序初始化顺序是怎样的"></a>1.5 java程序初始化顺序是怎样的</h3><p>java程序的初始化一般遵循三个原则（优先级依次递减）：</p><p>1.静态对象优先于非静态对象</p><p>2.父类优先于子类</p><p>3.按照成员变量定义顺序进行初始化</p><p>常见面试题：</p><p>下面代码的运行结果是什么?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">Object</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"load b1"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">B</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"create b"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"load b2"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">B</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"load a"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"create a"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 初始化顺序 </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> A();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p>load b1<br>load b2<br>load a<br>create b<br>create a</p><h3 id="1-6-java作用域"><a href="#1-6-java作用域" class="headerlink" title="1.6 java作用域"></a>1.6 java作用域</h3><h6 id="在Java语言中，变量的类型主要有3种：成员变量、静态变量和局部变量"><a href="#在Java语言中，变量的类型主要有3种：成员变量、静态变量和局部变量" class="headerlink" title="在Java语言中，变量的类型主要有3种：成员变量、静态变量和局部变量"></a>在Java语言中，变量的类型主要有3种：成员变量、静态变量和局部变量</h6><p>首先说静态变量跟局部变量</p><p>静态变量不依赖于特定的实例，而是被所有实例共享，也就是说，只要一个类被加载，JVM就会给类的静态变量分配</p><p>存储空间。因此可以通过类名.变量名来访问静态变量</p><p>局部变量的作用域与可见性为它所在的花括号内</p><p>类的成员变量的作用范围同类的实例化对象的作用范围相同。当类被实例化的时候，成员变量就会在内存中分配空间，并初始化。</p><p>直到类的实例化对象的生命周期结束时，成员变量的生命周期才结束。</p><table><thead><tr><th>作用域与可见性</th><th>当前类</th><th>同一package</th><th>子类</th><th>其他package</th></tr></thead><tbody><tr><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>private</td><td>√</td><td>×</td><td>×</td><td>×</td></tr><tr><td>protected</td><td>√</td><td>√</td><td>√</td><td>×</td></tr><tr><td>default</td><td>√</td><td>√</td><td>×</td><td>×</td></tr></tbody></table><p>重点说一下protected和default:</p><p>protected：表名成员变量或方法对该类自身，与它在同一个包中的其他类，在其他包中的该类的子类都可见</p><p>default：表明该成员变量或方法只有自己和与其位于同一包内的类可见。</p><p>若父类与子类处于同一包内，则子类对父类的default成员变量或方法都有访问权限；若父类与子类处于不同的package内，则没有访问权限</p><hr><p> 还有需要注意的是，这些修饰符只能修饰成员变量，不能修饰局部变量。</p><p>private和protected不能用来修饰类</p><h3 id="1-7-一个java文件中能否定义多个类"><a href="#1-7-一个java文件中能否定义多个类" class="headerlink" title="1.7 一个java文件中能否定义多个类"></a>1.7 一个java文件中能否定义多个类</h3><p>一个java文件中可以定义多个类，但是最多只能有一个类被public修饰，并且这个类的类名必须和文件名相同。</p><h3 id="1-8-java的构造函数"><a href="#1-8-java的构造函数" class="headerlink" title="1.8 java的构造函数"></a>1.8 java的构造函数</h3><p><strong>一、什么是构造函数</strong></p><p>java构造函数，也叫构造方法，是java中一种特殊的函数。函数名与相同，无返回值。</p><p><strong>作用：一般用来初始化成员属性和成员方法的，即new对象产生后，就调用了对象了属性和方法。</strong></p><p>在现实生活中，很多事物一出现，就天生具有某些属性和行为。比如人一出生，就有年龄、身高、体重、就会哭；汽车一出产，就有颜色、有外观、可以运行等。这些，我们就可以将这些天然的属性和行为定义在构造函数中，当new实例化对象时，也就具有这些属性和方法了，没必要再去重新定义了，从而加快了编程效率。</p><p><strong>构造函数是对象一建立就运行，给对象初始化，就包括属性，执行方法中的语句。</strong></p><p><strong>而一般函数是对象调用才执行，用”.方法名“的方式，给对象添加功能。</strong> </p><p> <strong>一个对象建立，构造函数只运行一次。</strong></p><p> <strong>而一般函数可以被该对象调用多次。</strong></p><p><strong>二、构造函数的特点</strong></p><p><strong>1、函数名与类名相同</strong></p><p><strong>2、不用定义返回值类型。（不同于void类型返回值，void是没有具体返回值类型；构造函数是连类型都没有）</strong></p><p><strong>3、不可以写return语句。（返回值类型都没有，也就不需要return语句了</strong>）</p><p><strong>注：一般函数不能调用构造函数，只有构造函数才能调用构造函数。</strong> </p><p> <strong>三、示例</strong></p><p>1、无参构造函数中只定义了一个方法。<strong>new对象时，就调用与之对应的构造函数</strong>，执行这个方法。不必写“.方法名”。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javastudy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfunDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Confun c1=<span class="keyword">new</span> Confun();            <span class="comment">//输出Hello World。new对象一建立，就会调用对应的构造函数Confun()，并执行其中的println语句。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Confun</span></span>&#123;        </span><br><span class="line">    Confun()&#123;        <span class="comment">//定义构造函数，输出Hello World</span></span><br><span class="line">        System.out.println(<span class="string">"Hellow World"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：Hellow World </p><p> 2、有参构造函数，在new对象时，将实参值传给private变量，相当于完成setter功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javastudy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfunDemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Person z=<span class="keyword">new</span> Person(<span class="string">"zhangsan"</span>,<span class="number">3</span>);        <span class="comment">//实例化对象时，new Person()里直接调用Person构造函数并转转实参，相当于setter功能</span></span><br><span class="line">        z.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String n,<span class="keyword">int</span> m)</span></span>&#123;                <span class="comment">//有参数构造函数，实现给private成员变量传参数值的功能</span></span><br><span class="line">        name=n;</span><br><span class="line">        age=m;        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//getter                                      //实例化对象时，完成了sett功能后，需要getter，获取实参值。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAget</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;                           <span class="comment">//获取private值后，并打印输出</span></span><br><span class="line">        System.out.println(name+<span class="string">"\n"</span>+age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<br>zhangsan<br>3</p><p> 以上代码，我们也可以将show()方法中的输出语句直接放在构造函数中，new对象时，即可直接输出值，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javastudy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfunDemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Person z=<span class="keyword">new</span> Person(<span class="string">"zhangsan"</span>,<span class="number">3</span>);        <span class="comment">//实例化对象时，new Person()里直接调用Person构造函数并转转实参，同时执行输出语句</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String n,<span class="keyword">int</span> m)</span></span>&#123;                <span class="comment">//有参数构造函数，实现给private成员变量传参数值的功能，同时直接输出值</span></span><br><span class="line">        name=n;</span><br><span class="line">        age=m;</span><br><span class="line">        System.out.println(name+<span class="string">"\n"</span>+age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<br>zhangsan<br>3</p><p> 或</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConFun</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Person z=<span class="keyword">new</span> Person(<span class="number">20</span>,<span class="string">"zhangsan"</span>);</span><br><span class="line">        System.out.println(z.getAge()+z.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(<span class="keyword">int</span> x,String y)</span></span>&#123;</span><br><span class="line">        age=x;</span><br><span class="line">        name=y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 3、一个对象建立后，<strong>构造函数只运行一次</strong>。</p><p><strong>如果想给对象的值再赋新的值，就要使用set和get方法，此时是当做一般函数使用</strong></p><p>如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javastudy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfunDemo4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            PersonDemo s=<span class="keyword">new</span> PersonDemo(<span class="string">"李三"</span>,<span class="number">33</span>);        <span class="comment">//new对象时，即调用对应的构造函数，并传值。同时，不能new同一个对象多次，否则会报错。</span></span><br><span class="line">            s.setName(<span class="string">"李五"</span>);                            <span class="comment">//对象建立后，想变更值时，就要用set/get方法，重新设置新的值</span></span><br><span class="line">            s.setName(<span class="string">"阿尔法狗"</span>);                        <span class="comment">//并可调用对象多次。</span></span><br><span class="line">            s.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonDemo</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    PersonDemo(String n,<span class="keyword">int</span> m)&#123;                <span class="comment">//建立有参构造函数，用于给两个private变量name、age赋值，同时输出值</span></span><br><span class="line">        name=n;</span><br><span class="line">        age=m;</span><br><span class="line">        System.out.println(<span class="string">"姓名："</span>+name+<span class="string">"年龄："</span>+age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String x)</span></span>&#123;            <span class="comment">//set方法，用于再次给name赋值</span></span><br><span class="line">        name=x;        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;                <span class="comment">//get方法，用于获取name的赋值</span></span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p>姓名：李三年龄：33<br>阿尔法狗</p><p><strong>四、默认构造函数</strong></p><p><strong>当一个类中没有定义构造函数时，系统会给该类中加一个默认的空参数的构造函数，方便该类初始化。只是该空构造函数是隐藏不见的。</strong></p><p><strong>如下，Person(){}这个默认构造函数是隐藏不显示的。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span>  </span><br><span class="line">    <span class="comment">//Person()&#123;&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>当在该类中自定义了构造函数，默认构造函数就没有了。</strong></p><p><strong>如果仍要构造函数，则需要自己在类中手动添加。</strong></p><p><strong>五、构造函数的重载</strong></p><p>构造函数也是函数的一种，同样具备函数的重载（Overloding）特性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"> </span><br><span class="line">    Person()</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"A:name="</span>+name+<span class="string">":::age="</span>+age);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    Person(String n)</span><br><span class="line">    &#123;</span><br><span class="line">        name = n;</span><br><span class="line">        System.out.println(<span class="string">"B:name="</span>+name+<span class="string">":::age="</span>+age);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    Person(String n,<span class="keyword">int</span> a)</span><br><span class="line">    &#123;  </span><br><span class="line">        name=n;</span><br><span class="line">        age=a;</span><br><span class="line">        System.out.println(<span class="string">"C:name="</span>+name+<span class="string">":::age="</span>+age);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonDemo2</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Person p1=<span class="keyword">new</span> Person();</span><br><span class="line">        Person p2=<span class="keyword">new</span> Person(<span class="string">"lishi"</span>);</span><br><span class="line">        Person p3=<span class="keyword">new</span> Person(<span class="string">"lishi"</span>,<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：<br>A:name=null:::age=0<br>B:name=lishi:::age=0<br>C:name=lishi:::age=10</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"> </span><br><span class="line">    Person()</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"A:name="</span>+name+<span class="string">":::age="</span>+age);</span><br><span class="line">        cry();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    Person(String n)</span><br><span class="line">    &#123;</span><br><span class="line">        name = n;</span><br><span class="line">        System.out.println(<span class="string">"B:name="</span>+name+<span class="string">":::age="</span>+age);</span><br><span class="line">        cry();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    Person(String n,<span class="keyword">int</span> a)</span><br><span class="line">    &#123;  </span><br><span class="line">        name=n;</span><br><span class="line">        age=a;</span><br><span class="line">        System.out.println(<span class="string">"C:name="</span>+name+<span class="string">":::age="</span>+age);</span><br><span class="line">        cry();</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cry</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Cry..............."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonDemo2</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Person p1=<span class="keyword">new</span> Person();</span><br><span class="line">        Person p2=<span class="keyword">new</span> Person(<span class="string">"lishi"</span>);</span><br><span class="line">        Person p3=<span class="keyword">new</span> Person(<span class="string">"lishi"</span>,<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：<br>A:name=null:::age=0<br>Cry……………<br>B:name=lishi:::age=0<br>Cry……………<br>C:name=lishi:::age=10<br>Cry……………</p><p>转自:<a href="http://www.cnblogs.com/ibelieve618/p/6364541.html" target="_blank" rel="noopener">http://www.cnblogs.com/ibelieve618/p/6364541.html</a></p><h3 id="1-9-java中的clone方法"><a href="#1-9-java中的clone方法" class="headerlink" title="1.9 java中的clone方法"></a>1.9 java中的clone方法</h3><p>java中所有的类都继承自Object类，这个类提供了一个clone的方法，这个方法的作用是返回一个Object对象的复制。</p><p>使用步骤：</p><p>1.继承Cloneable 接口</p><p>2.重写clone（）方法</p><p>3.clone方法中调用super.clone（）</p><p>4.把浅复制的引用指向原型对象新的克隆体</p><hr><p>一、简单用法</p><p>只需要在需要clone的对象上实现（implements）Cloneable接口，然后再在类中加上clone方法，在方法中只需要调用super.clone()，根据自己的需要实现即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Student <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (Student)<span class="keyword">super</span>.clone();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">stu.setAge(<span class="number">1</span>);</span><br><span class="line">stu.setName(<span class="string">"aa"</span>);</span><br><span class="line">System.out.println(stu + <span class="string">" age: "</span> + stu.getAge() + <span class="string">" name: "</span> + stu.getName());</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Student sC = stu.clone();</span><br><span class="line">System.out.println(sC + <span class="string">" sC.age: "</span> + sC.getAge() + <span class="string">" sC.name: "</span> + sC.getName());</span><br><span class="line">sC.setAge(<span class="number">12</span>);</span><br><span class="line">sC.setName(<span class="string">"bb"</span>);</span><br><span class="line">System.out.println(stu + <span class="string">" age: "</span> + stu.getAge() + <span class="string">" name: "</span> + stu.getName());</span><br><span class="line">System.out.println(sC + <span class="string">" sC.age: "</span> + sC.getAge() + <span class="string">" sC.name: "</span> + sC.getName());</span><br><span class="line">&#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>}</p><p>输出结果：</p><p>testClone.Student@15db9742 age: 1 name: aa<br>testClone.Student@6d06d69c sC.age: 1 sC.name: aa<br>testClone.Student@15db9742 age: 1 name: aa<br>testClone.Student@6d06d69c sC.age: 12 sC.name: bb</p><p>分析结果：1、根据输出结果中前边的类名，可以得出被克隆对象的与原来的对象是同一种类型。2、根据内存地址（hashcode）知道，被克隆对象的与原来的对象是存在于内存中的不同的两个对象。所以后边有一个赋值，对原来对象没有任何影响。</p><p>二、“影子”克隆与深度克隆</p><p>首先看一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bag</span></span>&#123;<span class="comment">//学生的书包</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> width;</span><br><span class="line"><span class="keyword">private</span> String logo;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWidth</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> width;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWidth</span><span class="params">(<span class="keyword">int</span> width)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.width = width;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getLogo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> logo;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLogo</span><span class="params">(String logo)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.logo = logo;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student2</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">private</span> Bag bag;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Bag <span class="title">getBag</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> bag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBag</span><span class="params">(Bag bag)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.bag = bag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Student2 <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (Student2)<span class="keyword">super</span>.clone();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Student2 stu = <span class="keyword">new</span> Student2();</span><br><span class="line">stu.setAge(<span class="number">1</span>);</span><br><span class="line">stu.setName(<span class="string">"aa"</span>);</span><br><span class="line">Bag b = <span class="keyword">new</span> Bag();</span><br><span class="line">b.setWidth(<span class="number">10</span>);</span><br><span class="line">b.setLogo(<span class="string">"Nike"</span>);</span><br><span class="line">stu.setBag(b);</span><br><span class="line">printStudent(stu);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Student2 sC = stu.clone();</span><br><span class="line">printStudent(sC);</span><br><span class="line">sC.setAge(<span class="number">12</span>);</span><br><span class="line">sC.setName(<span class="string">"bb"</span>);</span><br><span class="line">sC.getBag().setWidth(<span class="number">100</span>);<span class="comment">//改变书包的属性</span></span><br><span class="line">sC.getBag().setLogo(<span class="string">"JNike"</span>);</span><br><span class="line">printStudent(stu);</span><br><span class="line">printStudent(sC);</span><br><span class="line">&#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输出</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> stu</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printStudent</span><span class="params">(Student2 stu)</span> </span>&#123;</span><br><span class="line">System.out.println(stu + <span class="string">" age: "</span> + stu.getAge() + <span class="string">" name: "</span> + stu.getName() + </span><br><span class="line"><span class="string">" bag: "</span> + stu.getBag() + <span class="string">"("</span> + stu.getBag().getLogo() + <span class="string">" width: "</span> + </span><br><span class="line">stu.getBag().getWidth() + <span class="string">")"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>}<br>输出结果：<br>testClone.Student2@15db9742 age: 1 name: aa bag: testClone.Bag@6d06d69c(Nike width: 10)<br>testClone.Student2@7852e922 age: 1 name: aa bag: testClone.Bag@6d06d69c(Nike width: 10)<br>testClone.Student2@15db9742 age: 1 name: aa bag: testClone.Bag@6d06d69c(JNike width: 100)<br>testClone.Student2@7852e922 age: 12 name: bb bag: testClone.Bag@6d06d69c(JNike width: 100)</p><p>分析：发现是不是跟预期的不太一样，通过第二个同学改变书包，但是第一个同学的书包也被改变了。并且通过内存地址可知，他们是同一对象（书包）。原因：调用Object类中clone()方法产生的效果是：先在内存中开辟一块和原始对象一样的空间，然后原样拷贝原始对象中的内 容。对基本数据类型，这样的操作是没有问题的，但对非基本类型变量，我们知道它们保存的仅仅是对象的引用，这也导致clone后的非基本类型变量和原始对 象中相应的变量指向的是同一个对象。 这就是所谓的“影子”克隆。</p><p>解决方案：深度克隆，既是对里边的引用也要克隆。以下是实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bag</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;<span class="comment">//学生的书包</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> width;<span class="comment">//宽</span></span><br><span class="line"><span class="keyword">private</span> String logo;<span class="comment">//品牌</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWidth</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> width;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWidth</span><span class="params">(<span class="keyword">int</span> width)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.width = width;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getLogo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> logo;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLogo</span><span class="params">(String logo)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.logo = logo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Bag <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (Bag)<span class="keyword">super</span>.clone();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student3</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">private</span> Bag bag;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Bag <span class="title">getBag</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> bag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBag</span><span class="params">(Bag bag)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.bag = bag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Student3 <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">Student3 stu = (Student3)<span class="keyword">super</span>.clone();</span><br><span class="line">stu.bag = bag.clone();</span><br><span class="line"><span class="keyword">return</span> stu;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Student3 stu = <span class="keyword">new</span> Student3();</span><br><span class="line">stu.setAge(<span class="number">1</span>);</span><br><span class="line">stu.setName(<span class="string">"aa"</span>);</span><br><span class="line">Bag b = <span class="keyword">new</span> Bag();</span><br><span class="line">b.setWidth(<span class="number">10</span>);</span><br><span class="line">b.setLogo(<span class="string">"Nike"</span>);</span><br><span class="line">stu.setBag(b);</span><br><span class="line">printStudent(stu);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Student3 sC = stu.clone();</span><br><span class="line">printStudent(sC);</span><br><span class="line">sC.setAge(<span class="number">12</span>);</span><br><span class="line">sC.setName(<span class="string">"bb"</span>);</span><br><span class="line">sC.getBag().setWidth(<span class="number">100</span>);<span class="comment">//改变书包的属性</span></span><br><span class="line">sC.getBag().setLogo(<span class="string">"JNike"</span>);</span><br><span class="line">printStudent(stu);</span><br><span class="line">printStudent(sC);</span><br><span class="line">&#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输出</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> stu</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printStudent</span><span class="params">(Student3 stu)</span> </span>&#123;</span><br><span class="line">System.out.println(stu + <span class="string">" age: "</span> + stu.getAge() + <span class="string">" name: "</span> + stu.getName() + </span><br><span class="line"><span class="string">" bag: "</span> + stu.getBag() + <span class="string">"("</span> + stu.getBag().getLogo() + <span class="string">" width: "</span> + </span><br><span class="line">stu.getBag().getWidth() + <span class="string">")"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>}</p><p>输出：<br>testClone.Student3@15db9742 age: 1 name: aa bag: testClone.Bag@6d06d69c(Nike width: 10)<br>testClone.Student3@7852e922 age: 1 name: aa bag: testClone.Bag@4e25154f(Nike width: 10)<br>testClone.Student3@15db9742 age: 1 name: aa bag: testClone.Bag@6d06d69c(Nike width: 10)<br>testClone.Student3@7852e922 age: 12 name: bb bag: testClone.Bag@4e25154f(JNike width: 100)</p><h3 id="1-10-什么是反射机制"><a href="#1-10-什么是反射机制" class="headerlink" title="1.10 什么是反射机制"></a>1.10 什么是反射机制</h3><p>Java 反射机制是在运行状态中，对于任意一个类，都能够获得这个类的所有属性和方法，对于任意一个对象都能够调用它的任意一个属性和方法。这种在运行时动态的获取信息以及动态调用对象的方法的功能称为Java 的反射机制。</p><p>Class 类与java.lang.reflect 类库一起对反射的概念进行了支持，该类库包含了Field,Method,Constructor类(每个类都实现了Member 接口)。这些类型的对象时由JVM 在运行时创建的，用以表示未知类里对应的成员。</p><p>这样你就可以使用Constructor 创建新的对象，用get() 和set() 方法读取和修改与Field 对象关联的字段，用invoke() 方法调用与Method 对象关联的方法。另外，还可以调用getFields() getMethods() 和 getConstructors() 等很便利的方法，以返回表示字段，方法，以及构造器的对象的数组。这样匿名对象的信息就能在运行时被完全确定下来，而在编译时不需要知道任何事情。</p><h4 id="二、获取字节码的方式"><a href="#二、获取字节码的方式" class="headerlink" title="二、获取字节码的方式"></a>二、获取字节码的方式</h4><p>在Java 中可以通过三种方法获取类的字节码(Class)对象</p><ul><li><p>通过Object 类中的getClass() 方法，想要用这种方法必须要明确具体的类并且创建该类的对象。</p></li><li><p>所有数据类型都具备一个静态的属性.class 来获取对应的Class 对象。但是还是要明确到类，然后才能调用类中的静态成员。</p></li><li><p>只要通过给定类的字符串名称就可以获取该类的字节码对象，这样做扩展性更强。通过Class.forName() 方法完成，必须要指定类的全限定名，由于前两种方法都是在知道该类的情况下获取该类的字节码对象，因此不会有异常，但是Class.forName() 方法如果写错类的路径会报 ClassNotFoundException 的异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">ackage com.jas.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Fruit fruit = <span class="keyword">new</span> Fruit();</span><br><span class="line">        Class&lt;?&gt; class1 = fruit.getClass();     <span class="comment">//方法一</span></span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; class2 = Fruit.class;     <span class="comment">//方法二</span></span><br><span class="line"></span><br><span class="line">        Class class3 = <span class="keyword">null</span>;     </span><br><span class="line">        <span class="keyword">try</span> &#123;    <span class="comment">//方法三，如果这里不指定类所在的包名会报 ClassNotFoundException 异常</span></span><br><span class="line">            class3 = Class.forName(<span class="string">"com.jas.reflect.Fruit"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(class1 + <span class="string">"  "</span> +class2 + <span class="string">"    "</span> + class3);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fruit</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="三、通过反射机制获取类信息"><a href="#三、通过反射机制获取类信息" class="headerlink" title="三、通过反射机制获取类信息"></a>三、通过反射机制获取类信息</h4><p>通过反射机制创建对象，在创建对象之前要获得对象的构造函数对象，通过构造函数对象创建对应类的实例。</p><p>下面这段代码分别在运行期间创建了一个无参与有参的对象实例。由于getConstructor() 方法与newInstance() 方法抛出了很多异常(你可以通过源代码查看它们)，这里就简写了直接抛出一个Exception，下同。</p><p><a href="javascript:void(0);" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jas.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        Class clazz = <span class="keyword">null</span>;</span><br><span class="line">        clazz = Class.forName(<span class="string">"com.jas.reflect.Fruit"</span>);</span><br><span class="line">        Constructor&lt;Fruit&gt; constructor1 = clazz.getConstructor();</span><br><span class="line">        Constructor&lt;Fruit&gt; constructor2 = clazz.getConstructor(String.class);</span><br><span class="line"></span><br><span class="line">        Fruit fruit1 = constructor1.newInstance();</span><br><span class="line">        Fruit fruit2 = constructor2.newInstance(<span class="string">"Apple"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fruit</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Fruit</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"无参构造器Run..........."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Fruit</span><span class="params">(String type)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"有参构造器Run..........."</span> + type);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<br>无参构造器Run………..<br>有参构造器Run………..Apple</p><p>通过反射机制获取Class 中的属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jas.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; clazz = <span class="keyword">null</span>;</span><br><span class="line">        Field field = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        clazz = Class.forName(<span class="string">"com.jas.reflect.Fruit"</span>);</span><br><span class="line">        <span class="comment">//field = clazz.getField("num");       getField() 方法不能获取私有的属性</span></span><br><span class="line">        <span class="comment">// field = clazz.getField("type");     访问私有字段时会报 NoSuchFieldException异常</span></span><br><span class="line">        field = clazz.getDeclaredField(<span class="string">"type"</span>);     <span class="comment">//获取私有type 属性</span></span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);  <span class="comment">//对私有字段的访问取消检查</span></span><br><span class="line">        Fruit fruit = (Fruit) clazz.newInstance();  <span class="comment">//创建无参对象实例</span></span><br><span class="line">        field.set(fruit,<span class="string">"Apple"</span>);   <span class="comment">//为无参对象实例属性赋值</span></span><br><span class="line">        Object type = field.get(fruit); <span class="comment">//通过fruit 对象获取属性值</span></span><br><span class="line"></span><br><span class="line">        System.out.println(type);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fruit</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Fruit</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"无参构造器Run..........."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Fruit</span><span class="params">(String type)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"有参构造器Run..........."</span> + type);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<br>无参构造器Run………..<br>Apple</p><p>通过反射机制获取Class 中的方法并运行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jas.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        Class clazz = <span class="keyword">null</span>;</span><br><span class="line">        Method method = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        clazz = Class.forName(<span class="string">"com.jas.reflect.Fruit"</span>);</span><br><span class="line">        Constructor&lt;Fruit&gt; fruitConstructor = clazz.getConstructor(String.class);</span><br><span class="line">        Fruit fruit = fruitConstructor.newInstance(<span class="string">"Apple"</span>);    <span class="comment">//创建有参对象实例</span></span><br><span class="line"></span><br><span class="line">        method = clazz.getMethod(<span class="string">"show"</span>,<span class="keyword">null</span>);  <span class="comment">//获取空参数show 方法</span></span><br><span class="line">        method.invoke(fruit,<span class="keyword">null</span>);  <span class="comment">//执行无参方法</span></span><br><span class="line"></span><br><span class="line">        method = clazz.getMethod(<span class="string">"show"</span>,<span class="keyword">int</span>.class); <span class="comment">//获取有参show 方法</span></span><br><span class="line">        method.invoke(fruit,<span class="number">20</span>);  <span class="comment">//执行有参方法</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fruit</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Fruit</span><span class="params">(String type)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Fruit type = "</span> + type);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Fruit type = "</span> + type + <span class="string">".....Fruit num = "</span> + num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<br>Fruit type = Apple<br>Fruit type = Apple…..Fruit num = 20</p><h4 id="四、反射机制简单应用（使用简单工厂创建对象）"><a href="#四、反射机制简单应用（使用简单工厂创建对象）" class="headerlink" title="四、反射机制简单应用（使用简单工厂创建对象）"></a>四、反射机制简单应用（使用简单工厂创建对象）</h4><p>Class.forName() 生成的结果是在编译时不可知的，因此所有的方法特征签名信息都是在执行时被提取出来的。反射机制能过创建一个在编译期完全未知的对象，并调用该对象的方法。</p><p>以下是反射机制与泛型的一个应用，通过一个工厂类创建不同类型的实例。</p><p>要创建对象的实例类Apple ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">package com.jas.reflect;</span><br><span class="line"></span><br><span class="line">public interface Fruit &#123;&#125;</span><br><span class="line">class Apple implements Fruit&#123;&#125;</span><br></pre></td></tr></table></figure><p>加载的配置文件config.properties：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Fruit=com.jas.reflect.Apple</span><br></pre></td></tr></table></figure><p>工厂类BasicFactory ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jas.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">BasicFactory</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> BasicFactory bf = <span class="keyword">new</span> BasicFactory();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Properties pro = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        pro = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="keyword">try</span>&#123;    </span><br><span class="line">            <span class="comment">//通过类加载器加载配置文件</span></span><br><span class="line">            pro.load(<span class="keyword">new</span> FileReader(BasicFactory.class.getClassLoader().</span><br><span class="line">                    getResource(<span class="string">"config.properties"</span>).getPath()));</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BasicFactory <span class="title">getFactory</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bf;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用泛型获得通用的对象</span></span><br><span class="line">    <span class="keyword">public</span>  &lt;T&gt; <span class="function">T <span class="title">newInstance</span><span class="params">(Class&lt;T&gt; clazz)</span></span>&#123;</span><br><span class="line">        String cName = clazz.getSimpleName();   <span class="comment">//获得字节码对象的类名</span></span><br><span class="line">        String clmplName = pro.getProperty(cName);   <span class="comment">//根据字节码对象的类名通过配置文件获得类的全限定名</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (T)Class.forName(clmplName).newInstance();   <span class="comment">//根据类的全限定名创建实例对象</span></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建对象实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jas.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Fruit fruit = BasicFactory.getFactory().newInstance(Fruit.class);</span><br><span class="line">        System.out.println(fruit);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出<br>com.jas.reflect.Apple@4554617c</p><p>上面这个实例通过一个工厂创建不同对象的实例，通过这种方式可以降低代码的耦合度，代码得到了很大程度的扩展，以前要创建Apple 对象需要通过new 关键字创建Apple 对象，如果我们也要创建Orange 对象呢？是不是也要通过new 关键字创建实例并向上转型为Fruit ，这样做是麻烦的。</p><p>现在我们直接有一个工厂，你只要在配置文件中配置你要创建对象的信息，你就可以创建任何类型你想要的对象，是不是简单很多了呢？可见反射机制的价值是很惊人的。</p><p>Spring 中的 IOC 的底层实现原理就是反射机制，Spring 的容器会帮我们创建实例，该容器中使用的方法就是反射，通过解析xml文件，获取到id属性和class属性里面的内容，利用反射原理创建配置文件里类的实例对象，存入到Spring的bean容器中。</p><p>  参考书籍：<br> 《Java 编程思想》 Bruce Eckel 著 陈昊鹏 译</p><h3 id="1-10-java创建对象的几种方式"><a href="#1-10-java创建对象的几种方式" class="headerlink" title="1.10 java创建对象的几种方式"></a>1.10 java创建对象的几种方式</h3><ol><li>通过new实例化一个对象</li><li>通过反射机制创建对象</li><li>通过clone方法创建一个对象</li><li>通过反序列化方式创建一个对象</li></ol><h3 id="1-11-package作用"><a href="#1-11-package作用" class="headerlink" title="1.11 package作用"></a>1.11 package作用</h3><p>package的作用</p><ul><li>package的中文意思是“包”，它是一个比较抽象的逻辑概念，其宗旨是把.java文件 (Java源文件）、.class文件（编译后的文件）以及其他resource文件（例如.xml文件、.avi文件、.mp3文件、.txt文件等）有条理地进行一个组织，以供使用。它类似于Linux文件系统, 有一个根，从根开始有目录和文件，然后目录中嵌套目录。</li><li>具体而言，package主要有以下两个作用：<br>第一，提供多层命名空间，解决命名冲突，通过使用package,使得处于不同package中的类可以存在相同的名字。<br>第二，对类按功能进行分类，使项目的组织更加清晰。当开发一个有非常多的类的项目时，如果不使用package对类进行分类，而是把所有类都放在一个package下，这样的代码不仅可读性差，而且可维护性也不好，会严重影响开发效率。</li></ul><p>2）package的用法</p><ul><li>package的用法一般如下（源文件所在目录为当前目录）：<br>1.在每个源文件的开头加上”package packagename;”，然后源文件所在目录下创建一个新目录，名称为 packapename。<br>2.用javac指令编译每个sourcename. java源文件，将生成的sourcename. classname文件复制到packagename 目录。<br>3.用 java 指令运行程序：java packagename. sourcename。</li></ul><p>3）实例<br>以下是一个简单的程序示例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.itcourse.pkg;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPackage</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：<br>Hello World!</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-1-java语言有哪些优点？&quot;&gt;&lt;a href=&quot;#1-1-java语言有哪些优点？&quot; class=&quot;headerlink&quot; title=&quot;1.1 java语言有哪些优点？&quot;&gt;&lt;/a&gt;1.1 java语言有哪些优点？&lt;/h3&gt;&lt;p&gt;1.java语言为纯面向对象的语言。&lt;/p&gt;
&lt;p&gt;2.平台无关性。java语言的优点便是“一次编译，到处执行”。编译后的程序不会被平台所约束，因此java语言有很好的移植性。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="java面试考察知识点" scheme="http://dumengblog.club/tags/java%E9%9D%A2%E8%AF%95%E8%80%83%E5%AF%9F%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>数组</title>
    <link href="http://dumengblog.club/2019/09/22/%E6%95%B0%E7%BB%84/"/>
    <id>http://dumengblog.club/2019/09/22/数组/</id>
    <published>2019-09-22T06:55:55.000Z</published>
    <updated>2019-10-20T04:11:05.701Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Java 数组初始化的两种方法：</strong>  </p><p>静态初始化： 程序员在初始化数组时为数组每个元素赋值；<br> 动态初始化： 数组初始化时，程序员只指定数组的长度，由系统为每个元素赋初值。</p><a id="more"></a><p><strong>数组是否必须初始化</strong></p><p>对于这个问题，关键在于要弄清楚数组变量和数组对象的差别。数组变量是存放在栈内存中的，数组对象是存放在堆内存中的。数组变量只是一个引用变量，他能够指向实际的数组对象。</p><p>所谓的数组初始化并非对数组变量初始化，而是对数组对象进行初始化。</p><p><strong>定义数组</strong></p><p>　　<strong>方式1</strong>（推荐，更能表明数组类型）<br> 　　type[] 变量名 = new type[数组中元素的个数];<br> 　　比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><p>　　数组名，也即引用a，指向数组元素的首地址。</p><p>　　<strong>方式2</strong>（同C语言）</p><p>　　type变量名[] = new type[数组中元素的个数];</p><p>　　如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><p>　　<strong>方式3</strong> 定义时直接初始化</p><p>　　type[] 变量名 = new type[]{逗号分隔的初始化值};</p><p>　　其中红色部分可省略，所以又有两种：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br></pre></td></tr></table></figure><p>其中int[] a = new int[]{1,2,3,4};的第二个方括号中不能加上数组长度，因为元素个数是由后面花括号的内容决定的。</p><p>1.</p><p>利用Arrays库中的sort方法对数组排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day1;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Arraysort</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner input=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> a[]=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++) &#123;</span><br><span class="line">System.out.println(<span class="string">"请输入第"</span>+(i+<span class="number">1</span>)+<span class="string">"位学员的成绩"</span>);</span><br><span class="line">    a[i]=input.nextInt();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"您输入的分数数据排序前为："</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++) &#123;</span><br><span class="line">System.out.print(a[i]+<span class="string">"\t"</span>);</span><br><span class="line">&#125;</span><br><span class="line">Arrays.sort(a);</span><br><span class="line">System.out.println(<span class="string">"您输入排序后的数列为："</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++) &#123;</span><br><span class="line">System.out.print(a[i]+<span class="string">"\t"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二维数组基础</p><p>　　基本的定义方式有两种形式，如：</p><p>　　</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type[][] [][]i = <span class="keyword">new</span> type[<span class="number">2</span>][<span class="number">3</span>]<span class="comment">//推荐使用</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type i[][] = <span class="keyword">new</span> type[<span class="number">2</span>][<span class="number">3</span>];</span><br></pre></td></tr></table></figure><p>　　如下程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayTest3</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">int</span>[][] i = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line">       System.out.println(<span class="string">"Is i an Object? "</span></span><br><span class="line">              + (i <span class="keyword">instanceof</span> Object));</span><br><span class="line">       System.out.println(<span class="string">"Is i[0] an int[]? "</span></span><br><span class="line">              + (i[<span class="number">0</span>] <span class="keyword">instanceof</span> <span class="keyword">int</span>[]));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为两个true</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Java 数组初始化的两种方法：&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;静态初始化： 程序员在初始化数组时为数组每个元素赋值；&lt;br&gt; 动态初始化： 数组初始化时，程序员只指定数组的长度，由系统为每个元素赋初值。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="java基础知识" scheme="http://dumengblog.club/tags/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
</feed>
