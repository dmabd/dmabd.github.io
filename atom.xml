<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dumeng&#39;s Blog</title>
  
  <subtitle>writedown everything</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://dumengblog.club/"/>
  <updated>2019-12-29T09:48:02.740Z</updated>
  <id>http://dumengblog.club/</id>
  
  <author>
    <name>dumeng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>牛客网《剑指offer》java版全部代码</title>
    <link href="http://dumengblog.club/2019/12/29/%E7%89%9B%E5%AE%A2%E7%BD%91%E3%80%8A%E5%89%91%E6%8C%87offer%E3%80%8Bjava%E7%89%88%E5%85%A8%E9%83%A8%E4%BB%A3%E7%A0%81/"/>
    <id>http://dumengblog.club/2019/12/29/牛客网《剑指offer》java版全部代码/</id>
    <published>2019-12-29T09:42:12.700Z</published>
    <updated>2019-12-29T09:48:02.740Z</updated>
    
    <content type="html"><![CDATA[<p>首先截图给大家看，所有代码均已提交通过：</p><a id="more"></a><img src="/../asset/image-20191229174456889.png" alt="image-20191229174456889" style="zoom:50%;"><p>所以大家可以放心代码的准确性，因为我的就业方向是java工程师所以算法了解常用的即可，好多题也没有想那么多，很少有那种复杂的想法，暂时还没有写题解。</p><p>话不多说</p><p>附上链接和提取码</p><p>链接：<a href="https://pan.baidu.com/s/18l3W1XEQAqTzGR0vN-l1EQ" target="_blank" rel="noopener">https://pan.baidu.com/s/18l3W1XEQAqTzGR0vN-l1EQ</a><br>提取码：fh7w</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先截图给大家看，所有代码均已提交通过：&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="剑指offer" scheme="http://dumengblog.club/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>将博客搬至CSDN</title>
    <link href="http://dumengblog.club/2019/12/29/%E5%B0%86%E5%8D%9A%E5%AE%A2%E6%90%AC%E8%87%B3CSDN/"/>
    <id>http://dumengblog.club/2019/12/29/将博客搬至CSDN/</id>
    <published>2019-12-29T02:43:35.000Z</published>
    <updated>2019-12-29T02:43:35.574Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>剑指offer(5) 从尾到头打印链表</title>
    <link href="http://dumengblog.club/2019/12/25/%E5%89%91%E6%8C%87offer-5-%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/"/>
    <id>http://dumengblog.club/2019/12/25/剑指offer-5-从尾到头打印链表/</id>
    <published>2019-12-25T13:34:34.000Z</published>
    <updated>2019-12-25T13:37:26.929Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h4><a id="more"></a><p> 输入一个链表的头结点，从尾到头反过来打印出每个结点的值。结点定义如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode next = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    ListNode(<span class="keyword">int</span> val) &#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-解题分析"><a href="#2-解题分析" class="headerlink" title="2.解题分析"></a>2.解题分析</h4><p>　　结点遍历顺序只能从头到尾，但是输出的顺序却为从尾到头，是典型的“后进先出”问题，这就要联想到使用栈，从而也可以联想到使用递归。</p><h4 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printListReversingly_Recursively</span><span class="params">(ListNode node)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node!=<span class="keyword">null</span>) &#123;</span><br><span class="line">        printListReversingly_Recursively(node.next);</span><br><span class="line">        System.out.println(node.key);</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-题目&quot;&gt;&lt;a href=&quot;#1-题目&quot; class=&quot;headerlink&quot; title=&quot;1.题目&quot;&gt;&lt;/a&gt;1.题目&lt;/h4&gt;
    
    </summary>
    
    
    
      <category term="剑指offer" scheme="http://dumengblog.club/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer(4) 替换空格</title>
    <link href="http://dumengblog.club/2019/12/25/%E5%89%91%E6%8C%87offer-4-%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/"/>
    <id>http://dumengblog.club/2019/12/25/剑指offer-4-替换空格/</id>
    <published>2019-12-25T13:22:16.000Z</published>
    <updated>2019-12-25T13:33:02.199Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-题目、"><a href="#1-题目、" class="headerlink" title="1.题目、"></a>1.题目、</h4><a id="more"></a><p> 请实现一个函数，把字符串中的每个空格替换成”%20”。例如输入“We are happy.”，则输出“We%20are%20happy.”。 </p><h4 id="2-解题分析"><a href="#2-解题分析" class="headerlink" title="2.解题分析"></a>2.解题分析</h4><p>遍历一次字符串，统计空格数量并在原来的长度上加上空格数量*2，设置两个指针p1，p2，p1指向原字符串尾部，p2指向添加后的字符串尾部，p1，p2向前移动，p1逐个将它指向的字符复制到p2的位置，直到p1遇到空格，此时p1向前移动移动一格，p2移动3格插入“%20”，直到p1，p2指向同一位置</p><h4 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">replaceSpace</span><span class="params">(StringBuffer str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (str == <span class="keyword">null</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">"输入错误！"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> length = str.length();</span><br><span class="line">    <span class="keyword">int</span> indexOfOriginal = length-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (str.charAt(i) == <span class="string">' '</span>)</span><br><span class="line">            length += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    str.setLength(length);</span><br><span class="line">    <span class="keyword">int</span> indexOfNew = length-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (indexOfNew &gt; indexOfOriginal) &#123;</span><br><span class="line">        <span class="keyword">if</span> (str.charAt(indexOfOriginal) != <span class="string">' '</span>) &#123;</span><br><span class="line">            str.setCharAt(indexOfNew--, str.charAt(indexOfOriginal));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            str.setCharAt(indexOfNew--, <span class="string">'0'</span>);</span><br><span class="line">            str.setCharAt(indexOfNew--, <span class="string">'2'</span>);</span><br><span class="line">            str.setCharAt(indexOfNew--, <span class="string">'%'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        indexOfOriginal--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-题目、&quot;&gt;&lt;a href=&quot;#1-题目、&quot; class=&quot;headerlink&quot; title=&quot;1.题目、&quot;&gt;&lt;/a&gt;1.题目、&lt;/h4&gt;
    
    </summary>
    
    
    
      <category term="剑指offer" scheme="http://dumengblog.club/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer(3) 二维数组中的查找</title>
    <link href="http://dumengblog.club/2019/12/25/%E5%89%91%E6%8C%87offer-3-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/"/>
    <id>http://dumengblog.club/2019/12/25/剑指offer-3-二维数组中的查找/</id>
    <published>2019-12-25T12:42:31.000Z</published>
    <updated>2019-12-25T13:20:59.958Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h4><a id="more"></a><p>　　在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><h4 id="2-解题分析"><a href="#2-解题分析" class="headerlink" title="2.解题分析"></a>2.解题分析</h4><p> 查找整数时，如果从左上角开始查找，情况较为复杂，可以转换思路，从右上角开始查找：左边数字比较小，右边数字比较大，容易进行判断。 </p><p>例如：给出如下数组</p><p>1    2     8      9</p><p>2    4     9     12</p><p>4    7    10    13</p><p>6    8    11    15</p><p>如果查找7返回true</p><p>查找5返回false</p><img src="/../asset/image-20191225211540883.png" alt="image-20191225211540883" style="zoom:67%;"><h4 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 判断二维数组matrix中是否含有整数a</span></span><br><span class="line"><span class="comment"> * 返回值为a的下标，&#123;-1，-1&#125;代表不存在</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] find(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> a) &#123;</span><br><span class="line">    <span class="keyword">int</span>[] index = &#123; -<span class="number">1</span>, -<span class="number">1</span> &#125;;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 判断数组是否正确</span></span><br><span class="line">    <span class="keyword">if</span> (matrix == <span class="keyword">null</span> || matrix.length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">"数组无效！"</span>);</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断数组数字的大小是否符合大小规则</span></span><br><span class="line">    <span class="keyword">int</span> columns = matrix[<span class="number">0</span>].length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; matrix.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (matrix[i].length != columns) &#123;</span><br><span class="line">            System.out.println(<span class="string">"数组列数不一致！"</span>);</span><br><span class="line">            <span class="keyword">return</span> index;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; matrix[i].length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span> &amp;&amp; j == <span class="number">0</span>)</span><br><span class="line">                <span class="comment">// matrix[0][0]不比较</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>) &#123; <span class="comment">// 第一行的数，仅和前一列的数比较</span></span><br><span class="line">                <span class="keyword">if</span> (matrix[i][j] &lt; matrix[i][j - <span class="number">1</span>]) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"数组中数字大小不符合要求！"</span>);</span><br><span class="line">                    <span class="keyword">return</span> index;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j == <span class="number">0</span>) &#123; <span class="comment">// 第一列的数，仅和前一行的数比较</span></span><br><span class="line">                <span class="keyword">if</span> (matrix[i][j] &lt; matrix[i - <span class="number">1</span>][j]) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"数组中数字大小不符合要求！"</span>);</span><br><span class="line">                    <span class="keyword">return</span> index;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (matrix[i][j] &lt; matrix[i - <span class="number">1</span>][j] || matrix[i][j] &lt; matrix[i][j - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="comment">// 其余位置的数字，和前一行或前一列的比较</span></span><br><span class="line">                System.out.println(<span class="string">"数组中数字大小不符合要求！"</span>);</span><br><span class="line">                <span class="keyword">return</span> index;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 正式查找</span></span><br><span class="line">    <span class="keyword">int</span> row = <span class="number">0</span>; <span class="comment">// 行数</span></span><br><span class="line">    <span class="keyword">int</span> column = matrix[<span class="number">0</span>].length - <span class="number">1</span>; <span class="comment">// 列数</span></span><br><span class="line">    <span class="keyword">while</span> (row &lt;= matrix.length - <span class="number">1</span> &amp;&amp; column &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a == matrix[row][column]) &#123;</span><br><span class="line">            index[<span class="number">0</span>] = row;</span><br><span class="line">            index[<span class="number">1</span>] = column;</span><br><span class="line">            System.out.println(<span class="string">"数字"</span> + a + <span class="string">"在二维数组中的下标为："</span> + index[<span class="number">0</span>] + <span class="string">","</span> + index[<span class="number">1</span>]); <span class="comment">// 注意下标是从0开始的</span></span><br><span class="line">            <span class="keyword">return</span> index;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a &lt; matrix[row][column]) &#123;</span><br><span class="line">            column--;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            row++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"数组中不含数字："</span> + a);</span><br><span class="line">    <span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-题目&quot;&gt;&lt;a href=&quot;#1-题目&quot; class=&quot;headerlink&quot; title=&quot;1.题目&quot;&gt;&lt;/a&gt;1.题目&lt;/h4&gt;
    
    </summary>
    
    
    
      <category term="剑指offer" scheme="http://dumengblog.club/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer(2) 不修改数组找出重复的数字</title>
    <link href="http://dumengblog.club/2019/12/25/%E5%89%91%E6%8C%87offer-2-%E4%B8%8D%E4%BF%AE%E6%94%B9%E6%95%B0%E7%BB%84%E6%89%BE%E5%87%BA%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <id>http://dumengblog.club/2019/12/25/剑指offer-2-不修改数组找出重复的数字/</id>
    <published>2019-12-25T12:33:15.000Z</published>
    <updated>2019-12-25T12:40:54.195Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目　"></a><strong>1.题目</strong>　</h4><a id="more"></a><p>　　在一个长度为n+1的数组里的所有数字都在1到n的范围内，所以数组中至少有一个数字是重复的。请找出数组中任意一个重复的数字，但不能修改输入的数组。例如，如果输入长度为8的数组{2, 3, 5, 4, 3, 2, 6, 7}，那么对应的输出是重复的数字2或者3。</p><h4 id="2-解题分析"><a href="#2-解题分析" class="headerlink" title="2.解题分析"></a>2.解题分析</h4><p>​     数组长度为n+1，而数字只从1到n，说明必定有重复数字。可以由二分查找法拓展：把1<del>n的数字从中间数字m分成两部分，若前一半1</del>m的数字数目超过m个，说明重复数字在前一半区间，否则，在后半区间m+1~n。每次在区间中都一分为二，知道找到重复数字。 </p><h4 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDuplicate</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr == <span class="keyword">null</span> || arr.length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">"数组输入无效！"</span>);</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> a : arr) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a &lt; <span class="number">1</span> || a &gt; arr.length - <span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"数字大小超出范围！"</span>);</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> low = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> high = arr.length - <span class="number">1</span>; <span class="comment">// high即为题目的n</span></span><br><span class="line">    <span class="keyword">int</span> mid, count;</span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        mid = ((high - low) &gt;&gt; <span class="number">2</span>) + low;</span><br><span class="line">        count = countRange(arr, low, mid);</span><br><span class="line">        <span class="keyword">if</span> (low == high) &#123;</span><br><span class="line">            <span class="keyword">if</span> (count &gt; <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> low;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">// 必有重复，应该不会出现这种情况吧？</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (count &gt; mid - low + <span class="number">1</span>) &#123;</span><br><span class="line">            high = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回在[low,high]范围中数字的个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countRange</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> a : arr) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a &gt;= low &amp;&amp; a &lt;= high)</span><br><span class="line">            count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-题目&quot;&gt;&lt;a href=&quot;#1-题目&quot; class=&quot;headerlink&quot; title=&quot;1.题目　&quot;&gt;&lt;/a&gt;&lt;strong&gt;1.题目&lt;/strong&gt;　&lt;/h4&gt;
    
    </summary>
    
    
    
      <category term="剑指offer" scheme="http://dumengblog.club/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer(1) 找出数组中重复的数字java版</title>
    <link href="http://dumengblog.club/2019/12/25/%E5%89%91%E6%8C%87offer-1-%E6%89%BE%E5%87%BA%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97java%E7%89%88/"/>
    <id>http://dumengblog.club/2019/12/25/剑指offer-1-找出数组中重复的数字java版/</id>
    <published>2019-12-25T12:04:47.000Z</published>
    <updated>2019-12-25T12:31:44.208Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-题目"><a href="#1-题目" class="headerlink" title="1.题目"></a>1.题目</h4><a id="more"></a><p> 在一个长度为n的数组里的所有数字都在0到n-1的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。例如，如果输入长度为7的数组{2, 3, 1, 0, 2, 5, 3}，那么对应的输出是重复的数字2或者3。 </p><h4 id="2-解题分析"><a href="#2-解题分析" class="headerlink" title="2.解题分析"></a>2.解题分析</h4><p>重排数组，把扫描的每个数字（如m）放在其对应下标（如m下标的位置），若同一位置有重复，则说明该数字重复</p><img src="/../asset/offer1" alt="未命名文件" style="zoom:67%;"><h4 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDuplicate</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr == <span class="keyword">null</span> || arr.length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">"数组输入无效！"</span>);</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> a : arr) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a &lt; <span class="number">0</span> || a &gt; arr.length - <span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"数字大小超出范围！"</span>);</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="keyword">while</span> (arr[i] != i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[arr[i]] == arr[i])</span><br><span class="line">                <span class="keyword">return</span> arr[i];</span><br><span class="line">            <span class="comment">// 交换arr[arr[i]]和arr[i]</span></span><br><span class="line">            temp = arr[i];</span><br><span class="line">            arr[i] = arr[temp];</span><br><span class="line">            arr[temp] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"数组中无重复数字！"</span>);</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-题目&quot;&gt;&lt;a href=&quot;#1-题目&quot; class=&quot;headerlink&quot; title=&quot;1.题目&quot;&gt;&lt;/a&gt;1.题目&lt;/h4&gt;
    
    </summary>
    
    
    
      <category term="剑指offer" scheme="http://dumengblog.club/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>二叉排序树及二叉树常见算法</title>
    <link href="http://dumengblog.club/2019/12/22/%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91/"/>
    <id>http://dumengblog.club/2019/12/22/二叉排序树/</id>
    <published>2019-12-22T07:07:42.000Z</published>
    <updated>2019-12-22T09:16:50.469Z</updated>
    
    <content type="html"><![CDATA[<h4 id="二叉排序树及二叉树常见算法"><a href="#二叉排序树及二叉树常见算法" class="headerlink" title="二叉排序树及二叉树常见算法"></a><u>二叉排序树及二叉树常见算法</u></h4><a id="more"></a><p><strong>一、定义</strong></p><p>二叉排序树，又叫二叉查找树，它或者是一棵空树；或者是具有以下性质的二叉树：</p><ol><li><p>若它的左子树不空，则左子树上所有节点的值均小于它的根节点的值；</p></li><li><p>若它的右子树不空，则右子树上所有节点的值均大于它的根节点的值；</p></li><li><p>它的左右子树也分别为二叉排序树。</p><p>如下图：</p></li></ol><img src="/../asset/image-20191222152211471.png" alt="image-20191222152211471" style="zoom:67%;"><p><strong>二、基本方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BSNode</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> data;</span><br><span class="line"><span class="keyword">public</span> BSNode left;</span><br><span class="line"><span class="keyword">public</span> BSNode right;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BSNode</span><span class="params">(<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.data=data;</span><br><span class="line"><span class="keyword">this</span>.left=<span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">this</span>.right=<span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//二叉排序树</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinarySortTree</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> BSNode root;</span><br><span class="line"><span class="function"><span class="keyword">public</span> BSNode <span class="title">getRoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BinarySortTree</span><span class="params">()</span></span>&#123;</span><br><span class="line">root=<span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入数据到二叉树中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span> <span class="params">(<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line">BSNode newNode=<span class="keyword">new</span> BSNode(data);</span><br><span class="line"><span class="keyword">if</span>(root==<span class="keyword">null</span>)&#123;</span><br><span class="line">root=newNode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">BSNode cNode=root;</span><br><span class="line">BSNode parent;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">parent=cNode;</span><br><span class="line"><span class="keyword">if</span>(data&lt;cNode.data)&#123;</span><br><span class="line">cNode=cNode.left;</span><br><span class="line"><span class="keyword">if</span>(cNode==<span class="keyword">null</span>)&#123;</span><br><span class="line">parent.left=newNode;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">cNode=cNode.right;</span><br><span class="line"><span class="keyword">if</span>(cNode==<span class="keyword">null</span>)&#123;</span><br><span class="line">parent.right=newNode;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//以数组形式构建二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span> []data)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;data.length;i++)&#123;</span><br><span class="line">insert(data[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中序遍历</span></span><br><span class="line"><span class="comment">//实现前序和后续只需要更改顺序即可</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(BSNode localRoot)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(localRoot!=<span class="keyword">null</span>)&#123;</span><br><span class="line">inOrder(localRoot.left);</span><br><span class="line">System.out.print(localRoot.data+<span class="string">" "</span>);</span><br><span class="line">inOrder(localRoot.right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(BSNode localRoot)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(localRoot!=<span class="keyword">null</span>)&#123;</span><br><span class="line">System.out.print(localRoot.data+<span class="string">" "</span>);</span><br><span class="line">preOrder(localRoot.left);</span><br><span class="line">preOrder(localRoot.right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AfterOrder</span><span class="params">(BSNode localRoot)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(localRoot!=<span class="keyword">null</span>)&#123;</span><br><span class="line">AfterOrder(localRoot.left);</span><br><span class="line">AfterOrder(localRoot.right);</span><br><span class="line">System.out.print(localRoot.data+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">BinarySortTree bs=<span class="keyword">new</span> BinarySortTree();</span><br><span class="line"><span class="keyword">int</span> data[]=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">2</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">5</span>&#125;;</span><br><span class="line">bs.buildTree(data);</span><br><span class="line">System.out.println(<span class="string">"中序遍历"</span>);</span><br><span class="line">bs.inOrder(bs.getRoot());</span><br><span class="line">System.out.println(<span class="string">"\n前序遍历"</span>);</span><br><span class="line">bs.preOrder(bs.getRoot());</span><br><span class="line">System.out.println(<span class="string">"\n后序遍历"</span>);</span><br><span class="line">bs.AfterOrder(bs.getRoot());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="/../asset/image-20191222162250213.png" alt="image-20191222162250213"></p><p><strong>三、如何层序遍历二叉树</strong></p><p> 可以使用队列来实现二叉树的层序遍历。其主要思想如下：现将根结点放在队列中，然后每次都从队列中取出一个结点打印打印该结点的值，若这个结点有子结点，则将他的子结点放在队列尾，直到队列为空。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//层序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">layerTranverse</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.root==<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">Queue &lt;BSNode&gt; q=<span class="keyword">new</span> LinkedList&lt;BSNode&gt;();</span><br><span class="line">q.add(<span class="keyword">this</span>.root);</span><br><span class="line"><span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">BSNode n=q.poll();</span><br><span class="line">System.out.print(n.data+<span class="string">" "</span>);</span><br><span class="line"><span class="keyword">if</span>(n.left!=<span class="keyword">null</span>)</span><br><span class="line">q.add(n.left);</span><br><span class="line"><span class="keyword">if</span>(n.right!=<span class="keyword">null</span>)</span><br><span class="line">q.add(n.right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>四、 二叉树的最大深度</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> left = maxDepth(root.left);</span><br><span class="line">        <span class="keyword">int</span> right = maxDepth(root.right);</span><br><span class="line">        <span class="keyword">return</span> Math.max(left,right)+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>五、二叉树的镜像</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Mirror</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(root.left!=<span class="keyword">null</span> || root.right!= <span class="keyword">null</span>)&#123;</span><br><span class="line">                TreeNode temp =root.left;</span><br><span class="line">                root.left=root.right;</span><br><span class="line">                root.right=temp;</span><br><span class="line">            &#125;</span><br><span class="line">            Mirror(root.left);</span><br><span class="line">            Mirror(root.right);</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>六、 对称二叉树</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isSymmetrical</span><span class="params">(TreeNode pRoot)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pRoot == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> real(pRoot.left,pRoot.right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">real</span><span class="params">(TreeNode root1,TreeNode root2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root1 == <span class="keyword">null</span> &amp;&amp; root2 == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root1 ==<span class="keyword">null</span> || root2 == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root1.val != root2.val)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> real(root1.left,root2.right)&amp;&amp;real(root1.right,root2.left);</span><br></pre></td></tr></table></figure><p><strong>七、路径总和</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; listAll = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; FindPath(TreeNode root,<span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> listAll;</span><br><span class="line">        list.add(root.val);</span><br><span class="line">        target -= root.val;</span><br><span class="line">        <span class="keyword">if</span>(target == <span class="number">0</span> &amp;&amp; root.left==<span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>)&#123;</span><br><span class="line">            listAll.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(list));</span><br><span class="line">        &#125;</span><br><span class="line">        FindPath(root.left,target);</span><br><span class="line">        FindPath(root.right,target);</span><br><span class="line">        list.remove(list.size()-<span class="number">1</span>);</span><br><span class="line">       <span class="keyword">return</span> listAll;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>八、 重建二叉树</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">reConstructBinaryTree</span><span class="params">(<span class="keyword">int</span> [] pre,<span class="keyword">int</span> [] in)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> reConstructBinaryTree(pre,<span class="number">0</span>,pre.length-<span class="number">1</span>,in,<span class="number">0</span>,in.length-<span class="number">1</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> TreeNode <span class="title">reConstructBinaryTree</span><span class="params">(<span class="keyword">int</span> [] pre,<span class="keyword">int</span> startpre,<span class="keyword">int</span> endpre,<span class="keyword">int</span> [] in,<span class="keyword">int</span> startin,<span class="keyword">int</span> endin)</span></span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(startpre &gt; endpre || startin &gt; endin)&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       TreeNode root = <span class="keyword">new</span> TreeNode(pre[startpre]);</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i =startin;i&lt;=endin;i++)&#123;</span><br><span class="line">           <span class="keyword">if</span>(in[i] == pre[startpre])&#123;</span><br><span class="line">               root.left = reConstructBinaryTree(pre,startpre+<span class="number">1</span>,startpre+i-startin,in,startin,i-<span class="number">1</span>);</span><br><span class="line">               root.right = reConstructBinaryTree(pre,startpre+i-startin+<span class="number">1</span>,endpre,in,i+<span class="number">1</span>,endin);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> root;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>九、 二叉搜索树的后序遍历序列</strong> </p><pre><code>public boolean VerifySquenceOfBST(int [] sequence) {       if(sequence.length==0)              return false;        int len = sequence.length-1;        return split(sequence,0,len);}public boolean split(int [] sequence,int start,int end){    if(start&gt;=end)        return true;    int center = start;    while(sequence[center]&lt;sequence[end]&amp;&amp;center&lt;end){        center++;    }    for(int i=center;i&lt;end;i++){        if(sequence[i]&lt;sequence[end]){            return false;        }    }    return split(sequence,start,center-1)&amp;&amp;split(sequence,center,end-1);}</code></pre><p><strong>十、二叉树的序列化和反序列化</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">serialize</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 利用二叉树的层次遍历方式进行序列化</span></span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        LinkedList&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            TreeNode node = queue.remove();</span><br><span class="line">            <span class="keyword">if</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">                res.append(node.val).append(<span class="string">","</span>);</span><br><span class="line">                queue.add(node.left);</span><br><span class="line">                queue.add(node.right);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res.append(<span class="string">"null,"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>反序列化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">deserialize</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (data == <span class="keyword">null</span> || data.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String[] dataArr = data.split(<span class="string">","</span>);</span><br><span class="line">        <span class="comment">// 层次遍历逆向还原二叉树</span></span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        TreeNode root = toNode(dataArr[index]);</span><br><span class="line">        LinkedList&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="keyword">while</span> (index &lt; dataArr.length - <span class="number">2</span> &amp;&amp; !queue.isEmpty()) &#123;</span><br><span class="line">            TreeNode cur = queue.remove();</span><br><span class="line">            <span class="comment">// 添加左子节点</span></span><br><span class="line">            TreeNode leftNode = toNode(dataArr[++index]);</span><br><span class="line">            cur.left = leftNode;</span><br><span class="line">            <span class="comment">// 队列中的节点用于为其赋值孩子节点，若该节点本身为 null，</span></span><br><span class="line">            <span class="comment">// 没有孩子节点，便不再添加到队列中，下同理</span></span><br><span class="line">            <span class="keyword">if</span> (leftNode != <span class="keyword">null</span>) &#123;</span><br><span class="line">                queue.add(leftNode);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 添加右子节点</span></span><br><span class="line">            TreeNode rightNode = toNode(dataArr[++index]);</span><br><span class="line">            cur.right = rightNode;</span><br><span class="line">            <span class="keyword">if</span> (rightNode != <span class="keyword">null</span>) &#123;</span><br><span class="line">                queue.add(rightNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> TreeNode <span class="title">toNode</span><span class="params">(String val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="string">"null"</span>.equals(val)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TreeNode(Integer.parseInt(val));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;二叉排序树及二叉树常见算法&quot;&gt;&lt;a href=&quot;#二叉排序树及二叉树常见算法&quot; class=&quot;headerlink&quot; title=&quot;二叉排序树及二叉树常见算法&quot;&gt;&lt;/a&gt;&lt;u&gt;二叉排序树及二叉树常见算法&lt;/u&gt;&lt;/h4&gt;
    
    </summary>
    
    
    
      <category term="数据结构" scheme="http://dumengblog.club/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>java集合</title>
    <link href="http://dumengblog.club/2019/12/20/java%E9%9B%86%E5%90%88/"/>
    <id>http://dumengblog.club/2019/12/20/java集合/</id>
    <published>2019-12-20T02:53:32.000Z</published>
    <updated>2019-12-20T04:53:30.491Z</updated>
    
    <content type="html"><![CDATA[<p>​        今天浏览了一下牛客网的许多大佬的面经，发现java基础最爱问的就是java集合，所以今天重温加巩固集合这一块。</p><a id="more"></a><h4 id="一、集合与数组"><a href="#一、集合与数组" class="headerlink" title="一、集合与数组"></a>一、集合与数组</h4><p>数组（可以存储基本数据类型）是用来存现对象的一种容器，但是数组的长度固定，不适合在对象数量未知的情况下使用。</p><p>集合（只能存储对象，对象类型可以不一样）的长度可变，可在多数情况下使用。</p><h4 id="二、层次关系"><a href="#二、层次关系" class="headerlink" title="二、层次关系"></a>二、层次关系</h4><p>如图所示：图中，实线边框的是实现类，折线边框的是抽象类，而点线边框的是接口</p><img src="/../asset/aHR0cHM6Ly9pbWFnZXMyMDE1LmNuYmxvZ3MuY29tL2Jsb2cvODc1MTgxLzIwMTYwOS84NzUxODEtMjAxNjA5MjExMDA3MzMxMDYtMTE4NzI4NjU2Ni5wbmc.png" alt="集合框架图" style="zoom:67%;"><p>Collection接口是集合类的根接口，Java中没有提供这个接口的直接的实现类。但是却让其被继承产生了两个接口，就是Set和List。Set中不能包含重复的元素。List是一个有序的集合，可以包含重复的元素，提供了按索引访问的方式。</p><p>Map是Java.util包中的另一个接口，它和Collection接口没有关系，是相互独立的，但是都属于集合类的一部分。Map包含了key-value对。Map不能包含重复的key，但是可以包含相同的value。</p><p>Iterator，所有的集合类，都实现了Iterator接口，这是一个用于遍历集合中元素的接口，主要包含以下三种方法：<br>1.hasNext()是否还有下一个元素。<br>2.next()返回下一个元素。<br>3.remove()删除当前元素。</p><h4 id="三、几种重要的接口和类简介"><a href="#三、几种重要的接口和类简介" class="headerlink" title="三、几种重要的接口和类简介"></a>三、几种重要的接口和类简介</h4><h5 id="1、List（有序、可重复）"><a href="#1、List（有序、可重复）" class="headerlink" title="1、List（有序、可重复）"></a>1、List（有序、可重复）</h5><p>List里存放的对象是有序的，同时也是可以重复的，List关注的是索引，拥有一系列和索引相关的方法，查询速度快。因为往list集合里插入或删除数据时，会伴随着后面数据的移动，所有插入删除数据速度慢。</p><h5 id="2、Set（无序、不能重复）"><a href="#2、Set（无序、不能重复）" class="headerlink" title="2、Set（无序、不能重复）"></a>2、Set（无序、不能重复）</h5><p>Set里存放的对象是无序，不能重复的，集合中的对象不按特定的方式排序，只是简单地把对象加入集合中。</p><h5 id="3、Map（键值对、键唯一、值不唯一）"><a href="#3、Map（键值对、键唯一、值不唯一）" class="headerlink" title="3、Map（键值对、键唯一、值不唯一）"></a>3、Map（键值对、键唯一、值不唯一）</h5><p>Map集合中存储的是键值对，键不能重复，值可以重复。根据键得到值，对map集合遍历时先得到键的set集合，对set集合进行遍历，得到相应的值。<br><img src="/../asset/image-20191220120856833.png" alt="image-20191220120856833"></p><h4 id="四、遍历"><a href="#四、遍历" class="headerlink" title="四、遍历"></a>四、遍历</h4><p> 在类集中提供了以下四种的常见输出方式：</p><p>1）Iterator：迭代输出，是使用最多的输出方式。</p><p>2）ListIterator：是Iterator的子接口，专门用于输出List中的内容。</p><p>3）foreach输出：JDK1.5之后提供的新功能，可以输出数组或集合。</p><p>4）for循环</p><p>代码示例如下：</p><p> for的形式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>（<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.size();i++）&#123;...&#125;</span><br></pre></td></tr></table></figure><p> foreach的形式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>（<span class="keyword">int</span>　i：arr）&#123;...&#125;</span><br></pre></td></tr></table></figure><p> iterator的形式：<br>Iterator it = arr.iterator();</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(it.hasNext())&#123; object o =it.next(); ...&#125;</span><br></pre></td></tr></table></figure><h4 id="五、ArrayList和LinkedList"><a href="#五、ArrayList和LinkedList" class="headerlink" title="五、ArrayList和LinkedList"></a>五、ArrayList和LinkedList</h4><p>ArrayList底层用的数组，LinkedList底层用的双向循环链表</p><p>ArrayList和LinkedList在用法上没有区别，但是在功能上还是有区别的。</p><p>LinkedList经常用在增删操作较多（插入时不用移动内存，只需改变引用指向）而查询操作很少的情况下（查询需要从头开始遍历查找），ArrayList则相反（数组在内存中是一块连续的内存，如果插入或者删除需要移动内存）。</p><h4 id="六、Map集合"><a href="#六、Map集合" class="headerlink" title="六、Map集合"></a>六、Map集合</h4><p>实现类：HashMap、Hashtable、LinkedHashMap和TreeMap</p><h5 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h5><p>HashMap是最常用的Map，它根据键的HashCode值存储数据，根据键可以直接获取它的值，具有很快的访问速度，遍历时，取得数据的顺序是完全随机的。因为键对象不可以重复，所以HashMap最多只允许一条记录的键为Null，允许多条记录的值为Null，是非同步的</p><h5 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h5><p>Hashtable与HashMap类似，是HashMap的线程安全版，它支持线程的同步，即任一时刻只有一个线程能写Hashtable，因此也导致了Hashtale在写入时会比较慢，它继承自Dictionary类，不同的是它不允许记录的键或者值为null，同时效率较低。</p><h5 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h5><p>线程安全，并且锁分离。ConcurrentHashMap内部使用段(Segment)来表示这些不同的部分，每个段其实就是一个小的hash table，它们有自己的锁。只要多个修改操作发生在不同的段上，它们就可以并发进行。</p><h5 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h5><p>LinkedHashMap保存了记录的插入顺序，在用Iteraor遍历LinkedHashMap时，先得到的记录肯定是先插入的，在遍历的时候会比HashMap慢，有HashMap的全部特性。</p><h5 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h5><p>TreeMap实现SortMap接口，能够把它保存的记录根据键排序，默认是按键值的升序排序（自然顺序），也可以指定排序的比较器，当用Iterator遍历TreeMap时，得到的记录是排过序的。不允许key值为空，非同步的；</p><p>map的遍历</p><p>第一种：KeySet()<br>将Map中所有的键存入到set集合中。因为set具备迭代器。所有可以迭代方式取出所有的键，再根据get方法。获取每一个键对应的值。 keySet():迭代后只能通过get()取key 。<br>取到的结果会乱序，是因为取得数据行主键的时候，使用了HashMap.keySet()方法，而这个方法返回的Set结果，里面的数据是乱序排放的。<br>典型用法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">map.put(<span class="string">"key1"</span>,<span class="string">"lisi1"</span>);</span><br><span class="line">map.put(<span class="string">"key2"</span>,<span class="string">"lisi2"</span>);</span><br><span class="line">map.put(<span class="string">"key3"</span>,<span class="string">"lisi3"</span>);</span><br><span class="line">map.put(<span class="string">"key4"</span>,<span class="string">"lisi4"</span>);  </span><br><span class="line"><span class="comment">//先获取map集合的所有键的set集合，keyset（）</span></span><br><span class="line">Iterator it = map.keySet().iterator();</span><br><span class="line"> <span class="comment">//获取迭代器</span></span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">Object key = it.next();</span><br><span class="line">System.out.println(map.get(key));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种：entrySet（）<br>Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() //返回此映射中包含的映射关系的 Set 视图。（一个关系就是一个键-值对），就是把(key-value)作为一个整体一对一对地存放到Set集合当中的。Map.Entry表示映射关系。entrySet()：迭代后可以e.getKey()，e.getValue()两种方法来取key和value。返回的是Entry接口。<br>典型用法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">map.put(<span class="string">"key1"</span>,<span class="string">"lisi1"</span>);</span><br><span class="line">map.put(<span class="string">"key2"</span>,<span class="string">"lisi2"</span>);</span><br><span class="line">map.put(<span class="string">"key3"</span>,<span class="string">"lisi3"</span>);</span><br><span class="line">map.put(<span class="string">"key4"</span>,<span class="string">"lisi4"</span>);</span><br><span class="line"><span class="comment">//将map集合中的映射关系取出，存入到set集合</span></span><br><span class="line">Iterator it = map.entrySet().iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">Entry e =(Entry) it.next();</span><br><span class="line">System.out.println(<span class="string">"键"</span>+e.getKey () + <span class="string">"的值为"</span> + e.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>推荐使用第二种方式，即entrySet()方法，效率较高。<br>对于keySet其实是遍历了2次，一次是转为iterator，一次就是从HashMap中取出key所对于的value。而entryset只是遍历了第一次，它把key和value都放到了entry中，所以快了。两种遍历的遍历时间相差还是很明显的。</p><p>推荐使用第二种方式，即entrySet()方法，效率较高。<br>对于keySet其实是遍历了2次，一次是转为iterator，一次就是从HashMap中取出key所对于的value。而entryset只是遍历了第一次，它把key和value都放到了entry中，所以快了。两种遍历的遍历时间相差还是很明显的。</p><h4 id="七、主要实现类区别小结"><a href="#七、主要实现类区别小结" class="headerlink" title="七、主要实现类区别小结"></a>七、主要实现类区别小结</h4><ol><li><p>Vector和ArrayList</p><p>1，vector是线程同步的，所以它也是线程安全的，而arraylist是线程异步的，是不安全的。如果不考虑到线程的安全因素，一般用arraylist效率比较高。<br>2，如果集合中的元素的数目大于目前集合数组的长度时，vector增长率为目前数组长度的100%，而arraylist增长率为目前数组长度的50%。如果在集合中使用数据量比较大的数据，用vector有一定的优势。<br>3，如果查找一个指定位置的数据，vector和arraylist使用的时间是相同的，如果频繁的访问数据，这个时候使用vector和arraylist都可以。而如果移动一个指定位置会导致后面的元素都发生移动，这个时候就应该考虑到使用linklist,因为它移动一个指定位置的数据时其它元素不移动。<br>ArrayList 和Vector是采用数组方式存储数据，此数组元素数大于实际存储的数据以便增加和插入元素，都允许直接序号索引元素，但是插入数据要涉及到数组元素移动等内存操作，所以索引数据快，插入数据慢，Vector由于使用了synchronized方法（线程安全）所以性能上比ArrayList要差，LinkedList使用双向链表实现存储，按序号索引数据需要进行向前或向后遍历，但是插入数据时只需要记录本项的前后项即可，所以插入数度较快。</p></li><li><p>arraylist和linkedlist</p><p>1.ArrayList是实现了基于动态数组的数据结构，LinkedList基于链表的数据结构。<br>2.对于随机访问get和set，ArrayList觉得优于LinkedList，因为LinkedList要移动指针。<br>3.对于新增和删除操作add和remove，LinedList比较占优势，因为ArrayList要移动数据。 这一点要看实际情况的。若只对单条数据插入或删除，ArrayList的速度反而优于LinkedList。但若是批量随机的插入删除数据，LinkedList的速度大大优于ArrayList. 因为ArrayList每插入一条数据，要移动插入点及之后的所有数据。</p></li><li><p>HashMap与TreeMap</p><p>1、 HashMap通过hashcode对其内容进行快速查找，而TreeMap中所有的元素都保持着某种固定的顺序，如果你需要得到一个有序的结果你就应该使用TreeMap（HashMap中元素的排列顺序是不固定的）。<br>2、在Map 中插入、删除和定位元素，HashMap是最好的选择。但如果您要按自然顺序或自定义顺序遍历键，那么TreeMap会更好。使用HashMap要求添加的键类明确定义了hashCode()和 equals()的实现。<br>两个map中的元素一样，但顺序不一样，导致hashCode()不一样。<br>同样做测试：<br>在HashMap中，同样的值的map,顺序不同，equals时，false;<br>而在treeMap中，同样的值的map,顺序不同,equals时，true，说明，treeMap在equals()时是整理了顺序了的。</p></li><li><p>HashTable与HashMap</p><p>1、同步性:Hashtable是线程安全的，也就是说是同步的，而HashMap是线程序不安全的，不是同步的。<br>2、HashMap允许存在一个为null的key，多个为null的value 。</p></li></ol><p>​       3、HashTable的key和value都不允许为null。</p><h4 id="八、面试题"><a href="#八、面试题" class="headerlink" title="八、面试题"></a>八、面试题</h4><p>Java集合框架为Java编程语言的基础，也是Java面试中很重要的一个知识点。这里，我列出了一些关于Java集合的重要问题和答案。</p><h5 id="1-Java集合框架是什么？说出一些集合框架的优点？"><a href="#1-Java集合框架是什么？说出一些集合框架的优点？" class="headerlink" title="1. Java集合框架是什么？说出一些集合框架的优点？"></a>1. Java集合框架是什么？<strong>说出一些集合框架的优点</strong>？</h5><p>每种编程语言中都有集合，最初的Java版本包含几种集合类：Vector、Stack、HashTable和Array。随着集合的广泛使用，Java1.2提出了囊括所有集合接口、实现和算法的集合框架。在保证线程安全的情况下使用泛型和并发集合类，Java已经经历了很久。它还包括在Java并发包中，阻塞接口以及它们的实现。集合框架的部分优点如下：</p><p>（1）使用核心集合类降低开发成本，而非实现我们自己的集合类。</p><p>（2）随着使用经过严格测试的集合框架类，代码质量会得到提高。</p><p>（3）通过使用JDK附带的集合类，可以降低代码维护成本。</p><p>（4）复用性和可操作性。</p><h5 id="2-集合框架中的泛型有什么优点？"><a href="#2-集合框架中的泛型有什么优点？" class="headerlink" title="2. 集合框架中的泛型有什么优点？"></a>2. 集合框架中的泛型有什么优点？</h5><p>Java1.5引入了泛型，所有的集合接口和实现都大量地使用它。泛型允许我们为集合提供一个可以容纳的对象类型，因此，如果你添加其它类型的任何元素，它会在编译时报错。这避免了在运行时出现ClassCastException，因为你将会在编译时得到报错信息。泛型也使得代码整洁，我们不需要使用显式转换和instanceOf操作符。它也给运行时带来好处，因为不会产生类型检查的字节码指令。</p><h5 id="3-Java集合框架的基础接口有哪些？"><a href="#3-Java集合框架的基础接口有哪些？" class="headerlink" title="3.Java集合框架的基础接口有哪些？"></a>3.Java集合框架的基础接口有哪些？</h5><p> Collection为集合层级的根接口。一个集合代表一组对象，这些对象即为它的元素。Java平台不提供这个接口任何直接的实现。</p><p>Set是一个不能包含重复元素的集合。这个接口对数学集合抽象进行建模，被用来代表集合，就如一副牌。</p><p>List是一个有序集合，可以包含重复元素。你可以通过它的索引来访问任何元素。List更像长度动态变换的数组。</p><p>Map是一个将key映射到value的对象.一个Map不能包含重复的key：每个key最多只能映射一个value。</p><p>一些其它的接口有Queue、Dequeue、SortedSet、SortedMap和ListIterator。</p><h5 id="4-为何Collection不从Cloneable和Serializable接口继承？"><a href="#4-为何Collection不从Cloneable和Serializable接口继承？" class="headerlink" title="4.为何Collection不从Cloneable和Serializable接口继承？"></a>4.为何Collection不从Cloneable和Serializable接口继承？</h5><p>Collection接口指定一组对象，对象即为它的元素。如何维护这些元素由Collection的具体实现决定。例如，一些如List的Collection实现允许重复的元素，而其它的如Set就不允许。很多Collection实现有一个公有的clone方法。然而，把它放到集合的所有实现中也是没有意义的。这是因为Collection是一个抽象表现。重要的是实现。</p><p>当与具体实现打交道的时候，克隆或序列化的语义和含义才发挥作用。所以，具体实现应该决定如何对它进行克隆或序列化，或它是否可以被克隆或序列化。</p><p>在所有的实现中授权克隆和序列化，最终导致更少的灵活性和更多的限制。特定的实现应该决定它是否可以被克隆和序列化。</p><h5 id="5-为何Map接口不继承Collection接口？"><a href="#5-为何Map接口不继承Collection接口？" class="headerlink" title="5.为何Map接口不继承Collection接口？"></a>5.为何Map接口不继承Collection接口？</h5><p>尽管Map接口和它的实现也是集合框架的一部分，但Map不是集合，集合也不是Map。因此，Map继承Collection毫无意义，反之亦然。</p><p>如果Map继承Collection接口，那么元素去哪儿？Map包含key-value对，它提供抽取key或value列表集合的方法，但是它不适合“一组对象”规范。</p><h5 id="6-Iterator是什么？"><a href="#6-Iterator是什么？" class="headerlink" title="6.Iterator是什么？"></a>6.Iterator是什么？</h5><p>Iterator接口提供遍历任何Collection的接口。我们可以从一个Collection中使用迭代器方法来获取迭代器实例。迭代器取代了Java集合框架中的Enumeration。迭代器允许调用者在迭代过程中移除元素。</p><h5 id="7-Enumeration和Iterator接口的区别？"><a href="#7-Enumeration和Iterator接口的区别？" class="headerlink" title="7.Enumeration和Iterator接口的区别？"></a>7.Enumeration和Iterator接口的区别？</h5><p>Enumeration的速度是Iterator的两倍，也使用更少的内存。Enumeration是非常基础的，也满足了基础的需要。但是，与Enumeration相比，Iterator更加安全，因为当一个集合正在被遍历的时候，它会阻止其它线程去修改集合。</p><p>迭代器取代了Java集合框架中的Enumeration。迭代器允许调用者从集合中移除元素，而Enumeration不能做到。为了使它的功能更加清晰，迭代器方法名已经经过改善。</p><h5 id="8-为何没有像Iterator-add-这样的方法，向集合中添加元素？"><a href="#8-为何没有像Iterator-add-这样的方法，向集合中添加元素？" class="headerlink" title="8.为何没有像Iterator.add()这样的方法，向集合中添加元素？"></a>8.为何没有像Iterator.add()这样的方法，向集合中添加元素？</h5><p>语义不明，已知的是，Iterator的协议不能确保迭代的次序。然而要注意，ListIterator没有提供一个add操作，它要确保迭代的顺序。</p><h5 id="9-为何迭代器没有一个方法可以直接获取下一个元素，而不需要移动游标？"><a href="#9-为何迭代器没有一个方法可以直接获取下一个元素，而不需要移动游标？" class="headerlink" title="9.为何迭代器没有一个方法可以直接获取下一个元素，而不需要移动游标？"></a>9.为何迭代器没有一个方法可以直接获取下一个元素，而不需要移动游标？</h5><p>它可以在当前Iterator的顶层实现，但是它用得很少，如果将它加到接口中，每个继承都要去实现它，这没有意义。</p><h5 id="10-Iterater和ListIterator之间有什么区别？"><a href="#10-Iterater和ListIterator之间有什么区别？" class="headerlink" title="10.Iterater和ListIterator之间有什么区别？"></a>10.Iterater和ListIterator之间有什么区别？</h5><p>（1）我们可以使用Iterator来遍历Set和List集合，而ListIterator只能遍历List。</p><p>（2）Iterator只可以向前遍历，而LIstIterator可以双向遍历。</p><p>（3）ListIterator从Iterator接口继承，然后添加了一些额外的功能，比如添加一个元素、替换一个元素、获取前面或后面元素的索引位置。</p><h5 id="11-遍历一个List有哪些不同的方式？"><a href="#11-遍历一个List有哪些不同的方式？" class="headerlink" title="11.遍历一个List有哪些不同的方式？"></a>11.遍历一个List有哪些不同的方式？</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; strList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">//使用for-each循环</span></span><br><span class="line"><span class="keyword">for</span>(String obj : strList)&#123;</span><br><span class="line">  System.out.println(obj);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//using iterator</span></span><br><span class="line">Iterator&lt;String&gt; it = strList.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">  String obj = it.next();</span><br><span class="line">  System.out.println(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用迭代器更加线程安全，因为它可以确保，在当前遍历的集合元素被更改的时候，它会抛出ConcurrentModificationException。</p><h5 id="12-通过迭代器fail-fast属性，你明白了什么？"><a href="#12-通过迭代器fail-fast属性，你明白了什么？" class="headerlink" title="12.通过迭代器fail-fast属性，你明白了什么？"></a>12.通过迭代器fail-fast属性，你明白了什么？</h5><p>每次我们尝试获取下一个元素的时候，Iterator fail-fast属性检查当前集合结构里的任何改动。如果发现任何改动，它抛出ConcurrentModificationException。Collection中所有Iterator的实现都是按fail-fast来设计的（ConcurrentHashMap和CopyOnWriteArrayList这类并发集合类除外）。</p><h5 id="13-fail-fast与fail-safe有什么区别？"><a href="#13-fail-fast与fail-safe有什么区别？" class="headerlink" title="13.fail-fast与fail-safe有什么区别？"></a>13.fail-fast与fail-safe有什么区别？</h5><p>Iterator的fail-fast属性与当前的集合共同起作用，因此它不会受到集合中任何改动的影响。Java.util包中的所有集合类都被设计为fail-fast的，而java.util.concurrent中的集合类都为fail-safe的。Fail-fast迭代器抛出ConcurrentModificationException，而fail-safe迭代器从不抛出ConcurrentModificationException。</p><h5 id="14-在迭代一个集合的时候，如何避免ConcurrentModificationException？"><a href="#14-在迭代一个集合的时候，如何避免ConcurrentModificationException？" class="headerlink" title="14.在迭代一个集合的时候，如何避免ConcurrentModificationException？"></a>14.在迭代一个集合的时候，如何避免ConcurrentModificationException？</h5><p>在遍历一个集合的时候，我们可以使用并发集合类来避免ConcurrentModificationException，比如使用CopyOnWriteArrayList，而不是ArrayList。</p><h5 id="15-为何Iterator接口没有具体的实现？"><a href="#15-为何Iterator接口没有具体的实现？" class="headerlink" title="15.为何Iterator接口没有具体的实现？"></a>15.为何Iterator接口没有具体的实现？</h5><p>Iterator接口定义了遍历集合的方法，但它的实现则是集合实现类的责任。每个能够返回用于遍历的Iterator的集合类都有它自己的Iterator实现内部类。</p><p>这就允许集合类去选择迭代器是fail-fast还是fail-safe的。比如，ArrayList迭代器是fail-fast的，而CopyOnWriteArrayList迭代器是fail-safe的。</p><h5 id="16-UnsupportedOperationException是什么？"><a href="#16-UnsupportedOperationException是什么？" class="headerlink" title="16.UnsupportedOperationException是什么？"></a>16.UnsupportedOperationException是什么？</h5><p>UnsupportedOperationException是用于表明操作不支持的异常。在JDK类中已被大量运用，在集合框架java.util.Collections.UnmodifiableCollection将会在所有add和remove操作中抛出这个异常。</p><h5 id="17-在Java中，HashMap是如何工作的？"><a href="#17-在Java中，HashMap是如何工作的？" class="headerlink" title="17.在Java中，HashMap是如何工作的？"></a>17.在Java中，HashMap是如何工作的？</h5><p>HashMap在Map.Entry静态内部类实现中存储key-value对。HashMap使用哈希算法，在put和get方法中，它使用hashCode()和equals()方法。当我们通过传递key-value对调用put方法的时候，HashMap使用Key hashCode()和哈希算法来找出存储key-value对的索引。Entry存储在LinkedList中，所以如果存在entry，它使用equals()方法来检查传递的key是否已经存在，如果存在，它会覆盖value，如果不存在，它会创建一个新的entry然后保存。当我们通过传递key调用get方法时，它再次使用hashCode()来找到数组中的索引，然后使用equals()方法找出正确的Entry，然后返回它的值。下面的图片解释了详细内容。</p><p>其它关于HashMap比较重要的问题是容量、负荷系数和阀值调整。HashMap默认的初始容量是16，负荷系数是0.75。阀值是为负荷系数乘以容量，无论何时我们尝试添加一个entry，如果map的大小比阀值大的时候，HashMap会对map的内容进行重新哈希，且使用更大的容量。容量总是2的幂，所以如果你知道你需要存储大量的key-value对，比如缓存从数据库里面拉取的数据，使用正确的容量和负荷系数对HashMap进行初始化是个不错的做法。</p><h5 id="18-hashCode-和equals-方法有何重要性？"><a href="#18-hashCode-和equals-方法有何重要性？" class="headerlink" title="18.hashCode()和equals()方法有何重要性？"></a>18.hashCode()和equals()方法有何重要性？</h5><p>HashMap使用Key对象的hashCode()和equals()方法去决定key-value对的索引。当我们试着从HashMap中获取值的时候，这些方法也会被用到。如果这些方法没有被正确地实现，在这种情况下，两个不同Key也许会产生相同的hashCode()和equals()输出，HashMap将会认为它们是相同的，然后覆盖它们，而非把它们存储到不同的地方。同样的，所有不允许存储重复数据的集合类都使用hashCode()和equals()去查找重复，所以正确实现它们非常重要。equals()和hashCode()的实现应该遵循以下规则：</p><p>（1）如果o1.equals(o2)，那么o1.hashCode() == o2.hashCode()总是为true的。</p><p>（2）如果o1.hashCode() == o2.hashCode()，并不意味着o1.equals(o2)会为true。</p><h5 id="19-我们能否使用任何类作为Map的key？"><a href="#19-我们能否使用任何类作为Map的key？" class="headerlink" title="19.我们能否使用任何类作为Map的key？"></a>19.我们能否使用任何类作为Map的key？</h5><p>我们可以使用任何类作为Map的key，然而在使用它们之前，需要考虑以下几点：</p><p>（1）如果类重写了equals()方法，它也应该重写hashCode()方法。</p><p>（2）类的所有实例需要遵循与equals()和hashCode()相关的规则。请参考之前提到的这些规则。</p><p>（3）如果一个类没有使用equals()，你不应该在hashCode()中使用它。</p><p>（4）用户自定义key类的最佳实践是使之为不可变的，这样，hashCode()值可以被缓存起来，拥有更好的性能。不可变的类也可以确保hashCode()和equals()在未来不会改变，这样就会解决与可变相关的问题了。</p><p>比如，我有一个类MyKey，在HashMap中使用它。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//传递给MyKey的name参数被用于equals()和hashCode()中</span></span><br><span class="line">MyKey key = <span class="keyword">new</span> MyKey(<span class="string">'Pankaj'</span>); <span class="comment">//assume hashCode=1234</span></span><br><span class="line">myHashMap.put(key, <span class="string">'Value'</span>);</span><br><span class="line"><span class="comment">// 以下的代码会改变key的hashCode()和equals()值</span></span><br><span class="line">key.setName(<span class="string">'Amit'</span>); <span class="comment">//assume new hashCode=7890</span></span><br><span class="line"><span class="comment">//下面会返回null，因为HashMap会尝试查找存储同样索引的key，而key已被改变了，匹配失败，返回null</span></span><br><span class="line">myHashMap.get(<span class="keyword">new</span> MyKey(<span class="string">'Pankaj'</span>));</span><br></pre></td></tr></table></figure><p> 那就是为何String和Integer被作为HashMap的key大量使用。</p><h5 id="20-Map接口提供了哪些不同的集合视图？"><a href="#20-Map接口提供了哪些不同的集合视图？" class="headerlink" title="20.Map接口提供了哪些不同的集合视图？"></a>20.Map接口提供了哪些不同的集合视图？</h5><p>Map接口提供三个集合视图：</p><p>（1）Set keyset()：返回map中包含的所有key的一个Set视图。集合是受map支持的，map的变化会在集合中反映出来，反之亦然。当一个迭代器正在遍历一个集合时，若map被修改了（除迭代器自身的移除操作以外），迭代器的结果会变为未定义。集合支持通过Iterator的Remove、Set.remove、removeAll、retainAll和clear操作进行元素移除，从map中移除对应的映射。它不支持add和addAll操作。</p><p>（2）Collection values()：返回一个map中包含的所有value的一个Collection视图。这个collection受map支持的，map的变化会在collection中反映出来，反之亦然。当一个迭代器正在遍历一个collection时，若map被修改了（除迭代器自身的移除操作以外），迭代器的结果会变为未定义。集合支持通过Iterator的Remove、Set.remove、removeAll、retainAll和clear操作进行元素移除，从map中移除对应的映射。它不支持add和addAll操作。</p><p>（3）Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()：返回一个map钟包含的所有映射的一个集合视图。这个集合受map支持的，map的变化会在collection中反映出来，反之亦然。当一个迭代器正在遍历一个集合时，若map被修改了（除迭代器自身的移除操作，以及对迭代器返回的entry进行setValue外），迭代器的结果会变为未定义。集合支持通过Iterator的Remove、Set.remove、removeAll、retainAll和clear操作进行元素移除，从map中移除对应的映射。它不支持add和addAll操作。</p><h5 id="21-HashMap和HashTable有何不同？"><a href="#21-HashMap和HashTable有何不同？" class="headerlink" title="21.HashMap和HashTable有何不同？"></a>21.HashMap和HashTable有何不同？</h5><p>（1）HashMap允许key和value为null，而HashTable不允许。</p><p>（2）HashTable是同步的，而HashMap不是。所以HashMap适合单线程环境，HashTable适合多线程环境。</p><p>（3）在Java1.4中引入了LinkedHashMap，HashMap的一个子类，假如你想要遍历顺序，你很容易从HashMap转向LinkedHashMap，但是HashTable不是这样的，它的顺序是不可预知的。</p><p>（4）HashMap提供对key的Set进行遍历，因此它是fail-fast的，但HashTable提供对key的Enumeration进行遍历，它不支持fail-fast。</p><p>（5）HashTable被认为是个遗留的类，如果你寻求在迭代的时候修改Map，你应该使用CocurrentHashMap。</p><h5 id="22-如何决定选用HashMap还是TreeMap？"><a href="#22-如何决定选用HashMap还是TreeMap？" class="headerlink" title="22.如何决定选用HashMap还是TreeMap？"></a>22.如何决定选用HashMap还是TreeMap？</h5><p>对于在Map中插入、删除和定位元素这类操作，HashMap是最好的选择。然而，假如你需要对一个有序的key集合进行遍历，TreeMap是更好的选择。基于你的collection的大小，也许向HashMap中添加元素会更快，将map换为TreeMap进行有序key的遍历。</p><h5 id="23-ArrayList和Vector有何异同点？"><a href="#23-ArrayList和Vector有何异同点？" class="headerlink" title="23.ArrayList和Vector有何异同点？"></a>23.ArrayList和Vector有何异同点？</h5><p>ArrayList和Vector在很多时候都很类似。</p><p>（1）两者都是基于索引的，内部由一个数组支持。</p><p>（2）两者维护插入的顺序，我们可以根据插入顺序来获取元素。</p><p>（3）ArrayList和Vector的迭代器实现都是fail-fast的。</p><p>（4）ArrayList和Vector两者允许null值，也可以使用索引值对元素进行随机访问。</p><p>以下是ArrayList和Vector的不同点。</p><p>（1）Vector是同步的，而ArrayList不是。然而，如果你寻求在迭代的时候对列表进行改变，你应该使用CopyOnWriteArrayList。</p><p>（2）ArrayList比Vector快，它因为有同步，不会过载。</p><p>（3）ArrayList更加通用，因为我们可以使用Collections工具类轻易地获取同步列表和只读列表。</p><h5 id="24-Array和ArrayList有何区别？什么时候更适合用Array？"><a href="#24-Array和ArrayList有何区别？什么时候更适合用Array？" class="headerlink" title="24.Array和ArrayList有何区别？什么时候更适合用Array？"></a>24.Array和ArrayList有何区别？什么时候更适合用Array？</h5><p>Array可以容纳基本类型和对象，而ArrayList只能容纳对象。</p><p>Array是指定大小的，而ArrayList大小是固定的。</p><p>Array没有提供ArrayList那么多功能，比如addAll、removeAll和iterator等。尽管ArrayList明显是更好的选择，但也有些时候Array比较好用。</p><p>（1）如果列表的大小已经指定，大部分情况下是存储和遍历它们。</p><p>（2）对于遍历基本数据类型，尽管Collections使用自动装箱来减轻编码任务，在指定大小的基本类型的列表上工作也会变得很慢。</p><p>（3）如果你要使用多维数组，使用[][]比List&lt;List&lt;&gt;&gt;更容易。</p><h5 id="25-ArrayList和LinkedList有何区别？"><a href="#25-ArrayList和LinkedList有何区别？" class="headerlink" title="25.ArrayList和LinkedList有何区别？"></a>25.ArrayList和LinkedList有何区别？</h5><p>ArrayList和LinkedList两者都实现了List接口，但是它们之间有些不同。</p><p>（1）ArrayList是由Array所支持的基于一个索引的数据结构，所以它提供对元素的随机访问，复杂度为O(1)，但LinkedList存储一系列的节点数据，每个节点都与前一个和下一个节点相连接。所以，尽管有使用索引获取元素的方法，内部实现是从起始点开始遍历，遍历到索引的节点然后返回元素，时间复杂度为O(n)，比ArrayList要慢。</p><p>（2）与ArrayList相比，在LinkedList中插入、添加和删除一个元素会更快，因为在一个元素被插入到中间的时候，不会涉及改变数组的大小，或更新索引。</p><p>（3）LinkedList比ArrayList消耗更多的内存，因为LinkedList中的每个节点存储了前后节点的引用。</p><h5 id="26-哪些集合类提供对元素的随机访问？"><a href="#26-哪些集合类提供对元素的随机访问？" class="headerlink" title="26.哪些集合类提供对元素的随机访问？"></a>26.哪些集合类提供对元素的随机访问？</h5><p>ArrayList、HashMap、TreeMap和HashTable类提供对元素的随机访问。</p><h5 id="27-EnumSet是什么？"><a href="#27-EnumSet是什么？" class="headerlink" title="27.EnumSet是什么？"></a>27.EnumSet是什么？</h5><p>java.util.EnumSet是使用枚举类型的集合实现。当集合创建时，枚举集合中的所有元素必须来自单个指定的枚举类型，可以是显示的或隐示的。EnumSet是不同步的，不允许值为null的元素。它也提供了一些有用的方法，比如copyOf(Collection c)、of(E first,E…rest)和complementOf(EnumSet s)。</p><h5 id="28-哪些集合类是线程安全的？"><a href="#28-哪些集合类是线程安全的？" class="headerlink" title="28.哪些集合类是线程安全的？"></a>28.哪些集合类是线程安全的？</h5><p>Vector、HashTable、Properties和Stack是同步类，所以它们是线程安全的，可以在多线程环境下使用。Java1.5并发API包括一些集合类，允许迭代时修改，因为它们都工作在集合的克隆上，所以它们在多线程环境中是安全的。</p><h5 id="29-并发集合类是什么？"><a href="#29-并发集合类是什么？" class="headerlink" title="29.并发集合类是什么？"></a>29.并发集合类是什么？</h5><p>Java1.5并发包（java.util.concurrent）包含线程安全集合类，允许在迭代时修改集合。迭代器被设计为fail-fast的，会抛出ConcurrentModificationException。一部分类为：CopyOnWriteArrayList、 ConcurrentHashMap、CopyOnWriteArraySet。</p><h5 id="30-BlockingQueue是什么？"><a href="#30-BlockingQueue是什么？" class="headerlink" title="30.BlockingQueue是什么？"></a>30.BlockingQueue是什么？</h5><p>Java.util.concurrent.BlockingQueue是一个队列，在进行检索或移除一个元素的时候，它会等待队列变为非空；当在添加一个元素时，它会等待队列中的可用空间。BlockingQueue接口是Java集合框架的一部分，主要用于实现生产者-消费者模式。我们不需要担心等待生产者有可用的空间，或消费者有可用的对象，因为它都在BlockingQueue的实现类中被处理了。Java提供了集中BlockingQueue的实现，比如ArrayBlockingQueue、LinkedBlockingQueue、PriorityBlockingQueue,、SynchronousQueue等。</p><h5 id="31-队列和栈是什么，列出它们的区别？"><a href="#31-队列和栈是什么，列出它们的区别？" class="headerlink" title="31.队列和栈是什么，列出它们的区别？"></a>31.队列和栈是什么，列出它们的区别？</h5><p>栈和队列两者都被用来预存储数据。java.util.Queue是一个接口，它的实现类在Java并发包中。队列允许先进先出（FIFO）检索元素，但并非总是这样。Deque接口允许从两端检索元素。</p><p>栈与队列很相似，但它允许对元素进行后进先出（LIFO）进行检索。</p><p>Stack是一个扩展自Vector的类，而Queue是一个接口。</p><h5 id="32-Collections类是什么？"><a href="#32-Collections类是什么？" class="headerlink" title="32.Collections类是什么？"></a>32.Collections类是什么？</h5><p>Java.util.Collections是一个工具类仅包含静态方法，它们操作或返回集合。它包含操作集合的多态算法，返回一个由指定集合支持的新集合和其它一些内容。这个类包含集合框架算法的方法，比如折半搜索、排序、混编和逆序等。</p><h5 id="33-Comparable和Comparator接口是什么？"><a href="#33-Comparable和Comparator接口是什么？" class="headerlink" title="33.Comparable和Comparator接口是什么？"></a>33.Comparable和Comparator接口是什么？</h5><p>如果我们想使用Array或Collection的排序方法时，需要在自定义类里实现Java提供Comparable接口。Comparable接口有compareTo(T OBJ)方法，它被排序方法所使用。我们应该重写这个方法，如果“this”对象比传递的对象参数更小、相等或更大时，它返回一个负整数、0或正整数。但是，在大多数实际情况下，我们想根据不同参数进行排序。比如，作为一个CEO，我想对雇员基于薪资进行排序，一个HR想基于年龄对他们进行排序。这就是我们需要使用Comparator接口的情景，因为Comparable.compareTo(Object o)方法实现只能基于一个字段进行排序，我们不能根据对象排序的需要选择字段。Comparator接口的compare(Object o1, Object o2)方法的实现需要传递两个对象参数，若第一个参数比第二个小，返回负整数；若第一个等于第二个，返回0；若第一个比第二个大，返回正整数。</p><h5 id="34-Comparable和Comparator接口有何区别？"><a href="#34-Comparable和Comparator接口有何区别？" class="headerlink" title="34.Comparable和Comparator接口有何区别？"></a>34.Comparable和Comparator接口有何区别？</h5><p>Comparable和Comparator接口被用来对对象集合或者数组进行排序。Comparable接口被用来提供对象的自然排序，我们可以使用它来提供基于单个逻辑的排序。</p><p>Comparator接口被用来提供不同的排序算法，我们可以选择需要使用的Comparator来对给定的对象集合进行排序。</p><h5 id="35-我们如何对一组对象进行排序？"><a href="#35-我们如何对一组对象进行排序？" class="headerlink" title="35.我们如何对一组对象进行排序？"></a>35.我们如何对一组对象进行排序？</h5><p>如果我们需要对一个对象数组进行排序，我们可以使用Arrays.sort()方法。如果我们需要排序一个对象列表，我们可以使用Collection.sort()方法。两个类都有用于自然排序（使用Comparable）或基于标准的排序（使用Comparator）的重载方法sort()。Collections内部使用数组排序方法，所有它们两者都有相同的性能，只是Collections需要花时间将列表转换为数组。</p><h5 id="36-当一个集合被作为参数传递给一个函数时，如何才可以确保函数不能修改它？"><a href="#36-当一个集合被作为参数传递给一个函数时，如何才可以确保函数不能修改它？" class="headerlink" title="36.当一个集合被作为参数传递给一个函数时，如何才可以确保函数不能修改它？"></a>36.当一个集合被作为参数传递给一个函数时，如何才可以确保函数不能修改它？</h5><p>在作为参数传递之前，我们可以使用Collections.unmodifiableCollection(Collection c)方法创建一个只读集合，这将确保改变集合的任何操作都会抛出UnsupportedOperationException。</p><h5 id="37-我们如何从给定集合那里创建一个synchronized的集合？"><a href="#37-我们如何从给定集合那里创建一个synchronized的集合？" class="headerlink" title="37.我们如何从给定集合那里创建一个synchronized的集合？"></a>37.我们如何从给定集合那里创建一个synchronized的集合？</h5><p>我们可以使用Collections.synchronizedCollection(Collection c)根据指定集合来获取一个synchronized（线程安全的）集合。</p><h5 id="38-集合框架里实现的通用算法有哪些？"><a href="#38-集合框架里实现的通用算法有哪些？" class="headerlink" title="38.集合框架里实现的通用算法有哪些？"></a>38.集合框架里实现的通用算法有哪些？</h5><p>Java集合框架提供常用的算法实现，比如排序和搜索。Collections类包含这些方法实现。大部分算法是操作List的，但一部分对所有类型的集合都是可用的。部分算法有排序、搜索、混编、最大最小值。</p><h5 id="39-大写的O是什么？举几个例子？"><a href="#39-大写的O是什么？举几个例子？" class="headerlink" title="39.大写的O是什么？举几个例子？"></a>39.大写的O是什么？举几个例子？</h5><p>大写的O描述的是，就数据结构中的一系列元素而言，一个算法的性能。Collection类就是实际的数据结构，我们通常基于时间、内存和性能，使用大写的O来选择集合实现。比如：例子1：ArrayList的get(index i)是一个常量时间操作，它不依赖list中元素的数量。所以它的性能是O(1)。例子2：一个对于数组或列表的线性搜索的性能是O(n)，因为我们需要遍历所有的元素来查找需要的元素。</p><h5 id="40-与Java集合框架相关的有哪些最好的实践？"><a href="#40-与Java集合框架相关的有哪些最好的实践？" class="headerlink" title="40.与Java集合框架相关的有哪些最好的实践？"></a>40.与Java集合框架相关的有哪些最好的实践？</h5><p>（1）根据需要选择正确的集合类型。比如，如果指定了大小，我们会选用Array而非ArrayList。如果我们想根据插入顺序遍历一个Map，我们需要使用TreeMap。如果我们不想重复，我们应该使用Set。</p><p>（2）一些集合类允许指定初始容量，所以如果我们能够估计到存储元素的数量，我们可以使用它，就避免了重新哈希或大小调整。</p><p>（3）基于接口编程，而非基于实现编程，它允许我们后来轻易地改变实现。</p><p>（4）总是使用类型安全的泛型，避免在运行时出现ClassCastException。</p><p>（5）使用JDK提供的不可变类作为Map的key，可以避免自己实现hashCode()和equals()。</p><p>（6）尽可能使用Collections工具类，或者获取只读、同步或空的集合，而非编写自己的实现。它将会提供代码重用性，它有着更好的稳定性和可维护性。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​        今天浏览了一下牛客网的许多大佬的面经，发现java基础最爱问的就是java集合，所以今天重温加巩固集合这一块。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="java集合" scheme="http://dumengblog.club/tags/java%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>java多线程-生产者消费者</title>
    <link href="http://dumengblog.club/2019/12/18/java%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85/"/>
    <id>http://dumengblog.club/2019/12/18/java多线程-生产者消费者/</id>
    <published>2019-12-18T12:23:05.000Z</published>
    <updated>2019-12-18T13:29:39.016Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-生产者"><a href="#1-生产者" class="headerlink" title="1.生产者"></a><strong>1.生产者</strong></h4><a id="more"></a><p>作用是生产产品</p><p>生产逻辑：通过一个生产标记，判断是否需要生产产品</p><p>如果需要生产：生产产品，并且通知消费者消费</p><p>如果不需要生产：等待</p><h4 id="2-消费者"><a href="#2-消费者" class="headerlink" title="2.消费者"></a>2.消费者</h4><p>作用是消费产品</p><p>消费逻辑：判断是否有足够的产品可以消费</p><p>如果可以消费：获取产品，进行消费</p><p>如果不可以消费：等待</p><h4 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h4><p>1.Program.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ProducerAndCustomer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Product</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductPool</span> </span>&#123;</span><br><span class="line"><span class="comment">// 存储所有的产品集合，生产者生产产品，往这个集合添加元素，消费者消费产品，从这个集合中取元素</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Product&gt; list;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> maxsize = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ProductPool</span><span class="params">(<span class="keyword">int</span> maxsize)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 对产品进行实例化</span></span><br><span class="line"><span class="keyword">this</span>.list = <span class="keyword">new</span> LinkedList&lt;Product&gt;();</span><br><span class="line"><span class="comment">// 限定产品的最大数量</span></span><br><span class="line"><span class="keyword">this</span>.maxsize = maxsize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生产者将生产好的商品放在商品池</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">Push</span><span class="params">(Product product)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 判断是否还需要生产</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.list.size() == maxsize) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.wait();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将产品放在集合中</span></span><br><span class="line"><span class="keyword">this</span>.list.add(product);</span><br><span class="line"><span class="comment">// 通知其他人，有产品可以消费了</span></span><br><span class="line"><span class="keyword">this</span>.notifyAll();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Product <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 是否可以有商品去消费</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.list.size() == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.wait();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 从商品池中取出一个商品</span></span><br><span class="line">Product product = <span class="keyword">this</span>.list.remove(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 通知所有人，我取出了一个商品</span></span><br><span class="line"><span class="keyword">this</span>.notifyAll();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> product;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Program</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 实例化一个产品池</span></span><br><span class="line">ProductPool pool = <span class="keyword">new</span> ProductPool(<span class="number">10</span>);</span><br><span class="line"><span class="comment">// 实例化一个生产者</span></span><br><span class="line"><span class="keyword">new</span> Productor(pool).start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Consumer(pool).start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.Consumer.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ProducerAndCustomer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> ProductPool pool;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(ProductPool pool)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.pool=pool;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">Product product=<span class="keyword">this</span>.pool.pop();</span><br><span class="line">System.out.println(<span class="string">"消费者消费了一件产品"</span>+product.getName());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.Productor.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ProducerAndCustomer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Productor</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> ProductPool pool;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Productor</span><span class="params">(ProductPool pool)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.pool=pool;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">String name=(<span class="keyword">int</span>) (Math.random()*<span class="number">100</span>)+<span class="string">"号"</span>;</span><br><span class="line">Product product=<span class="keyword">new</span> Product(name);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.pool.Push(product);</span><br><span class="line">System.out.println(<span class="string">"生产者添加了一个产品"</span>+name);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行截图：</p><p><img src="/../asset/image-20191218212923001.png" alt="image-20191218212923001"></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-生产者&quot;&gt;&lt;a href=&quot;#1-生产者&quot; class=&quot;headerlink&quot; title=&quot;1.生产者&quot;&gt;&lt;/a&gt;&lt;strong&gt;1.生产者&lt;/strong&gt;&lt;/h4&gt;
    
    </summary>
    
    
    
      <category term="java多线程" scheme="http://dumengblog.club/tags/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>java多线程-死锁</title>
    <link href="http://dumengblog.club/2019/12/18/java%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E6%AD%BB%E9%94%81/"/>
    <id>http://dumengblog.club/2019/12/18/java多线程-死锁/</id>
    <published>2019-12-18T11:17:44.000Z</published>
    <updated>2019-12-18T11:53:43.152Z</updated>
    
    <content type="html"><![CDATA[<h4 id="首先我们要知道死锁出现的原因："><a href="#首先我们要知道死锁出现的原因：" class="headerlink" title="首先我们要知道死锁出现的原因："></a>首先我们要知道死锁出现的原因：</h4><a id="more"></a><p><strong>synchronized</strong>是Java中的关键字，是一种<strong>同步锁。</strong>它修饰的对象有以下几种：</p><ol><li>修饰一个<strong>代码块</strong>，被修饰的代码块称为<strong>同步语句块</strong>，其作用的范围是大括号{}括起来的代码，作用的对象是调用这个代码块的对象；</li><li>修饰一个<strong>方法</strong>，被修饰的方法称为<strong>同步方法</strong>，其作用的范围是整个方法，作用的对象是调用这个方法的对象</li><li>修改一个<strong>静态方法</strong>，其作用的范围是<strong>整个静态方法</strong>，作用的对象是这个类的所有对象；</li><li>修改一个<strong>类</strong>，其作用的范围是synchronized后面括号括起来的部分，作用主的对象是这个类的所有对象。</li></ol><p>死锁：多个线程彼此持有对方需要的锁，而不释放自己的锁</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Thread;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span> (<span class="string">"A"</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">"A线程有了A锁，等待B锁"</span>);</span><br><span class="line"><span class="keyword">synchronized</span> (<span class="string">"B"</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">"A线程同时有A锁和B锁"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadB</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span> (<span class="string">"B"</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">"B线程有了B锁，等待A锁"</span>);</span><br><span class="line"><span class="keyword">synchronized</span> (<span class="string">"A"</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">"B线程同时有A锁和B锁"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLock</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Thread A=<span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadA(),<span class="string">"ThreadA"</span>);</span><br><span class="line">Thread B=<span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadB(),<span class="string">"ThreadB"</span>);</span><br><span class="line">A.start();</span><br><span class="line">B.start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p>A线程有了A锁，等待B锁<br>B线程有了B锁，等待A锁</p><h4 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h4><p>wait:等待，是Object，中的一个方法，当前的线程释放自己的锁标记，并且让出CPU资源，使得当前线程进入等待队列中。<br>notify：也是Object的一个方法，唤醒等待队列中的一个线程，使这个线程进入锁池；<br>notifyALL：也是Object的一个方法，唤醒等待队列中的所有的线程，使这些线程进入锁池；</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Thread;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span> (<span class="string">"A"</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">"A线程有了A锁，等待B锁"</span>);</span><br><span class="line"><span class="comment">//释放已经持有的A锁标记，并进入等待队列</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="string">"A"</span>.wait();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">synchronized</span> (<span class="string">"B"</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">"A线程同时有A锁和B锁"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadB</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span> (<span class="string">"B"</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">"B线程有了B锁，等待A锁"</span>);</span><br><span class="line"><span class="keyword">synchronized</span> (<span class="string">"A"</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">"B线程同时有A锁和B锁"</span>);</span><br><span class="line"><span class="string">"A"</span>.notifyAll();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLock</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Thread A=<span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadA(),<span class="string">"ThreadA"</span>);</span><br><span class="line">Thread B=<span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadB(),<span class="string">"ThreadB"</span>);</span><br><span class="line">A.start();</span><br><span class="line">B.start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;首先我们要知道死锁出现的原因：&quot;&gt;&lt;a href=&quot;#首先我们要知道死锁出现的原因：&quot; class=&quot;headerlink&quot; title=&quot;首先我们要知道死锁出现的原因：&quot;&gt;&lt;/a&gt;首先我们要知道死锁出现的原因：&lt;/h4&gt;
    
    </summary>
    
    
    
      <category term="java多线程" scheme="http://dumengblog.club/tags/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>java多线程——临界资源问题及解决方案</title>
    <link href="http://dumengblog.club/2019/12/18/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%B4%E7%95%8C%E8%B5%84%E6%BA%90%E9%97%AE%E9%A2%98/"/>
    <id>http://dumengblog.club/2019/12/18/java多线程临界资源问题/</id>
    <published>2019-12-18T09:17:28.000Z</published>
    <updated>2019-12-18T09:56:16.914Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-产生原因"><a href="#1-产生原因" class="headerlink" title="1.产生原因"></a>1.产生原因</h4><a id="more"></a><p>​    临界资源：被多个线程同时访问的资源<br>​    如果有多个线程同时访问同一份资源，这个资源对应的值有可能会出现值不准确的情况。临界资源产生的原因：在多个线程访问同一份资源的时候，如果一个线程在取值的过程中，时间片又被其他线程抢走了，临界资源问题就产生了</p><p>此处给出一个卖票的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SourceConfilct</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="comment">// 演示临界资源问题</span></span><br><span class="line"><span class="comment">// 某个景点有4个售票员在卖票</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SourceConfilct s = <span class="keyword">new</span> SourceConfilct();</span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(s);</span><br><span class="line">t1.setName(<span class="string">"售票员1"</span>);</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(s);</span><br><span class="line">t2.setName(<span class="string">"售票员2"</span>);</span><br><span class="line">Thread t3 = <span class="keyword">new</span> Thread(s);</span><br><span class="line">t3.setName(<span class="string">"售票员3"</span>);</span><br><span class="line">Thread t4 = <span class="keyword">new</span> Thread(s);</span><br><span class="line">t4.setName(<span class="string">"售票员4"</span>);</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t3.start();</span><br><span class="line">t4.start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">while</span> (TicketCenter.restCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">"卖出一张票剩余："</span></span><br><span class="line">+ --TicketCenter.restCount + <span class="string">"张"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TicketCenter</span> </span>&#123;</span><br><span class="line"><span class="comment">// 描述剩余票的数量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> restCount = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​     运行结果：<img src="/../asset/image-20191218172108257.png" alt="image-20191218172108257"></p><p>此时的结果明显不是我们想要的， 因此，需要采用同步机制解决这种问题。</p><h4 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2.解决方法"></a>2.解决方法</h4><h5 id="1-加上synchronized关键字"><a href="#1-加上synchronized关键字" class="headerlink" title="1.加上synchronized关键字"></a>1.加上synchronized关键字</h5><p>   synchronized关键字主要有两种用法(synchronized 方法和synchronized块)，此外该关键字还可以作用于静态方法、类或某个实例，但这都对程序的效率有很大的影响。</p><h6 id="1-synchronized-方法。"><a href="#1-synchronized-方法。" class="headerlink" title="1) synchronized 方法。"></a>1) synchronized 方法。</h6><p>在方法的声明前加人synchronized关键字，示例如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">mutiThreadAccess</span><span class="params">( )</span></span>;</span><br></pre></td></tr></table></figure><p>   只要把多个线程对类需要被同步的资源的操作放到mutiThreadAccess( )方法中，就能保这个方法在同一时刻只能被一个线程访问， 从而保证了多线程访问的安全性。然而，当一个法的方法体规模非常大时，把该方法声明为synchronized会大大影响程序的执行效率。为了高程序的效率，Java 提供了synchronized块。</p><p>代码：</p><p>只修改实现Runnable接口的run方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">while</span> (TicketCenter.restCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//对象锁</span></span><br><span class="line"><span class="comment">//类锁</span></span><br><span class="line"><span class="comment">//需要保证一点，多个对象看到的锁，需要是同一把锁</span></span><br><span class="line"><span class="keyword">synchronized</span>(<span class="string">""</span>)&#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">"卖出一张票剩余："</span></span><br><span class="line">+ --TicketCenter.restCount + <span class="string">"张"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src="/../asset/image-20191218173324370.png" alt="image-20191218173324370" style="zoom:67%;"><p>可以看到输出结果大致和我们所需相同但是多出了-1，-2，-3，这个是不满足我们的要求的</p><p>因为当你加了synchronized(“ “)后，线程看到锁后需要等待，所以当满足了TicketCenter.restCount &gt; 0，还会有三个线程正在等待执行。只需再加一个判断条件即可。</p><p>全部代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SourceConfilct</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="comment">// 演示临界资源问题</span></span><br><span class="line"><span class="comment">// 某个景点有4个售票员在卖票</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SourceConfilct s = <span class="keyword">new</span> SourceConfilct();</span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(s);</span><br><span class="line">t1.setName(<span class="string">"售票员1"</span>);</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(s);</span><br><span class="line">t2.setName(<span class="string">"售票员2"</span>);</span><br><span class="line">Thread t3 = <span class="keyword">new</span> Thread(s);</span><br><span class="line">t3.setName(<span class="string">"售票员3"</span>);</span><br><span class="line">Thread t4 = <span class="keyword">new</span> Thread(s);</span><br><span class="line">t4.setName(<span class="string">"售票员4"</span>);</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t3.start();</span><br><span class="line">t4.start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">while</span> (TicketCenter.restCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//对象锁</span></span><br><span class="line"><span class="comment">//类锁</span></span><br><span class="line"><span class="comment">//需要保证一点，多个对象看到的锁，需要是同一把锁</span></span><br><span class="line"><span class="keyword">synchronized</span>(<span class="string">""</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(TicketCenter.restCount&lt;=<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">"卖出一张票剩余："</span></span><br><span class="line">+ --TicketCenter.restCount + <span class="string">"张"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TicketCenter</span> </span>&#123;</span><br><span class="line"><span class="comment">// 描述剩余票的数量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> restCount = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2-synchronized-块。"><a href="#2-synchronized-块。" class="headerlink" title="2) synchronized 块。"></a>2) synchronized 块。</h6><p>synchronized 块既可以把任意的代码段声明为synchronized, 也可以定上锁的对象，有非常高的灵活性。其用法如下:  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>( syncObject) &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//访问syncObjet的代码 </span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SourseConflict</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="comment">// 演示临界资源问题</span></span><br><span class="line"><span class="comment">// 某个景点有4个售票员在卖票</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SourceConfilct s = <span class="keyword">new</span> SourceConfilct();</span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(s);</span><br><span class="line">t1.setName(<span class="string">"售票员1"</span>);</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(s);</span><br><span class="line">t2.setName(<span class="string">"售票员2"</span>);</span><br><span class="line">Thread t3 = <span class="keyword">new</span> Thread(s);</span><br><span class="line">t3.setName(<span class="string">"售票员3"</span>);</span><br><span class="line">Thread t4 = <span class="keyword">new</span> Thread(s);</span><br><span class="line">t4.setName(<span class="string">"售票员4"</span>);</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t3.start();</span><br><span class="line">t4.start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">while</span> (TicketCenter.restCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">sellticket();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sellticket</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (TicketCenter.restCount &lt;= <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">"卖出一张票剩余："</span></span><br><span class="line">+ --TicketCenter.restCount + <span class="string">"张"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TicketCenter</span> </span>&#123;</span><br><span class="line"><span class="comment">// 描述剩余票的数量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> restCount = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-Lock"><a href="#2-Lock" class="headerlink" title="2. Lock"></a>2. Lock</h5><p>JDK5里新增一个Lock接口以及它的一个实现类ReentrantLock(重入锁),Lock也可以用来实现多线程的同步。</p><p>直接上代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SourceConlictResolve</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="comment">// 演示临界资源问题</span></span><br><span class="line"><span class="comment">// 某个景点有4个售票员在卖票</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SourceConlictResolve s = <span class="keyword">new</span> SourceConlictResolve();</span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(s);</span><br><span class="line">t1.setName(<span class="string">"售票员1"</span>);</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(s);</span><br><span class="line">t2.setName(<span class="string">"售票员2"</span>);</span><br><span class="line">Thread t3 = <span class="keyword">new</span> Thread(s);</span><br><span class="line">t3.setName(<span class="string">"售票员3"</span>);</span><br><span class="line">Thread t4 = <span class="keyword">new</span> Thread(s);</span><br><span class="line">t4.setName(<span class="string">"售票员4"</span>);</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t3.start();</span><br><span class="line">t4.start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">ReentrantLock lock=<span class="keyword">new</span> ReentrantLock();</span><br><span class="line"><span class="keyword">while</span> (ticketsold.restCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">lock.lock();</span><br><span class="line"><span class="keyword">if</span>(ticketsold.restCount &lt;=<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">"卖出一张票剩余："</span></span><br><span class="line">+ --ticketsold.restCount + <span class="string">"张"</span>);</span><br><span class="line">lock.unlock();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ticketsold</span> </span>&#123;</span><br><span class="line"><span class="comment">// 描述剩余票的数量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> restCount = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-产生原因&quot;&gt;&lt;a href=&quot;#1-产生原因&quot; class=&quot;headerlink&quot; title=&quot;1.产生原因&quot;&gt;&lt;/a&gt;1.产生原因&lt;/h4&gt;
    
    </summary>
    
    
    
      <category term="java多线程" scheme="http://dumengblog.club/tags/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>java多线程—-常用方法</title>
    <link href="http://dumengblog.club/2019/12/17/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E2%80%94-%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://dumengblog.club/2019/12/17/java多线程—-常用方法/</id>
    <published>2019-12-17T13:45:27.000Z</published>
    <updated>2019-12-18T09:12:37.874Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-getName"><a href="#1-getName" class="headerlink" title="1.getName()"></a>1.getName()</h4><p>返回该线程的名字，如果没有设置名字，会返回默认名字</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadMethod</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">":"</span>+i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Thread t1=<span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadMethod());</span><br><span class="line">t1.setName(<span class="string">"thread1"</span>);</span><br><span class="line">Thread t2=<span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadMethod());</span><br><span class="line">t2.setName(<span class="string">"thread2"</span>);</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../asset/image-20191218170049421.png" alt="image-20191218170049421"></p><h4 id="2-sleep-线程休眠"><a href="#2-sleep-线程休眠" class="headerlink" title="2.sleep():线程休眠"></a>2.sleep():线程休眠</h4><p>线程休眠：线程暂缓执行，等到预计时间再执行。<br>线程休眠会交出CPU，让CPU去执行其他的任务。但是有一点要非常注意，sleep 方法不会释放锁，也就是说如果当前线程持有对某个对象的锁，则即使调用sleep方法，其他线程也无法访问这个对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadMethod</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">":"</span>+i);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Thread t1=<span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadMethod());</span><br><span class="line">t1.setName(<span class="string">"thread1"</span>);</span><br><span class="line">t1.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果就是一秒输出一段文字</p><p><img src="/../asset/image-20191218170522157.png" alt="image-20191218170522157"></p><h4 id="3-isAlive-测试线程是否在活动状态"><a href="#3-isAlive-测试线程是否在活动状态" class="headerlink" title="3.isAlive():测试线程是否在活动状态"></a>3.isAlive():测试线程是否在活动状态</h4><p><img src="/../asset/image-20191218170645039.png" alt="image-20191218170645039"></p><h4 id="4-yield-：暂停当前的线程，执行其他的线程"><a href="#4-yield-：暂停当前的线程，执行其他的线程" class="headerlink" title="4.yield()：暂停当前的线程，执行其他的线程"></a>4.yield()：暂停当前的线程，执行其他的线程</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadMethod</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+<span class="string">":"</span>+i);</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">5</span>)&#123;</span><br><span class="line">Thread.yield();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Thread t1=<span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadMethod(),<span class="string">"thread1"</span>);</span><br><span class="line">Thread t2=<span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadMethod(),<span class="string">"thread2"</span>);</span><br><span class="line"></span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">System.out.println(<span class="string">"线程是否在活动："</span>+t1.isAlive());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/../asset/image-20191218170952107.png" alt="image-20191218170952107" style="zoom:67%;"><h4 id="5-setPriority-：设置线程的优先级"><a href="#5-setPriority-：设置线程的优先级" class="headerlink" title="5.setPriority()：设置线程的优先级"></a>5.setPriority()：设置线程的优先级</h4><p>线程执行顺序也是按照设定的优先级执行的。</p><p><img src="/../asset/image-20191218171218238.png" alt="image-20191218171218238"></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-getName&quot;&gt;&lt;a href=&quot;#1-getName&quot; class=&quot;headerlink&quot; title=&quot;1.getName()&quot;&gt;&lt;/a&gt;1.getName()&lt;/h4&gt;&lt;p&gt;返回该线程的名字，如果没有设置名字，会返回默认名字&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="java多线程" scheme="http://dumengblog.club/tags/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>java多线程—-三种线程的开辟方式</title>
    <link href="http://dumengblog.club/2019/12/17/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E2%80%94-%E5%B8%B8%E8%A7%81%E7%9A%84%E4%B8%A4%E7%A7%8D%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%BC%80%E8%BE%9F%E6%96%B9%E5%BC%8F/"/>
    <id>http://dumengblog.club/2019/12/17/java多线程—-常见的两种线程的开辟方式/</id>
    <published>2019-12-17T12:09:02.000Z</published>
    <updated>2019-12-17T12:23:32.478Z</updated>
    
    <content type="html"><![CDATA[<p>对于所有语言来说，多线程的编程是绝不可少的。同样的Java语言也包含了多线程的开发。首先，我们先来了解一下Java语言的多线程实现方式。</p><a id="more"></a><p>一、Java 多线程实现方式</p><p>java中实现多线程的方式有三种，接下来我将会逐个进行介绍。</p><p><strong>1.继承Thread类</strong></p><p>继承Thread类是Java中比较常见，也是很基础的一种实现Java多线程的方式。实现的方式也比较简单，只要将需要实现多线程的Java类继承java.lang.Thread类，重写run（）方法即可。</p><p><strong>2.实现Runnable接口</strong></p><p>1.实现Runnable接口，并且实现run（）方法。</p><p>2.创建Thread对象，用实现Runnable接口的对象作为参数实例化该对象</p><p>3.调用Thread的start（）方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreadTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//线程实例化</span></span><br><span class="line"><span class="comment">//1.继承Thread类，做一个线程子类</span></span><br><span class="line">Mythread mt=<span class="keyword">new</span> Mythread();</span><br><span class="line"><span class="comment">//注意</span></span><br><span class="line"><span class="comment">//需要调用start（）方法，使线程启动</span></span><br><span class="line"><span class="comment">//start方法会开启一个新的线程，来执行run中的逻辑</span></span><br><span class="line"><span class="comment">//如果直接调用run（）方法，则线程不会进入到就绪状态</span></span><br><span class="line">mt.start();</span><br><span class="line">System.out.println(<span class="string">"主线程逻辑结束了"</span>);</span><br><span class="line"><span class="comment">//2.实现runnable接口</span></span><br><span class="line">Mythread2 mt2=<span class="keyword">new</span> Mythread2();</span><br><span class="line">Thread t=<span class="keyword">new</span> Thread(mt2);</span><br><span class="line">t.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *这是一个自定义的线程类 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mythread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 需要重写run方法</span></span><br><span class="line"><span class="comment"> * 将需要并发执行的方法写到run方法当中</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">System.out.println(<span class="string">"子线程中的逻辑："</span>+i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mythread2</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 需要重写run方法</span></span><br><span class="line"><span class="comment"> * 将需要并发执行的方法写到run方法当中</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">System.out.println(<span class="string">"子线程2中的逻辑："</span>+i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.实现Callable接口，重写call（）方法</p><p>Callable是属于Executor框架中的功能类，与Runnable接口相似，但是有比Runnable更强大的功能：</p><p> 1) Callable 可以在任务结束后提供- 个返回值，Runnable 无法提供这个功能。</p><p> 2) Callable 中的call( )方法可以抛出异常，而Runnable的run( )方法不能抛出异常。</p><p> 3)运行Callable可以拿到一个Future 对象，Future对象表示异步计算的结果，它提供了检查计算是否完成的方法。由于线程属于异步计算模型，因此无法从别的线程中得到函数的返回值，在这种情况下，就可以使用Future来监视目标线程调用call()方法的情况，当调用Future 的get( )方法以获取结果时，当前线程就会阻塞，直到ell )方法结束返回结果。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于所有语言来说，多线程的编程是绝不可少的。同样的Java语言也包含了多线程的开发。首先，我们先来了解一下Java语言的多线程实现方式。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="java多线程" scheme="http://dumengblog.club/tags/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>java多线程—-线程的生命周期</title>
    <link href="http://dumengblog.club/2019/12/17/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E2%80%94-%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://dumengblog.club/2019/12/17/java多线程—-线程的生命周期/</id>
    <published>2019-12-17T04:26:08.000Z</published>
    <updated>2019-12-17T11:37:33.484Z</updated>
    
    <content type="html"><![CDATA[<p>一、线程的生命周期总结下来分为以下五种：</p><a id="more"></a><p>（1）新建：当一个Thread类或其子类的对象被声明并创建时。新生的线程对象属于新建状态。</p><p>（2）就绪：处于新建状态的线程执行start()方法后，进入线程队列等待CPU时间片，该状态具备了运行的状态，只是没有分配到CPU资源。</p><p>（3）运行：当就绪的线程分配到CPU资源便进入运行状态，run()方法定义了线程的操作。</p><p>（4）阻塞：在某种特殊情况下，被人为挂起或执行输入输出操作时，让出CPU并临时终止自己的的执行，进入阻塞状态。</p><p>（5）死亡：当线程执行完自己的操作或提前被强制性的终止或出现异常导致结束，会进入死亡状态。</p> <img src="/../asset/1622073-20190704084639126-898750435.png" alt="img" style="zoom:67%;"> ]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一、线程的生命周期总结下来分为以下五种：&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="java多线程" scheme="http://dumengblog.club/tags/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>java多线程—-进程和线程</title>
    <link href="http://dumengblog.club/2019/12/17/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E2%80%94-%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/"/>
    <id>http://dumengblog.club/2019/12/17/java多线程—-进程和线程/</id>
    <published>2019-12-17T04:05:22.000Z</published>
    <updated>2019-12-17T04:16:49.940Z</updated>
    
    <content type="html"><![CDATA[<p>下面是抽象类比：</p><a id="more"></a><p>单CPU：一台单核处理器计算机 = 一个车间；<br>多CPU：一台多核处理器计算机 = 一座工厂；</p><p>进程：一个车间 = 一个进程； （即一个运行的程序）</p><p>多进程：一座工厂可以同时运行多个车间；<br>CPU和进程：单CPU只能同时运行单个进程，多CPU可以同时运行多个进程。</p><p>线程：车间内一个工人 = 一个线程；<br>进程与线程：一个进程可以包括多个线程。</p><p>线程间内存共享：车间的空间是工人们共享的，比如许多房间是每个工人都可以进出的。<br>一个进程的内存空间是共享的，每个线程都可以使用这些共享内存。</p><p>内存安全：可是，每个车间容纳大小不同，有的最多只能容纳一个人。车间人满的时候，其他人就进不去了。<br>一个线程使用某些共享内存时，其他线程必须等它结束，才能使用这一块内存。</p><p>互斥锁：一个防止他人进入的简单方法，就是门口加一把锁。先到的人锁上门，后到的人看到上锁，就在门口排队，等锁打开再进去。<br>这就叫”互斥锁”–Mutex，防止两个线程同时读写某一块内存区域。</p><p>信号量：这时的解决方法，就是在门口挂n把钥匙。进去的人就取一把钥匙，出来时再把钥匙挂回原处。后到的人发现钥匙架空了，就知道必须在门口排队等着了。<br>这种做法叫做”信号量”（Semaphore），用来保证多个线程不会互相冲突。</p><p>锁和信号量：不难看出，互斥锁是信号量的一种特殊情况（n=1时）。也就是说，完全可以用后者替代前者。但是，因为mutex较为简单，且效率高，所以在必须保证资源独占的情况下，还是采用这种设计。</p><p>操作系统的资源分配与调度逻辑</p><p>以多进程形式，允许多个任务同时运行；<br>以多线程形式，允许单个任务分成不同的部分运行；<br>提供协调机制，一方面防止进程之间和线程之间产生冲突，另一方面允许进程之间和线程之间共享资源。<br>下面是严谨的解释：<br>进程<br>进程是程序的一次执行过程，是一个动态概念，是程序在执行过程中分配和管理资源的基本单位，每一个进程都有一个自己的地址空间，至少有 5 种基本状态，它们是：初始态，执行态，等待状态，就绪状态，终止状态。</p><p>线程<br>线程是CPU调度和分派的基本单位，它可与同属一个进程的其他的线程共享进程所拥有的全部资源。</p><p>进程和线程的关系<br>线程是进程的一部分<br>一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程</p><p>进程和线程的区别<br>理解它们的差别，我从资源使用的角度出发。（所谓的资源就是计算机里的中央处理器，内存，文件，网络等等）</p><p>根本区别：进程是操作系统资源分配的基本单位，而线程是任务调度和执行的基本单位</p><p>开销方面：每个进程都有独立的代码和数据空间（程序上下文），进程之间切换开销大；线程可以看做轻量级的进程，同一类线程共享代码和数据空间，每个线程都有自己独立的运行栈和程序计数器（PC），线程之间切换的开销小</p><p>所处环境：在操作系统中能同时运行多个进程（程序）；而在同一个进程（程序）中有多个线程同时执行（通过CPU调度，在每个时间片中只有一个线程执行）</p><p>内存分配：系统在运行的时候会为每个进程分配不同的内存空间；而对线程而言，除了CPU外，系统不会为线程分配内存（线程所使用的资源来自其所属进程的资源），线程组之间只能共享资源</p><p>包含关系：没有线程的进程可以看做是单线程的，如果一个进程内有多个线程，则执行过程不是一条线的，而是多条线（线程）共同完成的；线程是进程的一部分，所以线程也被称为轻权进程或者轻量级进程</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;下面是抽象类比：&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="java多线程" scheme="http://dumengblog.club/tags/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>java多线程—-并行和并发</title>
    <link href="http://dumengblog.club/2019/12/17/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E2%80%94-%E4%B8%B2%E8%A1%8C%E5%92%8C%E5%B9%B6%E5%8F%91/"/>
    <id>http://dumengblog.club/2019/12/17/java多线程—-串行和并发/</id>
    <published>2019-12-17T03:53:34.000Z</published>
    <updated>2019-12-17T04:04:55.023Z</updated>
    
    <content type="html"><![CDATA[<p>并发和并行的区别：</p><a id="more"></a><p><strong>并发</strong>：一个应用程序如果可以开启多个线程让多个线程同时存在，但是交替执行（比如在单核处理器上）则他称之为并发执行。</p><p><strong>并行</strong>：一个应用程序能并行执行，那么就一定是运行在多核处理器上。此时，程序中的每个线程都将分配到一个独立的处理器核上，因此可以同时运行。</p><p>图解：</p><p><img src="/../asset/image-20191217120358276.png" alt="image-20191217120358276"></p><p><img src="/../asset/image-20191217120324680.png" alt="image-20191217120324680"></p><p><img src="/../asset/image-20191217120339978.png" alt="image-20191217120339978"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;并发和并行的区别：&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="java多线程" scheme="http://dumengblog.club/tags/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>如何输出字符串的所有组合</title>
    <link href="http://dumengblog.club/2019/12/16/%E5%A6%82%E4%BD%95%E8%BE%93%E5%87%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%89%80%E6%9C%89%E7%BB%84%E5%90%88/"/>
    <id>http://dumengblog.club/2019/12/16/如何输出字符串的所有组合/</id>
    <published>2019-12-16T11:25:15.000Z</published>
    <updated>2019-12-16T12:24:39.410Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1.题目描述"></a>1.题目描述</h4><a id="more"></a><p>假设字符串中的所有字符都不重复，如何输出字符串中的所有组合?</p><p>例如输入:</p><p>“abc“，则输出a , b , c , ab , ac , bc , abc 共七种组合。</p><h4 id="2-解题分析"><a href="#2-解题分析" class="headerlink" title="2.解题分析"></a>2.解题分析</h4><p>本题可以使用递归方法，遍历字符串，每个字符只能取或不取。若取该字符，就把它放到字符串中，遍历完毕后，输出结果字符串。</p><h4 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 输出字符串的所有组合 </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CombineRecursiveImpl</span><span class="params">(<span class="keyword">char</span>[]c,<span class="keyword">int</span> begin,<span class="keyword">int</span> len,StringBuffer sb)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(len==<span class="number">0</span>)&#123;</span><br><span class="line">System.out.println(sb+<span class="string">" "</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(begin==c.length)&#123;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">sb.append(c[begin]);</span><br><span class="line">CombineRecursiveImpl(c, begin+<span class="number">1</span>, len-<span class="number">1</span>, sb);</span><br><span class="line">sb.deleteCharAt(sb.length()-<span class="number">1</span>);</span><br><span class="line">CombineRecursiveImpl(c, begin+<span class="number">1</span>, len, sb);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String s=<span class="string">"abc"</span>;</span><br><span class="line"><span class="keyword">char</span>[]c=s.toCharArray();</span><br><span class="line">StringBuffer sb=<span class="keyword">new</span> StringBuffer(<span class="string">" "</span>);</span><br><span class="line"><span class="keyword">int</span> len=c.length;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++)&#123;</span><br><span class="line">CombineRecursiveImpl(c, <span class="number">0</span>, i, sb);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-题目描述&quot;&gt;&lt;a href=&quot;#1-题目描述&quot; class=&quot;headerlink&quot; title=&quot;1.题目描述&quot;&gt;&lt;/a&gt;1.题目描述&lt;/h4&gt;
    
    </summary>
    
    
    
      <category term="算法" scheme="http://dumengblog.club/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>如何删除字符串中重复的字符</title>
    <link href="http://dumengblog.club/2019/12/16/%E5%A6%82%E4%BD%95%E5%88%A0%E9%99%A4%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E5%AD%97%E7%AC%A6/"/>
    <id>http://dumengblog.club/2019/12/16/如何删除字符串中重复的字符/</id>
    <published>2019-12-16T10:46:15.000Z</published>
    <updated>2019-12-16T11:15:01.138Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1.题目描述"></a>1.题目描述</h4><a id="more"></a><p>删除字符串中重复的字符，例如“good”去掉重复的字符后就变为god</p><h4 id="2-解题分析"><a href="#2-解题分析" class="headerlink" title="2. 解题分析"></a>2. 解题分析</h4><p>新建一个StringBuffer类型字符串，两个while循环，一个用来给StringBuffer添加字符，另一个用来判断是否重复。</p><h4 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 如何删除字符串中重复的字符 </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">removerepeatedchar</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s == <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line"></span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, len = s.length();</span><br><span class="line"><span class="keyword">while</span> (i &lt; len) &#123;</span><br><span class="line"><span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line">sb.append(c);</span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">while</span> (i &lt; len &amp;&amp; s.charAt(i) == c) &#123;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String s = <span class="string">"aabbb"</span>;</span><br><span class="line">System.out.println(removerepeatedchar(s));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-题目描述&quot;&gt;&lt;a href=&quot;#1-题目描述&quot; class=&quot;headerlink&quot; title=&quot;1.题目描述&quot;&gt;&lt;/a&gt;1.题目描述&lt;/h4&gt;
    
    </summary>
    
    
    
      <category term="算法" scheme="http://dumengblog.club/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>如何判断两个字符由相同的字符串组成</title>
    <link href="http://dumengblog.club/2019/12/15/%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E4%B8%A4%E4%B8%AA%E5%AD%97%E7%AC%A6%E7%94%B1%E7%9B%B8%E5%90%8C%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BB%84%E6%88%90/"/>
    <id>http://dumengblog.club/2019/12/15/如何判断两个字符由相同的字符串组成/</id>
    <published>2019-12-15T13:21:41.000Z</published>
    <updated>2019-12-15T13:26:17.438Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1.问题描述"></a>1.问题描述</h4><a id="more"></a><p>由相同的字符组成是指组成两个字符串的字母以及各个字母的个数是一样的，只是排列顺序不同。</p><p>例如 “aba”和“aab”就是相同的数组</p><h4 id="2-解题分析"><a href="#2-解题分析" class="headerlink" title="2.解题分析"></a>2.解题分析</h4><p>首先，我们可以将字符串改成byte类型的数组进行排序，然后在进行对比，看是否相等。</p><h4 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 如何判断两个字符串是否有相同的字符串组成 </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">stringIssame</span><span class="params">(String s1,String s2)</span></span>&#123;</span><br><span class="line"><span class="keyword">byte</span>[]b1 = s1.getBytes();</span><br><span class="line"><span class="keyword">byte</span>[]b2=s2.getBytes();</span><br><span class="line">Arrays.sort(b1);</span><br><span class="line">Arrays.sort(b2);</span><br><span class="line">s1=<span class="keyword">new</span> String(b1);</span><br><span class="line">s2=<span class="keyword">new</span> String(b2);</span><br><span class="line"><span class="keyword">if</span>(s1.equals(s2))</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String s1=<span class="string">"aba"</span>;</span><br><span class="line">String s2=<span class="string">"aab"</span>;</span><br><span class="line">System.out.println(stringIssame(s1, s2));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-问题描述&quot;&gt;&lt;a href=&quot;#1-问题描述&quot; class=&quot;headerlink&quot; title=&quot;1.问题描述&quot;&gt;&lt;/a&gt;1.问题描述&lt;/h4&gt;
    
    </summary>
    
    
    
      <category term="算法" scheme="http://dumengblog.club/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
