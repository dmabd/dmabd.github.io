<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dumeng&#39;s Blog</title>
  
  <subtitle>writedown everything</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://dumengblog.club/"/>
  <updated>2019-12-10T13:15:29.916Z</updated>
  <id>http://dumengblog.club/</id>
  
  <author>
    <name>dumeng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何把一个数组循环右移K位</title>
    <link href="http://dumengblog.club/2019/12/10/%E5%A6%82%E4%BD%95%E6%8A%8A%E4%B8%80%E4%B8%AA%E6%95%B0%E7%BB%84%E5%BE%AA%E7%8E%AF%E5%8F%B3%E7%A7%BBK%E4%BD%8D/"/>
    <id>http://dumengblog.club/2019/12/10/如何把一个数组循环右移K位/</id>
    <published>2019-12-10T13:01:22.000Z</published>
    <updated>2019-12-10T13:15:29.916Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1.题目描述"></a>1.题目描述</h4><a id="more"></a><p>把数组序列[1,2,3,4,5,6,7,8]右移两位变为[7, 8, 1, 2, 3, 4, 5, 6]</p><h4 id="2-解题分析"><a href="#2-解题分析" class="headerlink" title="2.解题分析"></a>2.解题分析</h4><p>首先将数组分为两段数组序列：</p><p>[1, 2, 3, 4, 5, 6]</p><p>[7, 8]</p><ol><li><p>首先先将第一段数组序列反转</p><p>[6，5，4，3，2，1，7，8]</p></li><li><p>再将第二段数组序列反转</p><p>[6，5，4，3，2，1，8,   7]</p></li><li><p>再将整个数组反转即得到结果</p><p>[7, 8, 1, 2, 3, 4, 5, 6]</p></li></ol><h4 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 如何把一个数组循环右移<span class="title">K</span>位 </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span>[]a ,<span class="keyword">int</span> begin,<span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(begin&lt;end)&#123;</span><br><span class="line"><span class="keyword">int</span> tmp=a[begin];</span><br><span class="line">a[begin]=a[end];</span><br><span class="line">a[end]=tmp;</span><br><span class="line">begin++;</span><br><span class="line">end--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shiftK</span><span class="params">(<span class="keyword">int</span>[]a,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n=a.length;</span><br><span class="line">k=k%n;</span><br><span class="line">reverse(a, n-k, n-<span class="number">1</span>);</span><br><span class="line">reverse(a,<span class="number">0</span>,n-k-<span class="number">1</span>);</span><br><span class="line">reverse(a,<span class="number">0</span>,n-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> []a=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;;</span><br><span class="line">System.out.println(Arrays.toString(a));</span><br><span class="line">shiftK(a, <span class="number">2</span>);</span><br><span class="line">System.out.println(Arrays.toString(a));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-题目描述&quot;&gt;&lt;a href=&quot;#1-题目描述&quot; class=&quot;headerlink&quot; title=&quot;1.题目描述&quot;&gt;&lt;/a&gt;1.题目描述&lt;/h4&gt;
    
    </summary>
    
    
    
      <category term="算法" scheme="http://dumengblog.club/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>如何求数组中两两相加等于max的组合种数</title>
    <link href="http://dumengblog.club/2019/12/10/%E5%A6%82%E4%BD%95%E6%B1%82%E6%95%B0%E7%BB%84%E4%B8%AD%E4%B8%A4%E4%B8%A4%E7%9B%B8%E5%8A%A0%E7%AD%89%E4%BA%8E20%E7%9A%84%E7%BB%84%E5%90%88%E7%A7%8D%E6%95%B0/"/>
    <id>http://dumengblog.club/2019/12/10/如何求数组中两两相加等于20的组合种数/</id>
    <published>2019-12-10T12:13:42.000Z</published>
    <updated>2019-12-10T12:31:51.997Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1. 问题描述"></a>1. 问题描述</h4><a id="more"></a><p>给定一个数组[7,3,4,8,1], max=9 </p><p>这个数组中满足条件的组合为8,1</p><p>则输出 8,1</p><h4 id="2-问题解析"><a href="#2-问题解析" class="headerlink" title="2.问题解析"></a>2.问题解析</h4><p>方法1：“蛮力”法</p><p>两重循环判断两个数的和是否为max，时间复杂度为O(n²)</p><p>方法2：排序法</p><p>先对数组元素进行排序，此算法的时间复杂度为O(nlogn)，对排序后的数组分别从前到后和从后向前遍历，当满足a[start]+a[end]&gt;max ，如果存在两个数的和等于max则一定在[start,end+1]之间，当满足a[start]+a[end]&lt;max ，如果存在两个数的和等于max则一定在[start+1,end]之间.</p><h4 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 求数组中两两相加等于20的组合种数 </span>&#123;</span><br><span class="line"><span class="comment">//蛮力法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">findSumNumber</span><span class="params">(<span class="keyword">int</span> []a,<span class="keyword">int</span> max)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;a.length;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]+a[j]==max)&#123;</span><br><span class="line"><span class="keyword">return</span> a[i]+<span class="string">" "</span>+a[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//排序法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">findSumNumber1</span><span class="params">(<span class="keyword">int</span> []a,<span class="keyword">int</span> max)</span></span>&#123;</span><br><span class="line">Arrays.sort(a);</span><br><span class="line"><span class="keyword">int</span> start=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> end=a.length-<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(start&lt;end)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[start]+a[end]&gt;max)&#123;</span><br><span class="line">end--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[start]+a[end]&lt;max)&#123;</span><br><span class="line">start++;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(a[start]+<span class="string">" "</span>+a[end]);</span><br><span class="line">start++;</span><br><span class="line">end--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> []a=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">7</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">1</span>&#125;;</span><br><span class="line">System.out.println(findSumNumber(a, <span class="number">9</span>));</span><br><span class="line">findSumNumber1(a, <span class="number">9</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-问题描述&quot;&gt;&lt;a href=&quot;#1-问题描述&quot; class=&quot;headerlink&quot; title=&quot;1. 问题描述&quot;&gt;&lt;/a&gt;1. 问题描述&lt;/h4&gt;
    
    </summary>
    
    
    
      <category term="算法" scheme="http://dumengblog.club/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>leetcode5_最长回文串</title>
    <link href="http://dumengblog.club/2019/12/10/leetcode5-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E4%B8%B2/"/>
    <id>http://dumengblog.club/2019/12/10/leetcode5-最长回文串/</id>
    <published>2019-12-10T05:47:40.000Z</published>
    <updated>2019-12-10T06:01:25.380Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1.题目描述"></a>1.题目描述</h4><a id="more"></a><p>给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。</p><p>示例 1：</p><p>输入: “babad”<br>输出: “bab”<br>注意: “aba” 也是一个有效答案。</p><p>示例 2：</p><p>输入: “cbbd”<br>输出: “bb”</p><h4 id="2-解题分析"><a href="#2-解题分析" class="headerlink" title="2.解题分析"></a>2.解题分析</h4><p>首先这里需要利用substring（）这个方法</p><p> substring() 方法返回字符串的子字符串。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public String substring(int beginIndex, int endIndex)</span><br></pre></td></tr></table></figure><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul><li><p><strong>beginIndex</strong> – 起始索引（包括）, 索引从 0 开始。</p></li><li><p><strong>endIndex</strong> – 结束索引（不包括）。</p></li></ul><p>首先一个回文数，是分偶数和奇数的。</p><p>例如：</p><p>偶数：bbcc</p><p>奇数：aba</p><p>所以我们在这里用到的是<strong>中心扩散法</strong>，假如回文数是奇数，则以自己为中心两边向外扩散，同时判断新加的两个数是否相等，而偶数就要先判断两边的数字是否相等。</p><h4 id="3-代码"><a href="#3-代码" class="headerlink" title="3. 代码"></a>3. 代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution4</span> </span>&#123;</span><br><span class="line">String res=<span class="string">""</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s==<span class="keyword">null</span>||s.length()&lt;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">        expandAroundCenter(s, i, i);</span><br><span class="line">        expandAroundCenter(s, i, i+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">expandAroundCenter</span><span class="params">(String s,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(left&gt;=<span class="number">0</span>&amp;&amp;right&lt;s.length()&amp;&amp;s.charAt(left)==s.charAt(right))&#123;</span><br><span class="line">    left--;</span><br><span class="line">    right++;</span><br><span class="line">    &#125;</span><br><span class="line">    String cur=s.substring(left+<span class="number">1</span>,right);</span><br><span class="line">    <span class="keyword">if</span>(cur.length()&gt;res.length())&#123;</span><br><span class="line">    res=cur;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-题目描述&quot;&gt;&lt;a href=&quot;#1-题目描述&quot; class=&quot;headerlink&quot; title=&quot;1.题目描述&quot;&gt;&lt;/a&gt;1.题目描述&lt;/h4&gt;
    
    </summary>
    
    
    
      <category term="算法" scheme="http://dumengblog.club/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>leetcode4_寻找两个有序数组的中位数</title>
    <link href="http://dumengblog.club/2019/12/09/leetcode4-%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/"/>
    <id>http://dumengblog.club/2019/12/09/leetcode4-寻找两个有序数组的中位数/</id>
    <published>2019-12-09T14:06:30.000Z</published>
    <updated>2019-12-09T14:20:31.206Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1.题目描述"></a>1.题目描述</h4><a id="more"></a><p>给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。</p><p>请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。</p><p>你可以假设 nums1 和 nums2 不会同时为空。</p><blockquote><p>示例1:</p><p>nums1 = [1, 3]<br> nums2 = [2]</p><p>则中位数是 2.0</p></blockquote><blockquote><p>示例2:</p><p>nums1 = [1, 2]<br> nums2 = [3, 4]</p><p>则中位数是 (2 + 3)/2 = 2.5</p></blockquote><h4 id="2-解题分析"><a href="#2-解题分析" class="headerlink" title="2.解题分析"></a>2.解题分析</h4><p>先从题干进行分析 , 本题若没有时间复杂度要求,将是一道极简单的题.</p><p>我们可以先将两个数组合并,再排序 ,以此完成解题.</p><p>本题给出的时间复杂度为 O(log(m + n)) , 由此我们想到<strong>二分查找</strong>,事实也确乎如此.</p><p>下面开始分析问题,先从中位数的作用入手</p><p> <strong>中位数</strong> : 将一个集合划分为两个长度相等的子集，其中一个子集中的元素总是大于另一个子集中的元素。 </p><p>对本题而言,我们要做的就是把有序数组A,B进行分割,共分为四个子数组,分别记作left_A,left_B,left_A,right_A.</p><p>将left_A和left_B合并记作left_part,</p><p>同理,得到right_part.</p><p>如果我们可以确认:</p><blockquote><ol><li>len(left_part) = len(right_part)</li><li>max(left_part) ≤ min(right_part)</li></ol></blockquote><p>那么,我们就得到了两个长度相同的部分,且其中一部分的元素总是大于或等于另一部分的元素.</p><p>到这里,我们就已经很接近答案了.</p><p>要满足上面的两个条件,我们只需要保证：</p><p><img src="/../asset/14927224-1ba888260ba02871.png" alt="14927224-1ba888260ba02871"></p><p><strong>注意:</strong> 其中<code>1</code>中的 m - i + n - j + 1的 <code>&quot;+1&quot;</code>的原因是存由于在奇偶的差别.</p><p>从<code>1</code>中我们可以看出,j 可以被 i 表示,所以,接下来的问题变为:</p><p><strong>找到满足<code>2</code>的 i</strong></p><p>对此,我们可以使用二分查找(<em>具体查找的过程,以及临界分析写在下面注释中</em>)</p><p>当找到目标对象 i 后 , 中位数为 :</p><p><img src="/../asset/14927224-d7f3cf5caf331963-1575901137870.png" alt="14927224-d7f3cf5caf331963"></p><h4 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = nums1.length;</span><br><span class="line">        <span class="keyword">int</span> n = nums2.length;</span><br><span class="line">        <span class="comment">// 保证num1的长度总是小于或等于nums2</span></span><br><span class="line">        <span class="keyword">if</span>(m&gt;n)&#123;</span><br><span class="line">            <span class="keyword">int</span>[] temp = nums1;nums1 = nums2; nums2 = temp;</span><br><span class="line">            <span class="keyword">int</span> lengthTemp = m; m = n; n = lengthTemp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> imax = m,imin = <span class="number">0</span>,half = (m+n+<span class="number">1</span>)/<span class="number">2</span> ;</span><br><span class="line">        <span class="comment">//开始查找</span></span><br><span class="line">        <span class="keyword">while</span>(imax &gt;= imin)&#123;</span><br><span class="line">            <span class="keyword">int</span> i = (imax+imin)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">int</span> j = half - i;</span><br><span class="line">            <span class="comment">// i 过小且i可以再增大</span></span><br><span class="line">            <span class="keyword">if</span>(i&lt;imax &amp;&amp; nums2[j-<span class="number">1</span>]&gt;nums1[i])&#123;</span><br><span class="line">                imin = i +<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// i 过大且i可以再减小</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i&gt;imin &amp;&amp; nums1[i-<span class="number">1</span>]&gt;nums2[j])&#123;</span><br><span class="line">                imax = i -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">int</span> leftmax = <span class="number">0</span>;</span><br><span class="line">                <span class="comment">// left_num1为空时</span></span><br><span class="line">                <span class="keyword">if</span>(i == <span class="number">0</span>) &#123;leftmax = nums2[j-<span class="number">1</span>];&#125;</span><br><span class="line">                <span class="comment">// left_num2为空时</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(j == <span class="number">0</span>)&#123; leftmax = nums1[i-<span class="number">1</span>];&#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;leftmax = Math.max(nums1[i-<span class="number">1</span>],nums2[j-<span class="number">1</span>]);&#125;</span><br><span class="line">                <span class="comment">// 当m+n 为奇数时,返回奇数解</span></span><br><span class="line">                <span class="keyword">if</span>((m+n)%<span class="number">2</span> == <span class="number">1</span>)  <span class="keyword">return</span> leftmax;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">int</span> rightmin = <span class="number">0</span>;</span><br><span class="line">                <span class="comment">// right_num1为空时</span></span><br><span class="line">                <span class="keyword">if</span>(i == m)&#123; rightmin = nums2[j];&#125;</span><br><span class="line">                <span class="comment">// right_num2为空时</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(j == n) &#123;rightmin = nums1[i];&#125;</span><br><span class="line">                <span class="keyword">else</span>&#123; rightmin = Math.min(nums1[i],nums2[j]);&#125;</span><br><span class="line">                <span class="comment">// 当m+n 为偶数时,返回偶数解</span></span><br><span class="line">                <span class="keyword">return</span> (leftmax+rightmin)/<span class="number">2.0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;        </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-题目描述&quot;&gt;&lt;a href=&quot;#1-题目描述&quot; class=&quot;headerlink&quot; title=&quot;1.题目描述&quot;&gt;&lt;/a&gt;1.题目描述&lt;/h4&gt;
    
    </summary>
    
    
    
      <category term="算法" scheme="http://dumengblog.club/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>leetcode3_无重复字符的最长子串</title>
    <link href="http://dumengblog.club/2019/12/09/leetcode3-%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/"/>
    <id>http://dumengblog.club/2019/12/09/leetcode3-无重复字符的最长子串/</id>
    <published>2019-12-09T12:54:17.000Z</published>
    <updated>2019-12-09T13:22:31.986Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1.题目描述"></a>1.题目描述</h4><a id="more"></a><p>给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。</p><p>示例 1:</p><p>输入: “abcabcbb”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “abc”，所以其长度为 3。</p><p>示例 2:</p><p>输入: “bbbbb”<br>输出: 1<br>解释: 因为无重复字符的最长子串是 “b”，所以其长度为 1。</p><p>示例 3:</p><p>输入: “pwwkew”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “wke”，所以其长度为 3。<br>     请注意，你的答案必须是 子串 的长度，”pwke” 是一个子序列，不是子串。</p><h4 id="2-题解"><a href="#2-题解" class="headerlink" title="2.题解"></a>2.题解</h4><p> 定义两个指针，start和end，代表当前窗口的开始和结束位置，同样使用hashset,当窗口中出现重复的字符时，start++,没有重复时，end++,每次更新长度的最大值 </p><h4 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n = s.length();</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> end=<span class="number">0</span>,start=<span class="number">0</span>;</span><br><span class="line">    Set&lt;Character&gt; set=<span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span>(start&lt;n &amp;&amp; end&lt;n)&#123;</span><br><span class="line">      <span class="keyword">if</span>(set.contains(s.charAt(end)))&#123;</span><br><span class="line">       set.remove(s.charAt(start++));</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        set.add(s.charAt(end++));</span><br><span class="line">        res=Math.max(res,end-start);</span><br><span class="line">      &#125; </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  </span><br><span class="line">  &#125;  </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-题目描述&quot;&gt;&lt;a href=&quot;#1-题目描述&quot; class=&quot;headerlink&quot; title=&quot;1.题目描述&quot;&gt;&lt;/a&gt;1.题目描述&lt;/h4&gt;
    
    </summary>
    
    
    
      <category term="算法" scheme="http://dumengblog.club/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>leetcode2_两数相加</title>
    <link href="http://dumengblog.club/2019/12/09/leetcode2-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
    <id>http://dumengblog.club/2019/12/09/leetcode2-两数相加/</id>
    <published>2019-12-09T12:41:38.000Z</published>
    <updated>2019-12-09T12:50:41.227Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1.题目描述"></a>1.题目描述</h4><a id="more"></a><p>给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。</p><p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p><p>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><p>示例：</p><p>输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br>输出：7 -&gt; 0 -&gt; 8<br>原因：342 + 465 = 807</p><h4 id="2-题解"><a href="#2-题解" class="headerlink" title="2.题解"></a>2.题解</h4><p>其实本题，远比看着简单许多，就是两个链表相加的意思,首先新建一个链表，将传入的两个链表的第一个值相加，赋给新建的链表头结点的下一个节点，然后再循环这个过程直到两个链表为空，返回新建链表头结点的下一个节点。</p><h4 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">    ListNode n=<span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    ListNode cur=n;</span><br><span class="line">    ListNode p1=l1,p2=l2;</span><br><span class="line">    <span class="keyword">while</span>(p1!=<span class="keyword">null</span>||p2!=<span class="keyword">null</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(p1!=<span class="keyword">null</span>)&#123;</span><br><span class="line">    sum+=p1.val;</span><br><span class="line">    p1=p1.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p2!=<span class="keyword">null</span>)&#123;</span><br><span class="line">    sum+=p2.val;</span><br><span class="line">    p2=p2.next;</span><br><span class="line">    &#125;</span><br><span class="line">    cur.next=<span class="keyword">new</span> ListNode(sum%<span class="number">10</span>);</span><br><span class="line">    sum/=<span class="number">10</span>;</span><br><span class="line">    cur=cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(sum==<span class="number">1</span>)&#123;</span><br><span class="line">    cur.next=<span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n.next;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-题目描述&quot;&gt;&lt;a href=&quot;#1-题目描述&quot; class=&quot;headerlink&quot; title=&quot;1.题目描述&quot;&gt;&lt;/a&gt;1.题目描述&lt;/h4&gt;
    
    </summary>
    
    
    
      <category term="算法" scheme="http://dumengblog.club/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>leetcode1_两数之和</title>
    <link href="http://dumengblog.club/2019/12/09/leetcode-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <id>http://dumengblog.club/2019/12/09/leetcode-两数之和/</id>
    <published>2019-12-09T01:15:01.000Z</published>
    <updated>2019-12-09T01:38:12.467Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1. 题目描述"></a>1. 题目描述</h3><a id="more"></a><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p><p>示例:</p><p>给定 nums = [2, 7, 11, 15], target = 9</p><p>因为 nums[0] + nums[1] = 2 + 7 = 9<br>所以返回 [0, 1]</p><h3 id="2-题解"><a href="#2-题解" class="headerlink" title="2. 题解"></a>2. 题解</h3><p>个人本次利用了Hashmap来解决这道题，首先由于返回一个数组，所以要在方法体新建一个数组，并且返回这个数组，首先对传进来的数组进行判断是否为空。然后对数组遍历，一边把数据存储在hashmap里，key存数组的值，value存数组的下标。一边查询target减当前数组的值，如果查询到了，则将i放在新建的数组中，另一个就是找到的另一个值的下标。</p><h3 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">int</span>[]res=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">if</span>(nums==<span class="keyword">null</span>&amp;&amp;nums.length&lt;=<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        HashMap&lt;Integer,Integer&gt; map=<span class="keyword">new</span> HashMap&lt;Integer,Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> num=nums[i];</span><br><span class="line">            <span class="keyword">int</span> val=target-num;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(val))&#123;</span><br><span class="line">            res[<span class="number">0</span>]=i;</span><br><span class="line">            res[<span class="number">1</span>]=map.get(val);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            map.put(num, i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-题目描述&quot;&gt;&lt;a href=&quot;#1-题目描述&quot; class=&quot;headerlink&quot; title=&quot;1. 题目描述&quot;&gt;&lt;/a&gt;1. 题目描述&lt;/h3&gt;
    
    </summary>
    
    
    
      <category term="算法" scheme="http://dumengblog.club/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>如何找出数组中重复元素最多的数</title>
    <link href="http://dumengblog.club/2019/12/08/%E5%A6%82%E4%BD%95%E6%89%BE%E5%87%BA%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0%E6%9C%80%E5%A4%9A%E7%9A%84%E6%95%B0/"/>
    <id>http://dumengblog.club/2019/12/08/如何找出数组中重复元素最多的数/</id>
    <published>2019-12-08T04:43:34.000Z</published>
    <updated>2019-12-09T01:38:37.338Z</updated>
    
    <content type="html"><![CDATA[<p>1.</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.Map.Entry;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 如何找出数组中重复元素最多的数 </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findmost</span><span class="params">(<span class="keyword">int</span> []a)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> result=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//记录每个元素出现的次数</span></span><br><span class="line">Map &lt;Integer,Integer&gt; m=<span class="keyword">new</span> HashMap&lt;Integer,Integer&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(m.containsKey(a[i]))&#123;</span><br><span class="line">m.put(a[i], m.get(a[i])+<span class="number">1</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">m.put(a[i], <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//找出出现最多次数的数</span></span><br><span class="line"><span class="keyword">int</span> most=<span class="number">0</span>;</span><br><span class="line">Iterator it=m.entrySet().iterator();<span class="comment">//map.entrySet()是把HashMap类型的数据转换成集合类型;</span></span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">Map.Entry en=(Entry) it.next();</span><br><span class="line"><span class="keyword">int</span> key=(Integer) en.getKey();</span><br><span class="line"><span class="keyword">int</span> val=(Integer) en.getValue();</span><br><span class="line"><span class="keyword">if</span>(val&gt;most)&#123;</span><br><span class="line">result=key;</span><br><span class="line">most=val;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Random r=<span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">int</span> arr[]=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">arr[i]=r.nextInt(<span class="number">9</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">System.out.println(findmost(arr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="算法" scheme="http://dumengblog.club/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>找出数组中第二大的值</title>
    <link href="http://dumengblog.club/2019/12/08/%E6%89%BE%E5%87%BA%E6%95%B0%E7%BB%84%E4%B8%AD%E7%AC%AC%E4%BA%8C%E5%A4%A7%E7%9A%84%E5%80%BC/"/>
    <id>http://dumengblog.club/2019/12/08/找出数组中第二大的值/</id>
    <published>2019-12-08T04:27:18.000Z</published>
    <updated>2019-12-09T01:39:14.416Z</updated>
    
    <content type="html"><![CDATA[<p>1.</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 找出数组中第二大的值 </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">SecondMax</span><span class="params">(<span class="keyword">int</span> a[])</span></span>&#123;</span><br><span class="line"><span class="comment">//存储数组中最大值</span></span><br><span class="line"><span class="keyword">int</span> max=a[<span class="number">0</span>];</span><br><span class="line"><span class="comment">//存储数组中第二大的值</span></span><br><span class="line"><span class="keyword">int</span> secondmax=Integer.MIN_VALUE;</span><br><span class="line"><span class="comment">//遍历数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;a.length;i++)&#123;</span><br><span class="line"><span class="comment">//如果当前值大于数组的最大值，则第二大的值等于先前定义最大值，最大值等于当前值</span></span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;max)&#123;</span><br><span class="line">secondmax=max;</span><br><span class="line">max=a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a[i]&lt;max)&#123;</span><br><span class="line"><span class="comment">//如果当前值不比最大值大那就和第二大的值做对比</span></span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;secondmax)&#123;</span><br><span class="line">secondmax=a[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> secondmax;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Random r=<span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">int</span> arr[]=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">arr[i]=r.nextInt(<span class="number">9</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">System.out.println(SecondMax(arr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="算法" scheme="http://dumengblog.club/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>常考链表操作</title>
    <link href="http://dumengblog.club/2019/12/07/%E5%B8%B8%E8%80%83%E9%93%BE%E8%A1%A8%E6%93%8D%E4%BD%9C/"/>
    <id>http://dumengblog.club/2019/12/07/常考链表操作/</id>
    <published>2019-12-07T13:10:23.000Z</published>
    <updated>2019-12-07T13:24:45.566Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-链表反转"><a href="#1-链表反转" class="headerlink" title="1. 链表反转"></a>1. 链表反转</h4><p>改变指针方向，将头结点改为尾节点。本次给出全部代码，后来只给部分代码</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">int</span> value;</span><br><span class="line"></span><br><span class="line">​Node next=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">​<span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">this</span>.value=value;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">linkedlisttest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​Node head=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">​<span class="function"><span class="keyword">public</span> Node <span class="title">getHead</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">​Node newNode=<span class="keyword">new</span> Node(data);</span><br><span class="line"></span><br><span class="line">​<span class="keyword">if</span>(head==<span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">​head=newNode;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​Node tmp=head;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">while</span>(tmp.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">​tmp=tmp.next;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​tmp.next=newNode;</span><br><span class="line"></span><br><span class="line">​</span><br><span class="line"></span><br><span class="line">​</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printList</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​Node tmp = head;</span><br><span class="line"></span><br><span class="line">​</span><br><span class="line"></span><br><span class="line">​<span class="keyword">while</span> (tmp != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">​System.out.print(tmp.value+<span class="string">" "</span>);</span><br><span class="line"></span><br><span class="line">​tmp = tmp.next;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​<span class="comment">//链表反转</span></span><br><span class="line"></span><br><span class="line">​<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverseListNode</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​Node pReverseHead=head;<span class="comment">//设置反转后的头结点</span></span><br><span class="line"></span><br><span class="line">​Node pNode=head;<span class="comment">//当前节点</span></span><br><span class="line"></span><br><span class="line">​Node pPrev=<span class="keyword">null</span>;<span class="comment">//前一个节点</span></span><br><span class="line"></span><br><span class="line">​<span class="keyword">while</span>(pNode!=<span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">​<span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">​ * 例如i,m,n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">​    由于反转需要改变指针的指向，但是一旦改变了指针的指向就没有指针指向下一个数，所以需要在改变i到m的指针顺序时</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">​    ，提前将下一个数存起来。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">​*/</span></span><br><span class="line"></span><br><span class="line">​Node pNext=pNode.next;<span class="comment">//存储下一个节点</span></span><br><span class="line"></span><br><span class="line">​<span class="keyword">if</span>(pNext==<span class="keyword">null</span>)</span><br><span class="line"></span><br><span class="line">​pReverseHead=pNode;<span class="comment">//令当前节点为反转链表的头结点</span></span><br><span class="line"></span><br><span class="line">​</span><br><span class="line"></span><br><span class="line">​pNode.next=pPrev;<span class="comment">//将当前节点的下一个节点设为前一个节点</span></span><br><span class="line"></span><br><span class="line">​</span><br><span class="line"></span><br><span class="line">​pPrev=pNode;<span class="comment">//前一个节点为当前节点</span></span><br><span class="line"></span><br><span class="line">​pNode=pNext;<span class="comment">//当前节点向下走</span></span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">this</span>.head=pReverseHead;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​linkedlisttest l=<span class="keyword">new</span> linkedlisttest();</span><br><span class="line"></span><br><span class="line">​l.insert(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">​l.insert(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">​l.insert(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">​l.printList();</span><br><span class="line"></span><br><span class="line">​System.out.println(<span class="string">"\n链表反转："</span>);</span><br><span class="line"></span><br><span class="line">​l.reverseListNode(l.getHead());</span><br><span class="line"></span><br><span class="line">​l.printList();</span><br><span class="line"></span><br><span class="line">​</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="//dumengblog.club/2019/12/07/常考链表操作/E:%5CBlog%5CHexo%5Csource%5Casset%5Cwps6C1F.tmp.jpg" alt="img"> </p><h4 id="2-链表从尾到头输出"><a href="#2-链表从尾到头输出" class="headerlink" title="2 .链表从尾到头输出"></a>2 .链表从尾到头输出</h4><p>直接递归，等到后来二叉树三种遍历也是这个思想</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printListReversely</span><span class="params">(Node plistHead)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">if</span>(plistHead!=<span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">​printListReversely(plistHead.next);</span><br><span class="line"></span><br><span class="line">​System.out.print(plistHead.value+<span class="string">" "</span>);</span><br><span class="line"></span><br><span class="line">​</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">主函数：</span><br><span class="line"></span><br><span class="line">​<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​linkedlisttest l=<span class="keyword">new</span> linkedlisttest();</span><br><span class="line"></span><br><span class="line">​l.insert(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">​l.insert(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">​l.insert(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">​l.printList();</span><br><span class="line"></span><br><span class="line">​System.out.println(<span class="string">"\n链表从尾到头输出："</span>);</span><br><span class="line"></span><br><span class="line">​l.printListReversely(l.getHead());</span><br><span class="line"></span><br><span class="line">​</span><br><span class="line"></span><br><span class="line">​</span><br><span class="line"></span><br><span class="line">​&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="//dumengblog.club/2019/12/07/常考链表操作/E:%5CBlog%5CHexo%5Csource%5Casset%5Cwps6C2F.tmp.jpg" alt="img"> </p><h4 id="3-判断链表是否有环"><a href="#3-判断链表是否有环" class="headerlink" title="3. 判断链表是否有环"></a>3. 判断链表是否有环</h4><p>定义两个指针，一个快指针，一个慢指针，两个指针同时移动，快指针每次移动两步，慢指针移动一步，每次都比较，直到快指针等于慢指针为止。（fast先到底部为null则为无环链表）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">Isloop</span><span class="params">(Node head)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">​Node fast=head;</span><br><span class="line"></span><br><span class="line">​Node slow=head;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">if</span>(fast==<span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">while</span>(fast!=<span class="keyword">null</span>&amp;&amp;fast.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">​fast=fast.next.next;</span><br><span class="line"></span><br><span class="line">​slow=slow.next;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">if</span>(fast==slow)&#123;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​</span><br><span class="line"></span><br><span class="line">​</span><br><span class="line"></span><br><span class="line">​<span class="keyword">return</span> (fast!=<span class="keyword">null</span>&amp;&amp;fast.next!=<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">​&#125;</span><br></pre></td></tr></table></figure><h4 id="4-如何删除重复元素"><a href="#4-如何删除重复元素" class="headerlink" title="4. 如何删除重复元素"></a>4. 如何删除重复元素</h4><p>对链表进行双重遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteDuplecate</span><span class="params">(Node head)</span></span>&#123;</span><br><span class="line">Node p=head;</span><br><span class="line"><span class="keyword">while</span>(p!=<span class="keyword">null</span>)&#123;</span><br><span class="line">Node q=p;</span><br><span class="line"><span class="keyword">while</span>(q.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(p.value==q.next.value)&#123;</span><br><span class="line">q.next=q.next.next;</span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line">q=q.next;</span><br><span class="line">&#125;</span><br><span class="line">p=p.next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/../asset/wps6C50.tmp.jpg" alt="img"> </p><p>9.4 如何找到倒数第k个元素</p><p>设置两个指针，一个正常从头到尾遍历，另一个先前移k-1步然后依次遍历，当这个快指针先到达尾部，则另一个指针的位置就是倒数第k个元素。</p><p>主函数：</p><p><img src="/../asset/wps6C51.tmp.jpg" alt="img"> </p><p>输出结果：</p><p><img src="/../asset/wps6C71.tmp.jpg" alt="img"> </p><p>9.5 判断两个链表是否相交</p><p>如果相交则有相同的尾节点</p><p>​    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isIntersect</span><span class="params">(Node h1,Node h2)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">if</span>(h1==<span class="keyword">null</span>||h2==<span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​Node tail=h1;</span><br><span class="line"></span><br><span class="line">​Node tail2=h2;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">while</span>(tail.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">​tail=tail.next;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">while</span>(tail2.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">​tail2=tail2.next;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">return</span> tail==tail2;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br></pre></td></tr></table></figure><p>9.6 链表排序</p><p>​    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">orderlist</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​Node nextNode = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">​Node curNode = head;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">while</span> (curNode.next != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">​nextNode = curNode.next;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">while</span> (nextNode != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">if</span> (curNode.data &gt; nextNode.data) &#123;</span><br><span class="line"></span><br><span class="line">​temp = curNode.data;</span><br><span class="line"></span><br><span class="line">​curNode.data = nextNode.data;</span><br><span class="line"></span><br><span class="line">​nextNode.data = temp;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​nextNode = nextNode.next;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​curNode = curNode.next;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-链表反转&quot;&gt;&lt;a href=&quot;#1-链表反转&quot; class=&quot;headerlink&quot; title=&quot;1. 链表反转&quot;&gt;&lt;/a&gt;1. 链表反转&lt;/h4&gt;&lt;p&gt;改变指针方向，将头结点改为尾节点。本次给出全部代码，后来只给部分代码&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="数据结构" scheme="http://dumengblog.club/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Java数据结构—-二叉树</title>
    <link href="http://dumengblog.club/2019/12/05/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94-%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://dumengblog.club/2019/12/05/Java数据结构—-二叉树/</id>
    <published>2019-12-05T12:04:11.000Z</published>
    <updated>2019-12-05T12:35:09.194Z</updated>
    
    <content type="html"><![CDATA[<h4 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树<a id="more"></a></h4><img src="/../asset/image-20191205200900883.png" alt="image-20191205200900883" style="zoom:50%;"><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> BianaryTree;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">treeNode</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> value;</span><br><span class="line">treeNode left;</span><br><span class="line">treeNode right;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">treeNode</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.value = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLeft</span><span class="params">(treeNode left)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.left = left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRight</span><span class="params">(treeNode right)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.right = right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">frontshow</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.print(value);</span><br><span class="line"><span class="keyword">if</span> (left != <span class="keyword">null</span>) &#123;</span><br><span class="line">left.frontshow();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (right != <span class="keyword">null</span>) &#123;</span><br><span class="line">right.frontshow();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showMid</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (left != <span class="keyword">null</span>) &#123;</span><br><span class="line">left.showMid();</span><br><span class="line">&#125;</span><br><span class="line">System.out.print(value);</span><br><span class="line"><span class="keyword">if</span> (right != <span class="keyword">null</span>) &#123;</span><br><span class="line">right.showMid();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showafter</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (left != <span class="keyword">null</span>) &#123;</span><br><span class="line">left.showafter();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (right != <span class="keyword">null</span>) &#123;</span><br><span class="line">right.showafter();</span><br><span class="line">&#125;</span><br><span class="line">System.out.print(value);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前序查找</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> treeNode <span class="title">frontSearch</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">treeNode target = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">// 对比当前节点的值</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.value == i) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 查找左儿子</span></span><br><span class="line"><span class="keyword">if</span> (left != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// 有可能查不到</span></span><br><span class="line">target = left.frontSearch(i);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不为空，说明左儿子已经查到</span></span><br><span class="line"><span class="keyword">if</span> (target != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 查找右儿子</span></span><br><span class="line"><span class="keyword">if</span> (right != <span class="keyword">null</span>) &#123;</span><br><span class="line">target = right.frontSearch(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">treeNode parent = <span class="keyword">this</span>;</span><br><span class="line"><span class="comment">// 判断左儿子</span></span><br><span class="line"><span class="keyword">if</span> (parent.left != <span class="keyword">null</span> &amp;&amp; parent.left.value == i) &#123;</span><br><span class="line">parent.left = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断右儿子</span></span><br><span class="line"><span class="keyword">if</span> (parent.right != <span class="keyword">null</span> &amp;&amp; parent.right.value == i) &#123;</span><br><span class="line">parent.right = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果都不是</span></span><br><span class="line"><span class="comment">// 递归检查并删除左儿子</span></span><br><span class="line">parent = left;</span><br><span class="line"><span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">parent.delete(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 递归检查并删除右儿子</span></span><br><span class="line">parent = right;</span><br><span class="line"><span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">parent.delete(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Binarytree</span> </span>&#123;</span><br><span class="line">treeNode root;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoot</span><span class="params">(treeNode root)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.root = root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> treeNode <span class="title">getRoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showFront</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">if</span> (root != <span class="keyword">null</span>)</span><br><span class="line">root.frontshow();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showMid</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">if</span> (root != <span class="keyword">null</span>)</span><br><span class="line">root.showMid();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showafter</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">if</span> (root != <span class="keyword">null</span>)</span><br><span class="line">root.showafter();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> treeNode <span class="title">frontSearch</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> root.frontSearch(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">if</span> (root.value == i) &#123;</span><br><span class="line">root = <span class="keyword">null</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">root.delete(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Binarytree binarytree = <span class="keyword">new</span> Binarytree();</span><br><span class="line">treeNode root = <span class="keyword">new</span> treeNode(<span class="number">1</span>);</span><br><span class="line">treeNode rootL = <span class="keyword">new</span> treeNode(<span class="number">2</span>);</span><br><span class="line">treeNode rootR = <span class="keyword">new</span> treeNode(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// 创建一个根节点</span></span><br><span class="line">binarytree.setRoot(root);</span><br><span class="line"><span class="comment">// 左子点</span></span><br><span class="line">root.setLeft(rootL);</span><br><span class="line"><span class="comment">// 右子点</span></span><br><span class="line">root.setRight(rootR);</span><br><span class="line"><span class="comment">// 为第二层的左子点创建两个子节点</span></span><br><span class="line">rootL.setLeft(<span class="keyword">new</span> treeNode(<span class="number">4</span>));</span><br><span class="line">rootL.setRight(<span class="keyword">new</span> treeNode(<span class="number">5</span>));</span><br><span class="line"><span class="comment">// 第二层右子点创建子节点</span></span><br><span class="line">rootR.setLeft(<span class="keyword">new</span> treeNode(<span class="number">6</span>));</span><br><span class="line">rootR.setRight(<span class="keyword">new</span> treeNode(<span class="number">7</span>));</span><br><span class="line">System.out.println(<span class="string">"前序遍历"</span>);</span><br><span class="line">binarytree.showFront();</span><br><span class="line">System.out.println(<span class="string">"\n中序遍历"</span>);</span><br><span class="line">binarytree.showMid();</span><br><span class="line">System.out.println(<span class="string">"\n后序遍历"</span>);</span><br><span class="line">binarytree.showafter();</span><br><span class="line">treeNode result = binarytree.frontSearch(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 输出一个对象，如果有就是查到了</span></span><br><span class="line">System.out.println(<span class="string">"\n"</span> + result);</span><br><span class="line"><span class="comment">// 删除一个子树</span></span><br><span class="line">binarytree.delete(<span class="number">3</span>);</span><br><span class="line">binarytree.showFront();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二叉顺序树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span></span>&#123;</span><br><span class="line"><span class="comment">//节点的权</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> value;</span><br><span class="line"><span class="comment">//左儿子</span></span><br><span class="line"><span class="keyword">public</span> TreeNode left;</span><br><span class="line"><span class="comment">//右儿子</span></span><br><span class="line"><span class="keyword">public</span> TreeNode right;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.value=value;</span><br><span class="line"><span class="keyword">this</span>.left=<span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">this</span>.right=<span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinaryTree</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> TreeNode root;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BinaryTree</span><span class="params">()</span></span>&#123;</span><br><span class="line">root=<span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span> <span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">TreeNode newNode=<span class="keyword">new</span> TreeNode(value); </span><br><span class="line"><span class="keyword">if</span>(root==<span class="keyword">null</span>)&#123;</span><br><span class="line">root=newNode;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">TreeNode current =root;</span><br><span class="line">TreeNode parent;</span><br><span class="line"><span class="comment">//寻找插入的位置</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">parent=current;</span><br><span class="line"><span class="keyword">if</span>(value&lt;current.value)&#123;</span><br><span class="line">current=current.left;</span><br><span class="line"><span class="keyword">if</span>(current==<span class="keyword">null</span>)&#123;</span><br><span class="line">parent.left=newNode;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">current=current.right;</span><br><span class="line"><span class="keyword">if</span>(current==<span class="keyword">null</span>)&#123;</span><br><span class="line">parent.right=newNode;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将数值输入构建二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span> []value)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;value.length;i++)&#123;</span><br><span class="line">insert(value[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中序遍历二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(TreeNode localRoot)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(localRoot!=<span class="keyword">null</span>)&#123;</span><br><span class="line">inOrder(localRoot.left);</span><br><span class="line">System.out.print(localRoot.value+<span class="string">" "</span>);</span><br><span class="line">inOrder(localRoot.right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inOrder</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.inOrder(<span class="keyword">this</span>.root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//先序遍历二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(TreeNode localRoot)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(localRoot!=<span class="keyword">null</span>)&#123;</span><br><span class="line">System.out.print(localRoot.value+<span class="string">" "</span>);</span><br><span class="line">preOrder(localRoot.left);</span><br><span class="line">preOrder(localRoot.right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.preOrder(<span class="keyword">this</span>.root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//后序遍历二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nextOrder</span><span class="params">(TreeNode localRoot)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(localRoot!=<span class="keyword">null</span>)&#123;</span><br><span class="line">nextOrder(localRoot.left);</span><br><span class="line">nextOrder(localRoot.right);</span><br><span class="line">System.out.print(localRoot.value+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nextOrder</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.nextOrder(<span class="keyword">this</span>.root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">BinaryTree tree=<span class="keyword">new</span> BinaryTree();</span><br><span class="line"><span class="keyword">int</span> []data=&#123;<span class="number">2</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">5</span>&#125;;</span><br><span class="line">tree.buildTree(data);</span><br><span class="line">System.out.println(<span class="string">"二叉树中序遍历"</span>);</span><br><span class="line">tree.inOrder();</span><br><span class="line">System.out.println(<span class="string">"\n二叉树先序遍历"</span>);</span><br><span class="line">tree.preOrder();</span><br><span class="line">System.out.println(<span class="string">"\n二叉树后序遍历"</span>);</span><br><span class="line">tree.nextOrder();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;二叉树&quot;&gt;&lt;a href=&quot;#二叉树&quot; class=&quot;headerlink&quot; title=&quot;二叉树&quot;&gt;&lt;/a&gt;二叉树&lt;/h4&gt;
    
    </summary>
    
    
    
      <category term="数据结构" scheme="http://dumengblog.club/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Java排序算法</title>
    <link href="http://dumengblog.club/2019/12/04/Java%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://dumengblog.club/2019/12/04/Java排序算法/</id>
    <published>2019-12-04T09:04:33.000Z</published>
    <updated>2019-12-05T12:35:29.265Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>选择排序</p><p>该方法基本原理如下：</p><p>1.给定一组数据，经过第一轮比较后得到最小的记录，然后将该记录与第一个记录的数据进行交换</p><p>2.然后接着对除了第一个数据进行比较，得到最小的记录，与第二个记录进行交换</p><p>3.直到比较的记录只有一个为止</p><a id="more"></a><p>以数组 [38 , 65 , 97 , 76 , 13 , 27 , 49] 为例</p><p>第一次排序：13  [65  97  76  38  27  49]</p><p>第一次排序：13  27  [97  76  38  65  49]</p><p>第一次排序：13  27  38  [76  97  65  49]</p><p>第一次排序：13  27  38   49 [97  65  76]</p><p>第一次排序：13  27  38   49  65  [97 76]</p><p>第一次排序：13  27  38   49  65   76[97]</p><p>最终排序结果：13  27  38   49   65  76  97</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">selectSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> []a=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">38</span>,<span class="number">65</span>,<span class="number">97</span>,<span class="number">76</span>,<span class="number">13</span>,<span class="number">27</span>,<span class="number">49</span>&#125;;</span><br><span class="line">selectSort(a);</span><br><span class="line">System.out.println(Arrays.toString(a));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span> []a )</span></span>&#123;</span><br><span class="line"><span class="comment">//确定最小的数</span></span><br><span class="line"><span class="keyword">int</span> temp=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//下标</span></span><br><span class="line"><span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</span><br><span class="line">temp=a[i];</span><br><span class="line">flag=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;a.length;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[j]&lt;temp)&#123;</span><br><span class="line">temp=a[j];</span><br><span class="line">flag=j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag!=i)&#123;</span><br><span class="line">a[flag]=a[i];</span><br><span class="line">a[i]=temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>插入排序</li></ol><p>和选择排序类似，假设第一个记录自成一个有序数列，其余记录皆为无序数列，接着从第二个记录开始，按照记录的大小依次将当前处理的记录插入到其之前的有序数列中，直至最后一个记录插入到有序数列中为止。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">insertSort</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Random r=<span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">int</span> []a=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">6</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</span><br><span class="line">a[i]=r.nextInt(<span class="number">9</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Arrays.toString(a));</span><br><span class="line">insertSort(a);</span><br><span class="line">System.out.println(Arrays.toString(a));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span> []arr)</span></span>&#123;</span><br><span class="line"><span class="comment">//遍历所有的数字</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> temp=arr[i];</span><br><span class="line"><span class="keyword">int</span> j=i;</span><br><span class="line"><span class="keyword">if</span>(arr[j-<span class="number">1</span>]&gt;temp)&#123;</span><br><span class="line"><span class="keyword">while</span>(j&gt;=<span class="number">1</span>&amp;&amp;arr[j-<span class="number">1</span>]&gt;temp)&#123;</span><br><span class="line">arr[j]=arr[j-<span class="number">1</span>];</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">arr[j]=temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>冒泡排序</li></ol><p>如气泡一样上升，从第一个记录开始，两个相邻的数据依次对比，当前面的记录大于后面的记录时，交换位置，重复到只有一个比较的数为止</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> [] arr=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">5</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">7</span>&#125;;</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">bubblesort(arr);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//比较length-1轮</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubblesort</span><span class="params">(<span class="keyword">int</span> [] arr)</span></span>&#123;</span><br><span class="line"><span class="comment">//控制比较多少轮</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line"><span class="comment">//控制比较的次数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;arr.length-i-<span class="number">1</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line"><span class="keyword">int</span> tmp=arr[j];</span><br><span class="line">arr[j]=arr[j+<span class="number">1</span>];</span><br><span class="line">arr[j+<span class="number">1</span>]=tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>归并排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeSort</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> []a=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">38</span>,<span class="number">65</span>,<span class="number">97</span>,<span class="number">76</span>,<span class="number">13</span>,<span class="number">27</span>,<span class="number">49</span>&#125;;</span><br><span class="line">sort(a,<span class="number">0</span>,a.length-<span class="number">1</span>);</span><br><span class="line">System.out.println(Arrays.toString(a));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] a,<span class="keyword">int</span> low,<span class="keyword">int</span> high)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (low+high)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(low&lt;high)&#123;</span><br><span class="line">            sort(a,low,mid);</span><br><span class="line">            sort(a,mid+<span class="number">1</span>,high);</span><br><span class="line">            <span class="comment">//左右归并</span></span><br><span class="line">            merge(a,low,mid,high);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> low, <span class="keyword">int</span> mid, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[high-low+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> i= low;</span><br><span class="line">        <span class="keyword">int</span> j = mid+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 把较小的数先移到新数组中</span></span><br><span class="line">        <span class="keyword">while</span>(i&lt;=mid &amp;&amp; j&lt;=high)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&lt;a[j])&#123;</span><br><span class="line">                temp[k++] = a[i++];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                temp[k++] = a[j++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 把左边剩余的数移入数组 </span></span><br><span class="line">        <span class="keyword">while</span>(i&lt;=mid)&#123;</span><br><span class="line">            temp[k++] = a[i++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 把右边边剩余的数移入数组</span></span><br><span class="line">        <span class="keyword">while</span>(j&lt;=high)&#123;</span><br><span class="line">            temp[k++] = a[j++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 把新数组中的数覆盖nums数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>;x&lt;temp.length;x++)&#123;</span><br><span class="line">            a[x+low] = temp[x];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li><p><strong>快速排序</strong></p><p><a href="https://blog.csdn.net/shujuelin/article/details/82423852" target="_blank" rel="noopener">原理</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Random r=<span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">int</span> []a=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">6</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</span><br><span class="line">a[i]=r.nextInt(<span class="number">9</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Arrays.toString(a));</span><br><span class="line">quicksort(a,<span class="number">0</span>,a.length-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(Arrays.toString(a));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quicksort</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(start&lt;end)&#123;</span><br><span class="line"><span class="comment">//把数组中第0个数字作为标准数</span></span><br><span class="line"><span class="keyword">int</span> st=arr[start];</span><br><span class="line"><span class="comment">//记录需要排序的下标</span></span><br><span class="line"><span class="keyword">int</span> low=start;</span><br><span class="line"><span class="keyword">int</span> high=end;</span><br><span class="line"><span class="comment">//循环找比标准数大的数和比它小的数</span></span><br><span class="line"><span class="keyword">while</span>(low&lt;high)&#123;</span><br><span class="line"><span class="comment">//右边的数字比标准数小，高的下标往前移</span></span><br><span class="line"><span class="keyword">while</span>(low&lt;high&amp;&amp;st&lt;=arr[high])&#123;</span><br><span class="line">high--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用右边的数字替换左边的数字</span></span><br><span class="line">arr[low]=arr[high];</span><br><span class="line"><span class="comment">//如果左边的数字比标准数小</span></span><br><span class="line"><span class="keyword">while</span>(low&lt;high&amp;&amp;arr[low]&lt;=st)&#123;</span><br><span class="line">low++;</span><br><span class="line">&#125;</span><br><span class="line">arr[high]=arr[low];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//把标准数赋给低的下标所在位置的元素</span></span><br><span class="line">arr[low]=st;</span><br><span class="line"><span class="comment">//处理所有小的数字</span></span><br><span class="line">quicksort(arr, start,low);</span><br><span class="line"><span class="comment">//处理所有大的数字</span></span><br><span class="line">quicksort(arr, low+<span class="number">1</span>,end);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;选择排序&lt;/p&gt;
&lt;p&gt;该方法基本原理如下：&lt;/p&gt;
&lt;p&gt;1.给定一组数据，经过第一轮比较后得到最小的记录，然后将该记录与第一个记录的数据进行交换&lt;/p&gt;
&lt;p&gt;2.然后接着对除了第一个数据进行比较，得到最小的记录，与第二个记录进行交换&lt;/p&gt;
&lt;p&gt;3.直到比较的记录只有一个为止&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="数据结构" scheme="http://dumengblog.club/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>java数据结构—-栈</title>
    <link href="http://dumengblog.club/2019/11/28/java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94-%E6%A0%88/"/>
    <id>http://dumengblog.club/2019/11/28/java数据结构—-栈/</id>
    <published>2019-11-28T03:18:16.000Z</published>
    <updated>2019-11-28T04:17:10.381Z</updated>
    
    <content type="html"><![CDATA[<p>栈是一种只能在一端进行插入和删除操作的特殊线性表。</p><p>其中，允许插入和删除的一端称为栈顶，另一端称为栈底。通常，将栈的插入操作称为入栈，删除操作称为出栈。入栈时元素总是放在栈底，而出栈的总是栈顶元素。因此，栈中元素采用的是“后进先出”的方式。</p><a id="more"></a><p>栈的数据元素类型可以任意，只要是同一种类型即可。它的基本操作包括清空、判空、求元素个数、获取栈顶、入栈和出栈等。<br>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mystack</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> [] elements;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Mystack</span><span class="params">()</span></span>&#123;</span><br><span class="line">elements=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//压入元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> element)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] newArr = <span class="keyword">new</span> <span class="keyword">int</span>[elements.length + <span class="number">1</span>];</span><br><span class="line"><span class="comment">// 复制数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; elements.length; i++) &#123;</span><br><span class="line">newArr[i] = elements[i];</span><br><span class="line">&#125;</span><br><span class="line">newArr[elements.length] = element;</span><br><span class="line"><span class="comment">// 新数组替换原数组</span></span><br><span class="line">elements = newArr;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//取出栈顶元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(elements.length==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"stack is empty"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//取出最后一个元素</span></span><br><span class="line"><span class="keyword">int</span> element=elements[elements.length-<span class="number">1</span>];</span><br><span class="line"><span class="comment">//创建一个新数组</span></span><br><span class="line"><span class="keyword">int</span> newArr[]=<span class="keyword">new</span> <span class="keyword">int</span>[elements.length-<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;elements.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">newArr[i]=elements[i];</span><br><span class="line">&#125;</span><br><span class="line">elements=newArr;</span><br><span class="line"><span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(Arrays.toString(elements));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//取出栈顶元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">peek</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(elements.length==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"stack is empty"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> elements[elements.length-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断栈是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> elements.length==<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Mystack mystack=<span class="keyword">new</span> Mystack();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">mystack.push(i*<span class="number">6</span>);</span><br><span class="line">&#125;</span><br><span class="line">mystack.show();</span><br><span class="line">System.out.println(mystack.pop());</span><br><span class="line">System.out.println(mystack.pop());</span><br><span class="line">mystack.show();</span><br><span class="line">System.out.println(mystack.peek());</span><br><span class="line">System.out.println(mystack.isEmpty());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;栈是一种只能在一端进行插入和删除操作的特殊线性表。&lt;/p&gt;
&lt;p&gt;其中，允许插入和删除的一端称为栈顶，另一端称为栈底。通常，将栈的插入操作称为入栈，删除操作称为出栈。入栈时元素总是放在栈底，而出栈的总是栈顶元素。因此，栈中元素采用的是“后进先出”的方式。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="数据结构" scheme="http://dumengblog.club/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>java数据结构—-数组</title>
    <link href="http://dumengblog.club/2019/11/26/java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94-%E6%95%B0%E7%BB%84/"/>
    <id>http://dumengblog.club/2019/11/26/java数据结构—-数组/</id>
    <published>2019-11-26T09:14:05.000Z</published>
    <updated>2019-12-05T12:36:05.838Z</updated>
    
    <content type="html"><![CDATA[<p>在这里概念性的东西讲也是没有意义的，直接上代码：</p><ol><li>面向对象的数组（一些常见的方法）</li></ol><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.RuntimeErrorException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyArray</span> </span>&#123;</span><br><span class="line"><span class="comment">// 用于存储数据的数组</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] elements;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyArray</span><span class="params">()</span> </span>&#123;</span><br><span class="line">elements = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数组长度</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> elements.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在数组末尾加一个元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] newArr = <span class="keyword">new</span> <span class="keyword">int</span>[elements.length + <span class="number">1</span>];</span><br><span class="line"><span class="comment">// 复制数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; elements.length; i++) &#123;</span><br><span class="line">newArr[i] = elements[i];</span><br><span class="line">&#125;</span><br><span class="line">newArr[elements.length] = a;</span><br><span class="line"><span class="comment">// 新数组替换原数组</span></span><br><span class="line">elements = newArr;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出数组</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(Arrays.toString(elements));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除数组中的元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(index&lt;<span class="number">0</span>||index&gt;elements.length-<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"下标越界"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建一个新的数组长度为原数组减一</span></span><br><span class="line"><span class="keyword">int</span> [] newarr=<span class="keyword">new</span> <span class="keyword">int</span> [elements.length-<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;newarr.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;index)&#123;</span><br><span class="line">newarr[i]=elements[i];</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">newarr[i]=elements[i+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">elements=newarr;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//获取某个下标的元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(index&lt;<span class="number">0</span>||index&gt;elements.length-<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"下标越界"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> elements[index];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入一个元素到指定位置</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> index,<span class="keyword">int</span> element)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(index&lt;<span class="number">0</span>||index&gt;elements.length-<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"下标越界"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> []newArr=<span class="keyword">new</span> <span class="keyword">int</span> [elements.length+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;elements.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;index)&#123;</span><br><span class="line">newArr[i]=elements[i];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">newArr[i+<span class="number">1</span>]=elements[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">newArr[index]=element;</span><br><span class="line">elements=newArr;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//替换指定位置的函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> index,<span class="keyword">int</span> element)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(index&lt;<span class="number">0</span>||index&gt;elements.length-<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"下标越界"</span>);</span><br><span class="line">&#125;</span><br><span class="line">elements[index]=element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">MyArray a = <span class="keyword">new</span> MyArray();</span><br><span class="line">System.out.println(<span class="string">"当前数组长度："</span>+a.size());</span><br><span class="line">a.add(<span class="number">1</span>);</span><br><span class="line">System.out.println(<span class="string">"当前数组长度："</span>+a.size());</span><br><span class="line">a.show();</span><br><span class="line">a.add(<span class="number">7</span>);</span><br><span class="line">a.show();</span><br><span class="line">a.delete(<span class="number">1</span>);</span><br><span class="line">a.show();</span><br><span class="line">System.out.println(a.get(<span class="number">0</span>));</span><br><span class="line">a.insert(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">a.show();</span><br><span class="line">a.set(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">a.show();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>数组的查找</p><ol><li><p>线性查找(过于简单)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testSearch</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//目标数组</span></span><br><span class="line"><span class="keyword">int</span> []arr=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="comment">//目标元素</span></span><br><span class="line"><span class="keyword">int</span> a=<span class="number">6</span>;</span><br><span class="line"><span class="keyword">int</span> index=-<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[i]==a)&#123;</span><br><span class="line">index=i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印目标元素的下标</span></span><br><span class="line">System.out.println(index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><ol start="2"><li><p>二分查找</p><p>假如中间位置与目标元素大小相同那么直接跳出循环，不同则判断中间位置与目标元素的大小，改变首位位置，如果大于目标元素，end=mid-1，小于则begin=mid+1。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testBinarySearch</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 目标数组</span></span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> &#125;;</span><br><span class="line"><span class="comment">// 目标元素</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">9</span>;</span><br><span class="line"><span class="comment">//记录开始和结束位置</span></span><br><span class="line"><span class="keyword">int</span> begin=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> end=arr.length-<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> mid=(begin+end)/<span class="number">2</span>;</span><br><span class="line"><span class="comment">//记录位置</span></span><br><span class="line"><span class="keyword">int</span> index=-<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[mid]==a)&#123;</span><br><span class="line">index=a;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">//中间元素不是要查找的元素</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//比目标元素大</span></span><br><span class="line"><span class="keyword">if</span>(arr[mid]&gt;a)&#123;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">end=mid-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">begin=mid+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">mid=(begin+end)/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在这里概念性的东西讲也是没有意义的，直接上代码：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;面向对象的数组（一些常见的方法）&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="数据结构" scheme="http://dumengblog.club/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>java面试题</title>
    <link href="http://dumengblog.club/2019/11/25/java%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://dumengblog.club/2019/11/25/java面试题/</id>
    <published>2019-11-25T12:07:47.000Z</published>
    <updated>2019-11-25T12:28:34.155Z</updated>
    
    <content type="html"><![CDATA[<p>#### </p><p>今天在逛牛客网打卡时，发现了牛客网有一个比较系统的面试题但是有些回答有点草率，但是问题都不错建议看看。-&gt;<a href="https://www.nowcoder.com/tutorial/94/4206176d637541fa92c784a4f547e979" target="_blank" rel="noopener">牛客网的面试题</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#### &lt;/p&gt;
&lt;p&gt;今天在逛牛客网打卡时，发现了牛客网有一个比较系统的面试题但是有些回答有点草率，但是问题都不错建议看看。-&amp;gt;&lt;a href=&quot;https://www.nowcoder.com/tutorial/94/4206176d637541fa92c784
      
    
    </summary>
    
    
    
      <category term="面试" scheme="http://dumengblog.club/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>java 容器</title>
    <link href="http://dumengblog.club/2019/11/23/java-%E5%AE%B9%E5%99%A8/"/>
    <id>http://dumengblog.club/2019/11/23/java-容器/</id>
    <published>2019-11-23T09:43:10.000Z</published>
    <updated>2019-12-05T12:36:42.378Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Java-Collections框架是什么"><a href="#Java-Collections框架是什么" class="headerlink" title="Java Collections框架是什么"></a>Java Collections框架是什么</h4><a id="more"></a><p>Java  Collections框架中包含了大量集合接口以及这些接口的实现类和操作它们的算法(例如排序、查找、反转、替换、复制、取最小元素、取最大元素等)，具体而言，主要提供了List (列表)、Queue (队列)、Set (集合)、Stack (栈)和Map (映射表，用于存放键值对)等数据结构。其中，List、 Queue、 Set、 Stack 都继承自Collection接口。<br>Collection是整个集合框架的基础，它里面储存一组对象， 表示不同类型的Collections,它的作用只是提供维护一-组对象的基本接口而已。</p><p>下面分别介绍Set、List 和Map3个接口。</p><p>1) Set表示数学意义上的集合概念。其最主要的特点是集合中的元素不能重复，因此存入Set的每个元素都必须定义equals( )方法来确保对象的唯一性。该接口有两个实现类: Hash-Set和TreeSet。其中TreeSet实现了SortedSet 接口，因此TreeSet容器中的元素是有序的。</p><p>2) List 又称为有序的Collection。它按对象进人的顺序保存对象，所以它能对列表中的每个元素的插人和删除位置进行精确的控制。同时，它可以保存重复的对象。LinkedList、 Array-List和Vector都实现了List 接口。</p><p>3) Map提供了一个从键映射到值的数据结构。它用于保存键值对，其中值可以重复，但键是唯一的， 不能重复。Java 类库中有多个实现该接口的类: HashMap、 TreeMap、Linked-HashMap、WeakHashMap 和IdentityHashMap。虽然它们都实现了相同的接口，但执行效率却不是完全相同的。具体而言，HashMap 是基于散列表实现的，采用对象的HashCode可以进行快速查询。LinkedHashMap采用列表来维护内部的顺序。TreeMap 基于红黑树的数据结构来实现的， 内部元素 是按需排列的。 </p><h4 id="什么是迭代器？"><a href="#什么是迭代器？" class="headerlink" title="什么是迭代器？"></a>什么是迭代器？</h4><p> 迭代器(Iterator)是个对象， 它的工作是遍历并选择序列中的对象，它提供了一种切问一个容器(container) 对象中的各个元素，而又不必暴露该对象内部细节的方法。通过迭代器，开发人员不需要了解容器底层的结构，就可以实现对容器的遍历。由于创建迭代器的代价小，因此迭代器通常被称为轻量级的容器。<br>迭代器的使用主要有以下3个方面的注意事项:</p><p>1)使用容器的iterator( )方法返回一个Iterator, 然后通过Iterator 的next( )方法返回第1个元素。</p><p>2)使用Iterator的hasNext( )方法判断容器中是否还有元素，如果有，可以使用next()方法获取下一个元素。</p><p>3)可以通过remove()方法删除迭代器返回的元素。<br>Iterator支持派生的兄弟成员。ListIterator 只存在于List中，支持在迭代期间向List中添加或删除元素，并且可以在List 中双向滚动。<br>Iterator的使用方法如下例所示:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IteratorTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">List&lt;String&gt; list=<span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">list.add(<span class="string">"first"</span>);</span><br><span class="line">list.add(<span class="string">"second"</span>);</span><br><span class="line">list.add(<span class="string">"third"</span>);</span><br><span class="line">list.add(<span class="string">"forth"</span>);</span><br><span class="line"><span class="keyword">for</span>(Iterator&lt;String&gt; iter=list.iterator();iter.hasNext();)&#123;</span><br><span class="line">String str=iter.next();</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 运行结果：</p><p>first<br>second<br>third<br>forth</p><p>在使用Iterator（）方法中会遇到ConcurrentModificationException 异常，这通常是因为在Iterator遍历容器的同时又对容器进行增加或者删除导致的，或者由于多线程所致，当一个线程进行迭代器遍历容器的同时，另一个线程对这个容器进行增加或者删除操作。下例主要介绍单线程抛出ConcurrentModificationException的情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IteratorTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">List&lt;String&gt; list=<span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">list.add(<span class="string">"first"</span>);</span><br><span class="line">list.add(<span class="string">"second"</span>);</span><br><span class="line">list.add(<span class="string">"third"</span>);</span><br><span class="line">list.add(<span class="string">"fourth"</span>);</span><br><span class="line"><span class="keyword">for</span>(Iterator&lt;String&gt; iter=list.iterator();iter.hasNext();)&#123;</span><br><span class="line">String str=iter.next();</span><br><span class="line">System.out.println(str);</span><br><span class="line"><span class="keyword">if</span>(str.equals(<span class="string">"second"</span>))&#123;</span><br><span class="line">list.add(<span class="string">"five"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>first<br>second<br>Exception in thread “main” java.util.ConcurrentModificationException<br>    at java.util.LinkedList$ListItr.checkForComodification(LinkedList.java:761)<br>    at java.util.LinkedList$ListItr.next(LinkedList.java:696)<br>    at IteratorTest.main(IteratorTest.java:14)</p><p> 抛出上述异常的主要原因是当调用容器的iterator( )方法返回Iterator 对象时，把容器中包含对象的个数赋值给了一个变量expectedModCount,在调用next( )方法时会比较变量expectedModCount与容器中实际对象的个数modCount的值是否相等，若二者不相等，则会抛出ConcurrentModificationException异常，因此在使用Iterator遍历容器的过程中，如果对容器进行增加或删除操作，就会改变容器中对象的数量，从而导致抛出异常。</p><p>解决方法如下:在遍历的过程中把需要删除的对象保存到一个集合中，等遍历结束后在调用removeAll( )方法来删除，或者使用iter. remove( )方法。</p><p>以上主要介绍了单线程的解决方案，那么多线程访问容器的过程中抛出ConcurrentModificationException异常又该怎么解决呢?<br>1)在JDK 1.5版本引人了线程安全的容器，比如ConcurrentHashMap和CopyOnWriteArray-List等。可以使用这些线程安全的容器来代替非线程安全的容器。<br>2)在使用迭代器遍历容器时对容器的操作放到synchronized代码块中，但是当引用程序并发程度比较高时，这会严重影响程序的性能。</p><p>引申: Iterator 与Listlterator有什么区别?<br>Iterator 只能正向遍历集合，适用于获取移除元素。Lsterator 继承自Iterator, 专门针对Lis,可以从两个方向来遍历List,同时支持元素的修改。</p><h4 id="ArrayList-，Vector和LinkedList有什么区别"><a href="#ArrayList-，Vector和LinkedList有什么区别" class="headerlink" title="ArrayList ，Vector和LinkedList有什么区别"></a>ArrayList ，Vector和LinkedList有什么区别</h4><p>这三者都是实现集合框架中的List，也就是所谓的有序集合，因此具体功能也比较近似，比如都提供按照位置进行定位、添加或者删除的操作，都提供迭代器以遍历其内容等。但因为具体的设计区别，在行为、性能、线程安全等方面，表现又有很大不同。</p><p>  Vector 是 Java 早期提供的线程安全的动态数组，如果不需要线程安全，并不建议选择，毕竟同步是有额外开销的。Vector 内部是使用对象数组来保存数据，可以根据需要自动的增加容量，当数组已满时，会创建新的数组，并拷贝原有数组数据。</p><p>  ArrayList 是应用更加广泛的动态数组实现，它本身不是线程安全的，所以性能要好很多。与 Vector近似，ArrayList 也是可以根据需要调整容量，不过两者的调整逻辑有所区别，Vector 在扩容时会提高 1 倍，而 ArrayList 则是增加 50%。</p><p> LinkedList 顾名思义是 Java 提供的双向链表，所以它不需要像上面两种那样调整容量，它也不是线程安全的。</p><p>谈谈不同容器类型适合的场景：</p><p>  Vector 和 ArrayList 作为动态数组，其内部元素以数组形式顺序存储的，内存为一连续的区域，所以非常适合随机访问的场合。除了尾部插入和删除元素，往往性能会相对较差，比如我们在中间位置插入一个元素，需要移动后续所有元素。数组大小固定，不适合动态存储，不方便动态添加。<br> LinkedList 进行节点插入、删除却要高效得多，大小可变 ，内存可能是不连续内存，链式存储。但是只能通过顺次指针访问，查询效率低，随机访问性能则要比动态数组慢。<br>  因此，在应用开发中，如果事先可以估计到，应用操作是偏向于插入、删除，还是随机访问较多，就可以针对性的进行选择。</p><p>总结：</p><ul><li>快速插入、删除元素，使用LinkedList</li><li>快速随机访问元素，使用ArrayList</li><li>单线程，使用List，比如ArrayList</li><li>多线程，使用Vector</li></ul><h4 id="HashMap、Hashtable、TreeMap、和WeakHashMap有什么区别"><a href="#HashMap、Hashtable、TreeMap、和WeakHashMap有什么区别" class="headerlink" title="HashMap、Hashtable、TreeMap、和WeakHashMap有什么区别"></a>HashMap、Hashtable、TreeMap、和WeakHashMap有什么区别</h4><p> Java为数据结构中的映射定义了一个接口java. uil Map,它包括3个实现类: HahMap、Hashtable和TreeMep. Map 是用来存储键值对的数据结构，在数组中通过数组下标来对其内容索引的，而在Map中，则是通过对象来进行索引，用来索引的对象叫做key,其对应的对象叫做value。<br>HashMap是一个最常用的Map,它根据键的HashCode值存储数据，根据键可以直接获取它的值，具有很快的访问速度。由于HashMap与Hashtable都采用了hash法进行索引，因此二者具有许多相似之处，它们主要有如下的一些区别:<br>1) HashMap 是Hashtable的轻量级实现( 非线程安全的实现)，它们都完成了Map 接口，主要区别在于HashMap允许空(null) 键值(key) (但需要注意， 最多只允许一条记录的键为null,不允许多条记录的值为null),而Hashtable不允许。</p><p>2) HashMap 把Hashtable的contains 方法去掉了，改成containsvalue和containsKey.因为contains方法容易让人引起误解。Hashtable 继承自Dictionary 类，而HashMap是Java 1.2引进的Map interface的一个实现。</p><p>3) Hashtable 的方法是线程安全的，而HashMap不支持线程的同步，所以它不是线程安全的。在多个线程访问Hashtable时， 不需要开发人员对它进行同步，面对于HashMap, 开发人员必须提供额外的同步机制。所以，就效率而言，HashMap 可能高于Hashtable</p><p>4) Hashable使用Enumeration, HashMap 使用lterator</p><p>5) Hashable和HashMap采用的hash/ rehash算法都几乎一样，所以性能不会有很大的差异。</p><p>6)在Hashtable 中，hash 数组默认大小是11,增加的方式是oldx2+1。在HeshMap中，hash数组的默认大小是16，而且一定是2的指数。</p><p>7) hash值的使用不同，Hashtable直接使用对象的hashCode。</p><p>以上3种类型中，使用最多的是HashMap, HashMap 里面存人的键值对在取出时没有固定的顺序，是随机的。一般而言， 在Map中插人、删除和定位元素，HashMap 是最好的选择。由于TreeMap实现了SortMap 接口，能够把它保存的记录根据键排序，因此，取出来的是排序后的键值对，如果需要按自然顺序或自定义顺序遍历键，那么TreeMap会更好。LinkedHash-Map是HashMap的一个子类，如果需要输出的顺序和输人的相同，那么用LinkedHashMap可以实现，它还可以按读取顺序来排列。<br>WeakHashMap与HashMap类似，二者的不同之处在于WeakHashMap 中key采用的是“弱引用”的方式，只要WeakHashMap中的key不再被外部引用，它就可以被垃圾回收器回收。而HashMap中key采用的是“强引用的方式”，当HashMap中的key没有被外部引用时，只有在这个key从HashMap中删除后，才可以被垃圾回收器回收。<br>常见笔试题:<br>1.在Hashtable. 上下文中，同步指的是什么?<br>答案:同步意味着在一个时间点只能有一个线程可以修改hash表、任何线程在执行Hashtable 的更新操作前都需要获取对象锁，其他线程则等待锁的释放。<br>2.如何实现HashMap的同步?<br>答案: HashMap 可以通过Map m = Collections.synchronizedMap(new HashMap())达到同步的效果。具体而言，该方法返回一个同步的Map.该Map封装了底层的HashMap的所有方法，使得底层的HashMap即使是在多线程的环境中也是安全的。</p><h4 id="用自定义类型作为HashMap或者Hashtable的key需要注意哪些问题"><a href="#用自定义类型作为HashMap或者Hashtable的key需要注意哪些问题" class="headerlink" title="用自定义类型作为HashMap或者Hashtable的key需要注意哪些问题"></a>用自定义类型作为HashMap或者Hashtable的key需要注意哪些问题</h4><p>用自定义类作为key，<strong>必须重写equals()和hashCode()方法</strong>。</p><p>自定义类中的equals() 和 hashCode()都继承自Object类。</p><p>Object类的hashCode()方法返回这个对象存储的内存地址的编号。</p><p>而equals()比较的是内存地址是否相等。</p><p>以下是没有重写equals()和hashCode()方法；</p><p> 自定义  PhoneNumber类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneNumber</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> prefix; <span class="comment">//区号</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> phoneNumber; <span class="comment">//电话号</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrefix</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> prefix;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrefix</span><span class="params">(<span class="keyword">int</span> prefix)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.prefix = prefix;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPhoneNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> phoneNumber;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPhoneNumber</span><span class="params">(<span class="keyword">int</span> phoneNumber)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.phoneNumber = phoneNumber;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> Map&lt;PhoneNumber, String&gt; map =<span class="keyword">new</span>  HashMap&lt;PhoneNumber, String&gt;();</span><br><span class="line"> PhoneNumber phoneNumber1=<span class="keyword">new</span> PhoneNumber();</span><br><span class="line"> phoneNumber1.setPhoneNumber(<span class="number">111</span>);</span><br><span class="line"> phoneNumber1.setPrefix(<span class="number">111</span>);</span><br><span class="line"> PhoneNumber phoneNumber2=<span class="keyword">new</span> PhoneNumber();</span><br><span class="line"> phoneNumber2.setPhoneNumber(<span class="number">222</span>);</span><br><span class="line"> phoneNumber2.setPrefix(<span class="number">222</span>);</span><br><span class="line"> map.put(phoneNumber1, <span class="string">"111"</span>);</span><br><span class="line"> map.put(phoneNumber2, <span class="string">"222"</span>);</span><br><span class="line"></span><br><span class="line"> System.out.println(map.get(phoneNumber1));</span><br><span class="line"> System.out.println(map.get(phoneNumber2));</span><br><span class="line"></span><br><span class="line"> PhoneNumber phoneNumber3=<span class="keyword">new</span> PhoneNumber();</span><br><span class="line"> <span class="comment">//参数内容和phoneNumber2一样</span></span><br><span class="line"> phoneNumber3.setPhoneNumber(<span class="number">222</span>);</span><br><span class="line"> phoneNumber3.setPrefix(<span class="number">222</span>);</span><br><span class="line"> System.out.println(map.get(phoneNumber3));</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p> 输出结果</p><p> 111<br> 222<br> null</p><p>在PhoneNumber 类中重写equals()和hashCode()方法；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(<span class="keyword">this</span> == o)</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span>(!(o <span class="keyword">instanceof</span> PhoneNumber))</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     PhoneNumber pn = (PhoneNumber)o;</span><br><span class="line">     <span class="keyword">return</span> pn.prefix == prefix &amp;&amp; pn.phoneNumber == phoneNumber;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> result = <span class="number">17</span>;</span><br><span class="line">     result = <span class="number">31</span> * result + prefix;</span><br><span class="line">     result = <span class="number">31</span> * result + phoneNumber;</span><br><span class="line">     <span class="keyword">return</span> result;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p> 输出结果</p><p>  111<br>  222<br>  222</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Java-Collections框架是什么&quot;&gt;&lt;a href=&quot;#Java-Collections框架是什么&quot; class=&quot;headerlink&quot; title=&quot;Java Collections框架是什么&quot;&gt;&lt;/a&gt;Java Collections框架是什么&lt;/h4&gt;
    
    </summary>
    
    
    
      <category term="java基础知识点" scheme="http://dumengblog.club/tags/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>SSH项目开发总结</title>
    <link href="http://dumengblog.club/2019/11/22/SSH%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/"/>
    <id>http://dumengblog.club/2019/11/22/SSH项目开发总结/</id>
    <published>2019-11-22T04:03:50.000Z</published>
    <updated>2019-12-05T12:37:03.228Z</updated>
    
    <content type="html"><![CDATA[<p>首先说一下SSH框架中各自的作用：</p><a id="more"></a><h4 id="SSH三者作用"><a href="#SSH三者作用" class="headerlink" title="SSH三者作用"></a>SSH三者作用</h4><ul><li>Struts在项目中的作用</li></ul><p>Struts 在项目主要起控制作用，只要用于web层（即视图层和控制层）<br>Struts本身是使用典型的MVC结构实现的，项目中使用了struts之后就等于项目也是一个MVC结构，使项目结构更清晰，分工更明细。<br>Struts在项目中主要负责视图层、控制层，在视图层提供了大量的标签库，提高视图层的开发速度。在控制层使用中央控制器（Actionsupport）和配置文件(struts.xml)，实现拦截用户请求、封装请求参数及页面导航。</p><ul><li>Spring在项目中的作用</li></ul><p>Spring是一个全方位的整合框架，在项目中对hibernate和struts进行整合，解决层与层之间的耦合问题。<br>Spring的作用贯穿了整个中间层，将Web层、Service层、DAO层及PO无缝整合。<br>Spring的IoC来实现组件之间的依赖关系注入，上层框架不会渗透到下层组件，提高组件移植性和重用性，使得程序更灵活，上层框架不依赖实现而是依赖于抽象(委托接口)、使得实现类的变化不会影响上层组件，解决了层与层之间的藕合带来的维护或升级困难<br>SpringAOP 是面向方面编程，实现事务处理、日志服务等与业务无关的系统服务，实现插件式编程。</p><ul><li>Hibernate在项目中的作用</li></ul><p>Hibernate应用于数据持久化层，是对JDBC的轻量级封装。是一种对象、关系的映射工具， 提供了从 Java类到数据表的映射，也提供了数据查询和恢复等机制， 大大减少数据访问的复杂度。把对数据库的直接操作 , 转换为对持久对象的操作。<br>在项目中的主要作用就是1、解决程序与数据库的依赖，即使用了Hibernate之后，以后更改数据库不需要更改代码，因为Hibernate会根据数据库方言来生成对应的SQL语句；2、是对JDBC的轻量级封装，简化持久层的代码，提高开发速度。</p><h4 id="主要配置文件"><a href="#主要配置文件" class="headerlink" title="主要配置文件"></a>主要配置文件</h4><p>项目主要配置文件为：</p><ol><li><p>appilcationContext.xml </p><p>在这里配置连接池并且将其放在外部文件jdbc.properties</p><p>配置Hibernate的映射文件 </p><p>对action，service，dao的管理</p></li><li><p>struts.xml</p><p>实现拦截用户请求、封装请求参数及页面导航。</p></li><li><p>log4j.properties</p><p>日志文件</p></li><li><p>jdbc.properties</p><p>连接数据库的参数如连接名，用户名。密码</p></li><li><p>表名.hbm.xml</p></li></ol><p>.hbm.xml文件则是对表的映射</p><ol start="6"><li><p>web.xml</p><p>该文件在WebRoot/WEB-INF下他的作用是配置Spring的核心监听器 ， 配置Struts2的核心过滤器 。</p></li></ol><h4 id="项目开发心得："><a href="#项目开发心得：" class="headerlink" title="项目开发心得："></a>项目开发心得：</h4><ol><li><p>Action继承ActionSupport 实现ModelDriven<t>接口</t></p></li><li><p>dao继承HibernateDaoSupport</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">this</span>.getHibernateTemplate().find()<span class="comment">//查</span></span><br><span class="line"><span class="keyword">this</span>.getHibernateTemplate().delete(product);<span class="comment">//删</span></span><br><span class="line"><span class="keyword">this</span>.getHibernateTemplate().update(product);<span class="comment">//改</span></span><br><span class="line"><span class="keyword">this</span>.getHibernateTemplate().save(product);<span class="comment">//增</span></span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>action调用service，service调用dao</p></li><li><p>两种往前端传值的方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.ActionContext.getContext().getSession().put("clist", clist);</span><br><span class="line"><span class="tag">&lt;<span class="name">s:iterator</span> <span class="attr">var</span>=<span class="string">"c"</span> <span class="attr">value</span>=<span class="string">"#session.clist"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"#c.cname"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> |<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">s:iterator</span>&gt;</span></span><br><span class="line">2.ActionContext.getContext().getValueStack().set("hlist",hlist);</span><br><span class="line"><span class="tag">&lt;<span class="name">s:iterator</span> <span class="attr">var</span>=<span class="string">"p"</span> <span class="attr">value</span>=<span class="string">"hlist"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"$&#123;pageContext.request.contextPath&#125;/&lt;s:property value="</span>#<span class="attr">p.image</span>"/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">s:iterator</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>往前端传信息</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">this.addActionMessage("信息");//后端</span><br><span class="line"><span class="tag">&lt;<span class="name">s:actionmessage</span>/&gt;</span></span><br></pre></td></tr></table></figure><ol start="5"><li><p>前端判断</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">s:if</span> <span class="attr">test</span>=<span class="string">"#session.user1== null"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">s:if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">s:else</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">s:else</span>&gt;</span></span><br></pre></td></tr></table></figure><p>后端放在Session里</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServletActionContext.getRequest().getSession().setAttribute(<span class="string">"user1"</span>,user1);</span><br></pre></td></tr></table></figure></li><li><p>分页查询</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询热门商品</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Product&gt; <span class="title">findHot</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//分页查询，使用离线方法查询</span></span><br><span class="line">DetachedCriteria criteria=DetachedCriteria.forClass(Product.class);</span><br><span class="line"><span class="comment">//查询is_how为1</span></span><br><span class="line">criteria.add(Restrictions.eq(<span class="string">"is_hot"</span>, <span class="number">1</span>));</span><br><span class="line"><span class="comment">//倒序排序输出</span></span><br><span class="line">criteria.addOrder(Order.desc(<span class="string">"pdate"</span>));</span><br><span class="line"><span class="comment">//执行查询</span></span><br><span class="line">List&lt;Product&gt; list=<span class="keyword">this</span>.getHibernateTemplate().findByCriteria(criteria,<span class="number">0</span>,<span class="number">10</span>);</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>二级菜单<br>一级菜单配置：一对多用的Set集合当然也可以使用List，这样可以使二级目录无序显示</li></ol><p>Category.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Set&lt;CategorySecond&gt; categorySeconds=<span class="keyword">new</span> HashSet&lt;CategorySecond&gt;();</span><br></pre></td></tr></table></figure><p>Category.hbm.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"categorySeconds"</span> <span class="attr">lazy</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"cid"</span>&gt;</span><span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">"cn.dm.shop.categorysecond.vo.CategorySecond"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></table></figure><p>二级菜单配置：多对一<br>CategorySecond.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Category category;</span><br></pre></td></tr></table></figure><p>CategorySecond.hbm.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">many-to-one</span> <span class="attr">name</span>=<span class="string">"category"</span> <span class="attr">class</span>=<span class="string">"cn.dm.shop.category.vo.Category"</span> <span class="attr">column</span>=<span class="string">"cid"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">many-to-one</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在前端则是用了两次迭代（第二次是调用了set集合）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">s:iterator</span> <span class="attr">var</span>=<span class="string">"c"</span> <span class="attr">value</span>=<span class="string">"#session.clist"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"#c.cname"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">s:iterator</span> <span class="attr">var</span>=<span class="string">"cs"</span> <span class="attr">value</span>=<span class="string">"#c.categorySeconds"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"#cs.csname"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">s:iterator</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">s:iterator</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="8"><li>表单提交<br>js代码</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">function saveCart()&#123;</span><br><span class="line">document.getElementById("cartForm").submit();</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"cartForm"</span> <span class="attr">action</span>=<span class="string">"$&#123; pageContext.request.contextPath &#125;/cart_addCart.action"</span> <span class="attr">method</span>=<span class="string">"post"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"pid"</span> <span class="attr">value</span>=<span class="string">"&lt;s:property value="</span><span class="attr">model.pid</span>"/&gt;</span>"/&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"action"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span> <span class="attr">class</span>=<span class="string">"quantity"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>购买数量:<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"count"</span> <span class="attr">name</span>=<span class="string">"count"</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">maxlength</span>=<span class="string">"4"</span> <span class="attr">onpaste</span>=<span class="string">"return false;"</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span></span><br><span class="line">件</span><br><span class="line"><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"buy"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"addCart"</span> <span class="attr">class</span>=<span class="string">"addCart"</span> <span class="attr">value</span>=<span class="string">"加入购物车"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"saveCart()"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="9"><li><p>上传图片</p><p>前端</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"upload"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>后端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//文件上传需要的参数。</span></span><br><span class="line"><span class="keyword">private</span> File upload;<span class="comment">//上传的文件 upload与前端name一致</span></span><br><span class="line"><span class="keyword">private</span> String uploadFileName;<span class="comment">//上传的文件名</span></span><br><span class="line"><span class="keyword">private</span> String uploadContextPath;<span class="comment">//上传的路径</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> File <span class="title">getUpload</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> upload;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUpload</span><span class="params">(File upload)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.upload = upload;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUploadFileName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> uploadFileName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUploadFileName</span><span class="params">(String uploadFileName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.uploadFileName = uploadFileName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUploadContextPath</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> uploadContextPath;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUploadContextPath</span><span class="params">(String uploadContextPath)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.uploadContextPath = uploadContextPath;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(upload != <span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="comment">// 将商品图片上传到服务器上.</span></span><br><span class="line"><span class="comment">// 获得上传图片的服务器端路径.</span></span><br><span class="line">String path = ServletActionContext.getServletContext().getRealPath(</span><br><span class="line"><span class="string">"/products"</span>);</span><br><span class="line"><span class="comment">// 创建文件类型对象:</span></span><br><span class="line">File diskFile = <span class="keyword">new</span> File(path + <span class="string">"//"</span> + uploadFileName);</span><br><span class="line"><span class="comment">// 文件上传:</span></span><br><span class="line">FileUtils.copyFile(upload, diskFile);</span><br><span class="line"></span><br><span class="line">product.setImage(<span class="string">"products/"</span> + uploadFileName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">productService.save(product);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"savesuccess"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先说一下SSH框架中各自的作用：&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="SSH项目总结" scheme="http://dumengblog.club/tags/SSH%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>SSH项目-在线商城-买家端</title>
    <link href="http://dumengblog.club/2019/11/18/SSH%E9%A1%B9%E7%9B%AE-%E5%9C%A8%E7%BA%BF%E5%95%86%E5%9F%8E/"/>
    <id>http://dumengblog.club/2019/11/18/SSH项目-在线商城/</id>
    <published>2019-11-18T12:50:25.000Z</published>
    <updated>2019-12-05T12:37:22.527Z</updated>
    
    <content type="html"><![CDATA[<p>​    <a id="more"></a></p><p>​    关于这次SSH商城项目，首先说明前端不是自己写的，用的传智播客的前端，因为我只会一些简单的CSS+html去制作网页。</p><p>首先输入网址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localhost:8080/shop</span><br></pre></td></tr></table></figure><p>进入到首页，所有的商品都是从数据库查出来的，不是静态页面。</p><p><img src="/../asset/%E7%81%AB%E7%8B%90%E6%88%AA%E5%9B%BE_2019-11-18T12-38-43.500Z.png" alt="火狐截图_2019-11-18T12-38-43.500Z"></p><p><img src="/../asset/image-20191118210708670.png" alt="image-20191118210708670">        </p><p><img src="/../asset/image-20191118210727845.png" alt="image-20191118210727845"></p><p><img src="/../asset/image-20191118210746406.png" alt="image-20191118210746406"></p><p><img src="/../asset/image-20191118210819968.png" alt="image-20191118210819968"></p><p><img src="/../asset/image-20191118210905670.png" alt="image-20191118210905670"></p><p>当你点击一个商品时会显示对应的商品详情</p><p><img src="/../asset/image-20191118210400033.png" alt="image-20191118210400033"></p><p>点击加入购物车</p><p><img src="/../asset/image-20191118210444478.png" alt="image-20191118210444478"></p><p>当你再点击其他商品时，再加入购物车，也会在其中显示。</p><p><img src="/../asset/image-20191118210949493.png" alt="image-20191118210949493"></p><p>删除和清空购物车都可以实现</p><p>此时点击提交订单，假如你登录了，那么没问题会跳到订单页面，如果没登录会显示如下信息：</p><p><img src="/../asset/image-20191118211147950.png" alt="image-20191118211147950"></p><p>点击菜单里的登录</p><p>接下来去注册。</p><p><img src="/../asset/%E7%81%AB%E7%8B%90%E6%88%AA%E5%9B%BE_2019-11-18T12-40-34.772Z.png" alt="火狐截图_2019-11-18T12-40-34.772Z"></p><p>用户名这里会提示你，你的用户名是否可用</p><p><img src="/../asset/%E7%81%AB%E7%8B%90%E6%88%AA%E5%9B%BE_2019-11-18T12-41-55.160Z.png" alt="火狐截图_2019-11-18T12-41-55.160Z"></p><p>注册后会给你的邮箱发一封邮件</p><p><img src="/../asset/2JE%5BU1PU%250L8HM1%25HB9XBP.png" alt="img"></p><p><img src="/../asset/WSNW9%60GUVWGYHNGD620S74.png" alt="img"></p><p><img src="/../asset/QQ%E5%9B%BE%E7%89%8720191118211641.png" alt></p><p>登陆成功后返回购物车，此时菜单会更改。</p><p><img src="/../asset/image-20191118211850239.png" alt="image-20191118211850239"></p><p><img src="/../asset/image-20191118211926346.png" alt="image-20191118211926346"></p><p>点击订单会显示支付成功，因为就是一个自己的项目，所以没有继续做下去。</p><p><img src="/../asset/image-20191118212029107.png" alt="image-20191118212029107"></p><p>后台则实现了对商品，用户以及一级菜单的信息的改写。</p><p><img src="/../asset/image-20191121220411679.png" alt="image-20191121220411679"></p><p><img src="/../asset/image-20191121220429233.png" alt="image-20191121220429233"></p><p><img src="/../asset/image-20191121220444463.png" alt="image-20191121220444463"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="SSH项目" scheme="http://dumengblog.club/tags/SSH%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>Spring MVC</title>
    <link href="http://dumengblog.club/2019/11/13/Spring-MVC/"/>
    <id>http://dumengblog.club/2019/11/13/Spring-MVC/</id>
    <published>2019-11-13T12:39:56.000Z</published>
    <updated>2019-11-13T14:31:01.272Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-MVC模式"><a href="#1-MVC模式" class="headerlink" title="1. MVC模式"></a>1. MVC模式</h4><a id="more"></a><img src="/../asset/image-20191005174054629.png" alt="image-20191005174054629" style="zoom:50%;"><h4 id="2-Spring-MVC工作原理"><a href="#2-Spring-MVC工作原理" class="headerlink" title="2. Spring MVC工作原理"></a>2. Spring MVC工作原理</h4><img src="/../asset/image-20191005174247458.png" alt="image-20191005174247458" style="zoom:67%;"><p> 图中包含4个Spring MVC接口：DispatcherServlet、HandlerMapping、Controller和ViewResoler。<br>    Spring MVC所有的请求都经过DispatcherServlet来统一分发。DispatcherServlet将请求分发给Controller之前，需要借助于Spring MVC提供的HandlerMapping定位到具体的Controller。<br>    HandlerMapping接口负责完成客户请求到Controller映射。<br>    Controller接口将处理用户请求，这和Java Servlet扮演的角色是一致的。一旦Controller处理完用户请求，则返回ModelAndView对象给DispatcherServlet前端控制器，ModelAndView中包含了模型（Model）和视图（View）。从宏观角度考虑，DispatcherServlet是整个Web应用的控制器；从微观考虑，Controller是单个Http请求处理过程中的控制器，而ModelAndView是Http请求过程中返回的模型（Model）和视图（View）。<br>    ViewResolver接口（视图解析器）在Web应用中负责查找View对象，从而将相应结果渲染给客户。</p><h4 id="3-第一个MVC-应用"><a href="#3-第一个MVC-应用" class="headerlink" title="3. 第一个MVC 应用"></a>3. 第一个MVC 应用</h4><p>项目目录：</p><p><img src="/../asset/image-20191005174526336.png" alt="image-20191005174526336"></p><p>FirstController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dm.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.Controller;</span><br><span class="line"></span><br><span class="line"><span class="comment">//控制器类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstController</span> <span class="keyword">implements</span> <span class="title">Controller</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest arg0, HttpServletResponse arg1)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//创建ModelAndView对象</span></span><br><span class="line">ModelAndView mav=<span class="keyword">new</span> ModelAndView();</span><br><span class="line"><span class="comment">//想模型对象中添加数据</span></span><br><span class="line">mav.addObject(<span class="string">"msg"</span>, <span class="string">"这是我的第一个SpringMVC程序"</span>);</span><br><span class="line"><span class="comment">//设置逻辑视图名</span></span><br><span class="line">mav.setViewName(<span class="string">"/WEB-INF/jsp/first.jsp"</span>);</span><br><span class="line"><span class="comment">//返回ModelAndView对象</span></span><br><span class="line"><span class="keyword">return</span> mav;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>springmvc-config.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span>                 </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配 置处理器Handler，映射"/firstcontroller"--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"/firstController"</span> <span class="attr">class</span>=<span class="string">"com.dm.controller.FirstController"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 处理器映射器，将处理器Handler的name作为url进行查找 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 处理器适配器，匹配对处理器中的HandleRequest()方法进行调用  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>first.jsp</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=ISO-8859-1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>入门程序<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">$&#123;msg &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span></span></span><br><span class="line"><span class="tag"><span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"3.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置DispatcherServlet --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--初始化时加载文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-config.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 处理所有的URL --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行结果（别输错地址，因为没有定义welcomefile）：</p><p><img src="/../asset/image-20191005174823611.png" alt="image-20191005174823611"></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-MVC模式&quot;&gt;&lt;a href=&quot;#1-MVC模式&quot; class=&quot;headerlink&quot; title=&quot;1. MVC模式&quot;&gt;&lt;/a&gt;1. MVC模式&lt;/h4&gt;
    
    </summary>
    
    
    
      <category term="Spring MVC框架" scheme="http://dumengblog.club/tags/Spring-MVC%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Spring MVC 的核心类和注解</title>
    <link href="http://dumengblog.club/2019/11/13/Spring-MVC-%E7%9A%84%E6%A0%B8%E5%BF%83%E7%B1%BB%E5%92%8C%E6%B3%A8%E8%A7%A3/"/>
    <id>http://dumengblog.club/2019/11/13/Spring-MVC-的核心类和注解/</id>
    <published>2019-11-13T10:56:23.000Z</published>
    <updated>2019-11-13T13:35:39.710Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-DispatcherServlet"><a href="#1-DispatcherServlet" class="headerlink" title="1. DispatcherServlet"></a>1. DispatcherServlet</h4><p>全名是org.springframework.web.servlet.DispatcherServlet它在程序中充当着前端控制器的角色。在使用时，只需将其配置在项目的web.xml文件中，其配置代码如下：</p><a id="more"></a><img src="/../asset/image-20191005190649964.png" alt="image-20191005190649964" style="zoom:67%;"><p>假如你不用<init-param>name他会去找WEB-INF/springmvc-servlet.xml这样一个文件。</init-param></p><h4 id="2-Controller-注解类型"><a href="#2-Controller-注解类型" class="headerlink" title="2. @Controller 注解类型"></a>2. @Controller 注解类型</h4><p>org.springframework.stereotype.Controller注解类型用于指示Spring类的实例是一个控制器，其注解形式是@Controller。该注解在使用时不在用实现Controller接口，只需要将@Controller注解加入到控制器类上，然后通过Spring的扫描机制找到标注了该注解的控制器即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> controller;</span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line"><span class="comment">//处理请求的方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Spring MVC中，使用扫描机制找到应用中所有基于注解的控制器类。所以，为了让控制器类被Spring MVC框架扫描到，需要在配置文件中声明spring-context，并使用<a href="context:component-scan/" target="_blank" rel="noopener">context:component-scan/</a>元素指定控制器类的基本包（请确保所有控制器类都在基本包及其子包下）。</p><img src="/../asset/image-20191005193749416.png" alt="image-20191005193749416" style="zoom:67%;"><p>@RequestMapping 注解的使用</p><p>  在基于注解的控制器类中，可以为每个请求编写对应的处理方法。如何将请求与处理方法一一对应呢？需要使用org.springframework.web.bind.annotation.RequestMapping注解类型将请求与处理方法一一对应。</p><p>1．方法级别注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/index/login"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">/**login代表逻辑视图名称，需要根据Spring MVC配置</span></span><br><span class="line"><span class="comment"> * 文件中internalResourceViewResolver的前缀和后缀找到对应的物理视图</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/index/register"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">register</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"register"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2．类级别注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/index"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/register"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">register</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"register"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-DispatcherServlet&quot;&gt;&lt;a href=&quot;#1-DispatcherServlet&quot; class=&quot;headerlink&quot; title=&quot;1. DispatcherServlet&quot;&gt;&lt;/a&gt;1. DispatcherServlet&lt;/h4&gt;&lt;p&gt;全名是org.springframework.web.servlet.DispatcherServlet它在程序中充当着前端控制器的角色。在使用时，只需将其配置在项目的web.xml文件中，其配置代码如下：&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Spring MVC框架" scheme="http://dumengblog.club/tags/Spring-MVC%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
</feed>
