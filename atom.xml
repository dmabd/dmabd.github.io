<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dumeng&#39;s Blog</title>
  
  <subtitle>writedown everything</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://dumengblog.club/"/>
  <updated>2019-12-07T13:24:45.566Z</updated>
  <id>http://dumengblog.club/</id>
  
  <author>
    <name>dumeng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>常考链表操作</title>
    <link href="http://dumengblog.club/2019/12/07/%E5%B8%B8%E8%80%83%E9%93%BE%E8%A1%A8%E6%93%8D%E4%BD%9C/"/>
    <id>http://dumengblog.club/2019/12/07/常考链表操作/</id>
    <published>2019-12-07T13:10:23.000Z</published>
    <updated>2019-12-07T13:24:45.566Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-链表反转"><a href="#1-链表反转" class="headerlink" title="1. 链表反转"></a>1. 链表反转</h4><p>改变指针方向，将头结点改为尾节点。本次给出全部代码，后来只给部分代码</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">int</span> value;</span><br><span class="line"></span><br><span class="line">​Node next=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">​<span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">this</span>.value=value;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">linkedlisttest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​Node head=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">​<span class="function"><span class="keyword">public</span> Node <span class="title">getHead</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">​Node newNode=<span class="keyword">new</span> Node(data);</span><br><span class="line"></span><br><span class="line">​<span class="keyword">if</span>(head==<span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">​head=newNode;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​Node tmp=head;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">while</span>(tmp.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">​tmp=tmp.next;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​tmp.next=newNode;</span><br><span class="line"></span><br><span class="line">​</span><br><span class="line"></span><br><span class="line">​</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printList</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​Node tmp = head;</span><br><span class="line"></span><br><span class="line">​</span><br><span class="line"></span><br><span class="line">​<span class="keyword">while</span> (tmp != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">​System.out.print(tmp.value+<span class="string">" "</span>);</span><br><span class="line"></span><br><span class="line">​tmp = tmp.next;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​<span class="comment">//链表反转</span></span><br><span class="line"></span><br><span class="line">​<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverseListNode</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​Node pReverseHead=head;<span class="comment">//设置反转后的头结点</span></span><br><span class="line"></span><br><span class="line">​Node pNode=head;<span class="comment">//当前节点</span></span><br><span class="line"></span><br><span class="line">​Node pPrev=<span class="keyword">null</span>;<span class="comment">//前一个节点</span></span><br><span class="line"></span><br><span class="line">​<span class="keyword">while</span>(pNode!=<span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">​<span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">​ * 例如i,m,n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">​    由于反转需要改变指针的指向，但是一旦改变了指针的指向就没有指针指向下一个数，所以需要在改变i到m的指针顺序时</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">​    ，提前将下一个数存起来。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">​*/</span></span><br><span class="line"></span><br><span class="line">​Node pNext=pNode.next;<span class="comment">//存储下一个节点</span></span><br><span class="line"></span><br><span class="line">​<span class="keyword">if</span>(pNext==<span class="keyword">null</span>)</span><br><span class="line"></span><br><span class="line">​pReverseHead=pNode;<span class="comment">//令当前节点为反转链表的头结点</span></span><br><span class="line"></span><br><span class="line">​</span><br><span class="line"></span><br><span class="line">​pNode.next=pPrev;<span class="comment">//将当前节点的下一个节点设为前一个节点</span></span><br><span class="line"></span><br><span class="line">​</span><br><span class="line"></span><br><span class="line">​pPrev=pNode;<span class="comment">//前一个节点为当前节点</span></span><br><span class="line"></span><br><span class="line">​pNode=pNext;<span class="comment">//当前节点向下走</span></span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">this</span>.head=pReverseHead;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​linkedlisttest l=<span class="keyword">new</span> linkedlisttest();</span><br><span class="line"></span><br><span class="line">​l.insert(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">​l.insert(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">​l.insert(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">​l.printList();</span><br><span class="line"></span><br><span class="line">​System.out.println(<span class="string">"\n链表反转："</span>);</span><br><span class="line"></span><br><span class="line">​l.reverseListNode(l.getHead());</span><br><span class="line"></span><br><span class="line">​l.printList();</span><br><span class="line"></span><br><span class="line">​</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="//dumengblog.club/2019/12/07/常考链表操作/E:%5CBlog%5CHexo%5Csource%5Casset%5Cwps6C1F.tmp.jpg" alt="img"> </p><h4 id="2-链表从尾到头输出"><a href="#2-链表从尾到头输出" class="headerlink" title="2 .链表从尾到头输出"></a>2 .链表从尾到头输出</h4><p>直接递归，等到后来二叉树三种遍历也是这个思想</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printListReversely</span><span class="params">(Node plistHead)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">if</span>(plistHead!=<span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">​printListReversely(plistHead.next);</span><br><span class="line"></span><br><span class="line">​System.out.print(plistHead.value+<span class="string">" "</span>);</span><br><span class="line"></span><br><span class="line">​</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">主函数：</span><br><span class="line"></span><br><span class="line">​<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​linkedlisttest l=<span class="keyword">new</span> linkedlisttest();</span><br><span class="line"></span><br><span class="line">​l.insert(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">​l.insert(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">​l.insert(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">​l.printList();</span><br><span class="line"></span><br><span class="line">​System.out.println(<span class="string">"\n链表从尾到头输出："</span>);</span><br><span class="line"></span><br><span class="line">​l.printListReversely(l.getHead());</span><br><span class="line"></span><br><span class="line">​</span><br><span class="line"></span><br><span class="line">​</span><br><span class="line"></span><br><span class="line">​&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="//dumengblog.club/2019/12/07/常考链表操作/E:%5CBlog%5CHexo%5Csource%5Casset%5Cwps6C2F.tmp.jpg" alt="img"> </p><h4 id="3-判断链表是否有环"><a href="#3-判断链表是否有环" class="headerlink" title="3. 判断链表是否有环"></a>3. 判断链表是否有环</h4><p>定义两个指针，一个快指针，一个慢指针，两个指针同时移动，快指针每次移动两步，慢指针移动一步，每次都比较，直到快指针等于慢指针为止。（fast先到底部为null则为无环链表）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">Isloop</span><span class="params">(Node head)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">​Node fast=head;</span><br><span class="line"></span><br><span class="line">​Node slow=head;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">if</span>(fast==<span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">while</span>(fast!=<span class="keyword">null</span>&amp;&amp;fast.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">​fast=fast.next.next;</span><br><span class="line"></span><br><span class="line">​slow=slow.next;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">if</span>(fast==slow)&#123;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​</span><br><span class="line"></span><br><span class="line">​</span><br><span class="line"></span><br><span class="line">​<span class="keyword">return</span> (fast!=<span class="keyword">null</span>&amp;&amp;fast.next!=<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">​&#125;</span><br></pre></td></tr></table></figure><h4 id="4-如何删除重复元素"><a href="#4-如何删除重复元素" class="headerlink" title="4. 如何删除重复元素"></a>4. 如何删除重复元素</h4><p>对链表进行双重遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteDuplecate</span><span class="params">(Node head)</span></span>&#123;</span><br><span class="line">Node p=head;</span><br><span class="line"><span class="keyword">while</span>(p!=<span class="keyword">null</span>)&#123;</span><br><span class="line">Node q=p;</span><br><span class="line"><span class="keyword">while</span>(q.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(p.value==q.next.value)&#123;</span><br><span class="line">q.next=q.next.next;</span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line">q=q.next;</span><br><span class="line">&#125;</span><br><span class="line">p=p.next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/../asset/wps6C50.tmp.jpg" alt="img"> </p><p>9.4 如何找到倒数第k个元素</p><p>设置两个指针，一个正常从头到尾遍历，另一个先前移k-1步然后依次遍历，当这个快指针先到达尾部，则另一个指针的位置就是倒数第k个元素。</p><p>主函数：</p><p><img src="/../asset/wps6C51.tmp.jpg" alt="img"> </p><p>输出结果：</p><p><img src="/../asset/wps6C71.tmp.jpg" alt="img"> </p><p>9.5 判断两个链表是否相交</p><p>如果相交则有相同的尾节点</p><p>​    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isIntersect</span><span class="params">(Node h1,Node h2)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">if</span>(h1==<span class="keyword">null</span>||h2==<span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​Node tail=h1;</span><br><span class="line"></span><br><span class="line">​Node tail2=h2;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">while</span>(tail.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">​tail=tail.next;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">while</span>(tail2.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">​tail2=tail2.next;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">return</span> tail==tail2;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br></pre></td></tr></table></figure><p>9.6 链表排序</p><p>​    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">orderlist</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​Node nextNode = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">​Node curNode = head;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">while</span> (curNode.next != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">​nextNode = curNode.next;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">while</span> (nextNode != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">if</span> (curNode.data &gt; nextNode.data) &#123;</span><br><span class="line"></span><br><span class="line">​temp = curNode.data;</span><br><span class="line"></span><br><span class="line">​curNode.data = nextNode.data;</span><br><span class="line"></span><br><span class="line">​nextNode.data = temp;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​nextNode = nextNode.next;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​curNode = curNode.next;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-链表反转&quot;&gt;&lt;a href=&quot;#1-链表反转&quot; class=&quot;headerlink&quot; title=&quot;1. 链表反转&quot;&gt;&lt;/a&gt;1. 链表反转&lt;/h4&gt;&lt;p&gt;改变指针方向，将头结点改为尾节点。本次给出全部代码，后来只给部分代码&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="数据结构" scheme="http://dumengblog.club/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Java数据结构—-二叉树</title>
    <link href="http://dumengblog.club/2019/12/05/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94-%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://dumengblog.club/2019/12/05/Java数据结构—-二叉树/</id>
    <published>2019-12-05T12:04:11.000Z</published>
    <updated>2019-12-05T12:35:09.194Z</updated>
    
    <content type="html"><![CDATA[<h4 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树<a id="more"></a></h4><img src="/../asset/image-20191205200900883.png" alt="image-20191205200900883" style="zoom:50%;"><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> BianaryTree;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">treeNode</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> value;</span><br><span class="line">treeNode left;</span><br><span class="line">treeNode right;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">treeNode</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.value = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLeft</span><span class="params">(treeNode left)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.left = left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRight</span><span class="params">(treeNode right)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.right = right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">frontshow</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.print(value);</span><br><span class="line"><span class="keyword">if</span> (left != <span class="keyword">null</span>) &#123;</span><br><span class="line">left.frontshow();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (right != <span class="keyword">null</span>) &#123;</span><br><span class="line">right.frontshow();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showMid</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (left != <span class="keyword">null</span>) &#123;</span><br><span class="line">left.showMid();</span><br><span class="line">&#125;</span><br><span class="line">System.out.print(value);</span><br><span class="line"><span class="keyword">if</span> (right != <span class="keyword">null</span>) &#123;</span><br><span class="line">right.showMid();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showafter</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (left != <span class="keyword">null</span>) &#123;</span><br><span class="line">left.showafter();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (right != <span class="keyword">null</span>) &#123;</span><br><span class="line">right.showafter();</span><br><span class="line">&#125;</span><br><span class="line">System.out.print(value);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前序查找</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> treeNode <span class="title">frontSearch</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">treeNode target = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">// 对比当前节点的值</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.value == i) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 查找左儿子</span></span><br><span class="line"><span class="keyword">if</span> (left != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// 有可能查不到</span></span><br><span class="line">target = left.frontSearch(i);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不为空，说明左儿子已经查到</span></span><br><span class="line"><span class="keyword">if</span> (target != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 查找右儿子</span></span><br><span class="line"><span class="keyword">if</span> (right != <span class="keyword">null</span>) &#123;</span><br><span class="line">target = right.frontSearch(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">treeNode parent = <span class="keyword">this</span>;</span><br><span class="line"><span class="comment">// 判断左儿子</span></span><br><span class="line"><span class="keyword">if</span> (parent.left != <span class="keyword">null</span> &amp;&amp; parent.left.value == i) &#123;</span><br><span class="line">parent.left = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断右儿子</span></span><br><span class="line"><span class="keyword">if</span> (parent.right != <span class="keyword">null</span> &amp;&amp; parent.right.value == i) &#123;</span><br><span class="line">parent.right = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果都不是</span></span><br><span class="line"><span class="comment">// 递归检查并删除左儿子</span></span><br><span class="line">parent = left;</span><br><span class="line"><span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">parent.delete(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 递归检查并删除右儿子</span></span><br><span class="line">parent = right;</span><br><span class="line"><span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">parent.delete(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Binarytree</span> </span>&#123;</span><br><span class="line">treeNode root;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoot</span><span class="params">(treeNode root)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.root = root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> treeNode <span class="title">getRoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showFront</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">if</span> (root != <span class="keyword">null</span>)</span><br><span class="line">root.frontshow();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showMid</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">if</span> (root != <span class="keyword">null</span>)</span><br><span class="line">root.showMid();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showafter</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">if</span> (root != <span class="keyword">null</span>)</span><br><span class="line">root.showafter();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> treeNode <span class="title">frontSearch</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> root.frontSearch(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">if</span> (root.value == i) &#123;</span><br><span class="line">root = <span class="keyword">null</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">root.delete(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Binarytree binarytree = <span class="keyword">new</span> Binarytree();</span><br><span class="line">treeNode root = <span class="keyword">new</span> treeNode(<span class="number">1</span>);</span><br><span class="line">treeNode rootL = <span class="keyword">new</span> treeNode(<span class="number">2</span>);</span><br><span class="line">treeNode rootR = <span class="keyword">new</span> treeNode(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// 创建一个根节点</span></span><br><span class="line">binarytree.setRoot(root);</span><br><span class="line"><span class="comment">// 左子点</span></span><br><span class="line">root.setLeft(rootL);</span><br><span class="line"><span class="comment">// 右子点</span></span><br><span class="line">root.setRight(rootR);</span><br><span class="line"><span class="comment">// 为第二层的左子点创建两个子节点</span></span><br><span class="line">rootL.setLeft(<span class="keyword">new</span> treeNode(<span class="number">4</span>));</span><br><span class="line">rootL.setRight(<span class="keyword">new</span> treeNode(<span class="number">5</span>));</span><br><span class="line"><span class="comment">// 第二层右子点创建子节点</span></span><br><span class="line">rootR.setLeft(<span class="keyword">new</span> treeNode(<span class="number">6</span>));</span><br><span class="line">rootR.setRight(<span class="keyword">new</span> treeNode(<span class="number">7</span>));</span><br><span class="line">System.out.println(<span class="string">"前序遍历"</span>);</span><br><span class="line">binarytree.showFront();</span><br><span class="line">System.out.println(<span class="string">"\n中序遍历"</span>);</span><br><span class="line">binarytree.showMid();</span><br><span class="line">System.out.println(<span class="string">"\n后序遍历"</span>);</span><br><span class="line">binarytree.showafter();</span><br><span class="line">treeNode result = binarytree.frontSearch(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 输出一个对象，如果有就是查到了</span></span><br><span class="line">System.out.println(<span class="string">"\n"</span> + result);</span><br><span class="line"><span class="comment">// 删除一个子树</span></span><br><span class="line">binarytree.delete(<span class="number">3</span>);</span><br><span class="line">binarytree.showFront();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二叉顺序树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span></span>&#123;</span><br><span class="line"><span class="comment">//节点的权</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> value;</span><br><span class="line"><span class="comment">//左儿子</span></span><br><span class="line"><span class="keyword">public</span> TreeNode left;</span><br><span class="line"><span class="comment">//右儿子</span></span><br><span class="line"><span class="keyword">public</span> TreeNode right;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.value=value;</span><br><span class="line"><span class="keyword">this</span>.left=<span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">this</span>.right=<span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinaryTree</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> TreeNode root;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BinaryTree</span><span class="params">()</span></span>&#123;</span><br><span class="line">root=<span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span> <span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">TreeNode newNode=<span class="keyword">new</span> TreeNode(value); </span><br><span class="line"><span class="keyword">if</span>(root==<span class="keyword">null</span>)&#123;</span><br><span class="line">root=newNode;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">TreeNode current =root;</span><br><span class="line">TreeNode parent;</span><br><span class="line"><span class="comment">//寻找插入的位置</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">parent=current;</span><br><span class="line"><span class="keyword">if</span>(value&lt;current.value)&#123;</span><br><span class="line">current=current.left;</span><br><span class="line"><span class="keyword">if</span>(current==<span class="keyword">null</span>)&#123;</span><br><span class="line">parent.left=newNode;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">current=current.right;</span><br><span class="line"><span class="keyword">if</span>(current==<span class="keyword">null</span>)&#123;</span><br><span class="line">parent.right=newNode;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将数值输入构建二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span> []value)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;value.length;i++)&#123;</span><br><span class="line">insert(value[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中序遍历二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(TreeNode localRoot)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(localRoot!=<span class="keyword">null</span>)&#123;</span><br><span class="line">inOrder(localRoot.left);</span><br><span class="line">System.out.print(localRoot.value+<span class="string">" "</span>);</span><br><span class="line">inOrder(localRoot.right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inOrder</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.inOrder(<span class="keyword">this</span>.root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//先序遍历二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(TreeNode localRoot)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(localRoot!=<span class="keyword">null</span>)&#123;</span><br><span class="line">System.out.print(localRoot.value+<span class="string">" "</span>);</span><br><span class="line">preOrder(localRoot.left);</span><br><span class="line">preOrder(localRoot.right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.preOrder(<span class="keyword">this</span>.root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//后序遍历二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nextOrder</span><span class="params">(TreeNode localRoot)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(localRoot!=<span class="keyword">null</span>)&#123;</span><br><span class="line">nextOrder(localRoot.left);</span><br><span class="line">nextOrder(localRoot.right);</span><br><span class="line">System.out.print(localRoot.value+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nextOrder</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.nextOrder(<span class="keyword">this</span>.root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">BinaryTree tree=<span class="keyword">new</span> BinaryTree();</span><br><span class="line"><span class="keyword">int</span> []data=&#123;<span class="number">2</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">5</span>&#125;;</span><br><span class="line">tree.buildTree(data);</span><br><span class="line">System.out.println(<span class="string">"二叉树中序遍历"</span>);</span><br><span class="line">tree.inOrder();</span><br><span class="line">System.out.println(<span class="string">"\n二叉树先序遍历"</span>);</span><br><span class="line">tree.preOrder();</span><br><span class="line">System.out.println(<span class="string">"\n二叉树后序遍历"</span>);</span><br><span class="line">tree.nextOrder();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;二叉树&quot;&gt;&lt;a href=&quot;#二叉树&quot; class=&quot;headerlink&quot; title=&quot;二叉树&quot;&gt;&lt;/a&gt;二叉树&lt;/h4&gt;
    
    </summary>
    
    
    
      <category term="数据结构" scheme="http://dumengblog.club/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Java排序算法</title>
    <link href="http://dumengblog.club/2019/12/04/Java%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://dumengblog.club/2019/12/04/Java排序算法/</id>
    <published>2019-12-04T09:04:33.000Z</published>
    <updated>2019-12-05T12:35:29.265Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>选择排序</p><p>该方法基本原理如下：</p><p>1.给定一组数据，经过第一轮比较后得到最小的记录，然后将该记录与第一个记录的数据进行交换</p><p>2.然后接着对除了第一个数据进行比较，得到最小的记录，与第二个记录进行交换</p><p>3.直到比较的记录只有一个为止</p><a id="more"></a><p>以数组 [38 , 65 , 97 , 76 , 13 , 27 , 49] 为例</p><p>第一次排序：13  [65  97  76  38  27  49]</p><p>第一次排序：13  27  [97  76  38  65  49]</p><p>第一次排序：13  27  38  [76  97  65  49]</p><p>第一次排序：13  27  38   49 [97  65  76]</p><p>第一次排序：13  27  38   49  65  [97 76]</p><p>第一次排序：13  27  38   49  65   76[97]</p><p>最终排序结果：13  27  38   49   65  76  97</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">selectSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> []a=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">38</span>,<span class="number">65</span>,<span class="number">97</span>,<span class="number">76</span>,<span class="number">13</span>,<span class="number">27</span>,<span class="number">49</span>&#125;;</span><br><span class="line">selectSort(a);</span><br><span class="line">System.out.println(Arrays.toString(a));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span> []a )</span></span>&#123;</span><br><span class="line"><span class="comment">//确定最小的数</span></span><br><span class="line"><span class="keyword">int</span> temp=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//下标</span></span><br><span class="line"><span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</span><br><span class="line">temp=a[i];</span><br><span class="line">flag=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;a.length;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[j]&lt;temp)&#123;</span><br><span class="line">temp=a[j];</span><br><span class="line">flag=j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag!=i)&#123;</span><br><span class="line">a[flag]=a[i];</span><br><span class="line">a[i]=temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>插入排序</li></ol><p>和选择排序类似，假设第一个记录自成一个有序数列，其余记录皆为无序数列，接着从第二个记录开始，按照记录的大小依次将当前处理的记录插入到其之前的有序数列中，直至最后一个记录插入到有序数列中为止。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">insertSort</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Random r=<span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">int</span> []a=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">6</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</span><br><span class="line">a[i]=r.nextInt(<span class="number">9</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Arrays.toString(a));</span><br><span class="line">insertSort(a);</span><br><span class="line">System.out.println(Arrays.toString(a));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span> []arr)</span></span>&#123;</span><br><span class="line"><span class="comment">//遍历所有的数字</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> temp=arr[i];</span><br><span class="line"><span class="keyword">int</span> j=i;</span><br><span class="line"><span class="keyword">if</span>(arr[j-<span class="number">1</span>]&gt;temp)&#123;</span><br><span class="line"><span class="keyword">while</span>(j&gt;=<span class="number">1</span>&amp;&amp;arr[j-<span class="number">1</span>]&gt;temp)&#123;</span><br><span class="line">arr[j]=arr[j-<span class="number">1</span>];</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">arr[j]=temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>冒泡排序</li></ol><p>如气泡一样上升，从第一个记录开始，两个相邻的数据依次对比，当前面的记录大于后面的记录时，交换位置，重复到只有一个比较的数为止</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> [] arr=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">5</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">7</span>&#125;;</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">bubblesort(arr);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//比较length-1轮</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubblesort</span><span class="params">(<span class="keyword">int</span> [] arr)</span></span>&#123;</span><br><span class="line"><span class="comment">//控制比较多少轮</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line"><span class="comment">//控制比较的次数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;arr.length-i-<span class="number">1</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line"><span class="keyword">int</span> tmp=arr[j];</span><br><span class="line">arr[j]=arr[j+<span class="number">1</span>];</span><br><span class="line">arr[j+<span class="number">1</span>]=tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>归并排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeSort</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> []a=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">38</span>,<span class="number">65</span>,<span class="number">97</span>,<span class="number">76</span>,<span class="number">13</span>,<span class="number">27</span>,<span class="number">49</span>&#125;;</span><br><span class="line">sort(a,<span class="number">0</span>,a.length-<span class="number">1</span>);</span><br><span class="line">System.out.println(Arrays.toString(a));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] a,<span class="keyword">int</span> low,<span class="keyword">int</span> high)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (low+high)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(low&lt;high)&#123;</span><br><span class="line">            sort(a,low,mid);</span><br><span class="line">            sort(a,mid+<span class="number">1</span>,high);</span><br><span class="line">            <span class="comment">//左右归并</span></span><br><span class="line">            merge(a,low,mid,high);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> low, <span class="keyword">int</span> mid, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[high-low+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> i= low;</span><br><span class="line">        <span class="keyword">int</span> j = mid+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 把较小的数先移到新数组中</span></span><br><span class="line">        <span class="keyword">while</span>(i&lt;=mid &amp;&amp; j&lt;=high)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&lt;a[j])&#123;</span><br><span class="line">                temp[k++] = a[i++];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                temp[k++] = a[j++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 把左边剩余的数移入数组 </span></span><br><span class="line">        <span class="keyword">while</span>(i&lt;=mid)&#123;</span><br><span class="line">            temp[k++] = a[i++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 把右边边剩余的数移入数组</span></span><br><span class="line">        <span class="keyword">while</span>(j&lt;=high)&#123;</span><br><span class="line">            temp[k++] = a[j++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 把新数组中的数覆盖nums数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>;x&lt;temp.length;x++)&#123;</span><br><span class="line">            a[x+low] = temp[x];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li><p><strong>快速排序</strong></p><p><a href="https://blog.csdn.net/shujuelin/article/details/82423852" target="_blank" rel="noopener">原理</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Random r=<span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">int</span> []a=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">6</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</span><br><span class="line">a[i]=r.nextInt(<span class="number">9</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Arrays.toString(a));</span><br><span class="line">quicksort(a,<span class="number">0</span>,a.length-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(Arrays.toString(a));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quicksort</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(start&lt;end)&#123;</span><br><span class="line"><span class="comment">//把数组中第0个数字作为标准数</span></span><br><span class="line"><span class="keyword">int</span> st=arr[start];</span><br><span class="line"><span class="comment">//记录需要排序的下标</span></span><br><span class="line"><span class="keyword">int</span> low=start;</span><br><span class="line"><span class="keyword">int</span> high=end;</span><br><span class="line"><span class="comment">//循环找比标准数大的数和比它小的数</span></span><br><span class="line"><span class="keyword">while</span>(low&lt;high)&#123;</span><br><span class="line"><span class="comment">//右边的数字比标准数小，高的下标往前移</span></span><br><span class="line"><span class="keyword">while</span>(low&lt;high&amp;&amp;st&lt;=arr[high])&#123;</span><br><span class="line">high--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用右边的数字替换左边的数字</span></span><br><span class="line">arr[low]=arr[high];</span><br><span class="line"><span class="comment">//如果左边的数字比标准数小</span></span><br><span class="line"><span class="keyword">while</span>(low&lt;high&amp;&amp;arr[low]&lt;=st)&#123;</span><br><span class="line">low++;</span><br><span class="line">&#125;</span><br><span class="line">arr[high]=arr[low];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//把标准数赋给低的下标所在位置的元素</span></span><br><span class="line">arr[low]=st;</span><br><span class="line"><span class="comment">//处理所有小的数字</span></span><br><span class="line">quicksort(arr, start,low);</span><br><span class="line"><span class="comment">//处理所有大的数字</span></span><br><span class="line">quicksort(arr, low+<span class="number">1</span>,end);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;选择排序&lt;/p&gt;
&lt;p&gt;该方法基本原理如下：&lt;/p&gt;
&lt;p&gt;1.给定一组数据，经过第一轮比较后得到最小的记录，然后将该记录与第一个记录的数据进行交换&lt;/p&gt;
&lt;p&gt;2.然后接着对除了第一个数据进行比较，得到最小的记录，与第二个记录进行交换&lt;/p&gt;
&lt;p&gt;3.直到比较的记录只有一个为止&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="数据结构" scheme="http://dumengblog.club/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>java数据结构—-栈</title>
    <link href="http://dumengblog.club/2019/11/28/java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94-%E6%A0%88/"/>
    <id>http://dumengblog.club/2019/11/28/java数据结构—-栈/</id>
    <published>2019-11-28T03:18:16.000Z</published>
    <updated>2019-11-28T04:17:10.381Z</updated>
    
    <content type="html"><![CDATA[<p>栈是一种只能在一端进行插入和删除操作的特殊线性表。</p><p>其中，允许插入和删除的一端称为栈顶，另一端称为栈底。通常，将栈的插入操作称为入栈，删除操作称为出栈。入栈时元素总是放在栈底，而出栈的总是栈顶元素。因此，栈中元素采用的是“后进先出”的方式。</p><a id="more"></a><p>栈的数据元素类型可以任意，只要是同一种类型即可。它的基本操作包括清空、判空、求元素个数、获取栈顶、入栈和出栈等。<br>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mystack</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> [] elements;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Mystack</span><span class="params">()</span></span>&#123;</span><br><span class="line">elements=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//压入元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> element)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] newArr = <span class="keyword">new</span> <span class="keyword">int</span>[elements.length + <span class="number">1</span>];</span><br><span class="line"><span class="comment">// 复制数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; elements.length; i++) &#123;</span><br><span class="line">newArr[i] = elements[i];</span><br><span class="line">&#125;</span><br><span class="line">newArr[elements.length] = element;</span><br><span class="line"><span class="comment">// 新数组替换原数组</span></span><br><span class="line">elements = newArr;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//取出栈顶元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(elements.length==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"stack is empty"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//取出最后一个元素</span></span><br><span class="line"><span class="keyword">int</span> element=elements[elements.length-<span class="number">1</span>];</span><br><span class="line"><span class="comment">//创建一个新数组</span></span><br><span class="line"><span class="keyword">int</span> newArr[]=<span class="keyword">new</span> <span class="keyword">int</span>[elements.length-<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;elements.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">newArr[i]=elements[i];</span><br><span class="line">&#125;</span><br><span class="line">elements=newArr;</span><br><span class="line"><span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(Arrays.toString(elements));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//取出栈顶元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">peek</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(elements.length==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"stack is empty"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> elements[elements.length-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断栈是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> elements.length==<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Mystack mystack=<span class="keyword">new</span> Mystack();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">mystack.push(i*<span class="number">6</span>);</span><br><span class="line">&#125;</span><br><span class="line">mystack.show();</span><br><span class="line">System.out.println(mystack.pop());</span><br><span class="line">System.out.println(mystack.pop());</span><br><span class="line">mystack.show();</span><br><span class="line">System.out.println(mystack.peek());</span><br><span class="line">System.out.println(mystack.isEmpty());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;栈是一种只能在一端进行插入和删除操作的特殊线性表。&lt;/p&gt;
&lt;p&gt;其中，允许插入和删除的一端称为栈顶，另一端称为栈底。通常，将栈的插入操作称为入栈，删除操作称为出栈。入栈时元素总是放在栈底，而出栈的总是栈顶元素。因此，栈中元素采用的是“后进先出”的方式。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="数据结构" scheme="http://dumengblog.club/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>java数据结构—-数组</title>
    <link href="http://dumengblog.club/2019/11/26/java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94-%E6%95%B0%E7%BB%84/"/>
    <id>http://dumengblog.club/2019/11/26/java数据结构—-数组/</id>
    <published>2019-11-26T09:14:05.000Z</published>
    <updated>2019-12-05T12:36:05.838Z</updated>
    
    <content type="html"><![CDATA[<p>在这里概念性的东西讲也是没有意义的，直接上代码：</p><ol><li>面向对象的数组（一些常见的方法）</li></ol><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.RuntimeErrorException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyArray</span> </span>&#123;</span><br><span class="line"><span class="comment">// 用于存储数据的数组</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] elements;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyArray</span><span class="params">()</span> </span>&#123;</span><br><span class="line">elements = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数组长度</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> elements.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在数组末尾加一个元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] newArr = <span class="keyword">new</span> <span class="keyword">int</span>[elements.length + <span class="number">1</span>];</span><br><span class="line"><span class="comment">// 复制数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; elements.length; i++) &#123;</span><br><span class="line">newArr[i] = elements[i];</span><br><span class="line">&#125;</span><br><span class="line">newArr[elements.length] = a;</span><br><span class="line"><span class="comment">// 新数组替换原数组</span></span><br><span class="line">elements = newArr;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出数组</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(Arrays.toString(elements));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除数组中的元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(index&lt;<span class="number">0</span>||index&gt;elements.length-<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"下标越界"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建一个新的数组长度为原数组减一</span></span><br><span class="line"><span class="keyword">int</span> [] newarr=<span class="keyword">new</span> <span class="keyword">int</span> [elements.length-<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;newarr.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;index)&#123;</span><br><span class="line">newarr[i]=elements[i];</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">newarr[i]=elements[i+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">elements=newarr;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//获取某个下标的元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(index&lt;<span class="number">0</span>||index&gt;elements.length-<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"下标越界"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> elements[index];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入一个元素到指定位置</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> index,<span class="keyword">int</span> element)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(index&lt;<span class="number">0</span>||index&gt;elements.length-<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"下标越界"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> []newArr=<span class="keyword">new</span> <span class="keyword">int</span> [elements.length+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;elements.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;index)&#123;</span><br><span class="line">newArr[i]=elements[i];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">newArr[i+<span class="number">1</span>]=elements[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">newArr[index]=element;</span><br><span class="line">elements=newArr;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//替换指定位置的函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> index,<span class="keyword">int</span> element)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(index&lt;<span class="number">0</span>||index&gt;elements.length-<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"下标越界"</span>);</span><br><span class="line">&#125;</span><br><span class="line">elements[index]=element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">MyArray a = <span class="keyword">new</span> MyArray();</span><br><span class="line">System.out.println(<span class="string">"当前数组长度："</span>+a.size());</span><br><span class="line">a.add(<span class="number">1</span>);</span><br><span class="line">System.out.println(<span class="string">"当前数组长度："</span>+a.size());</span><br><span class="line">a.show();</span><br><span class="line">a.add(<span class="number">7</span>);</span><br><span class="line">a.show();</span><br><span class="line">a.delete(<span class="number">1</span>);</span><br><span class="line">a.show();</span><br><span class="line">System.out.println(a.get(<span class="number">0</span>));</span><br><span class="line">a.insert(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">a.show();</span><br><span class="line">a.set(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">a.show();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>数组的查找</p><ol><li><p>线性查找(过于简单)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testSearch</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//目标数组</span></span><br><span class="line"><span class="keyword">int</span> []arr=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="comment">//目标元素</span></span><br><span class="line"><span class="keyword">int</span> a=<span class="number">6</span>;</span><br><span class="line"><span class="keyword">int</span> index=-<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[i]==a)&#123;</span><br><span class="line">index=i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印目标元素的下标</span></span><br><span class="line">System.out.println(index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><ol start="2"><li><p>二分查找</p><p>假如中间位置与目标元素大小相同那么直接跳出循环，不同则判断中间位置与目标元素的大小，改变首位位置，如果大于目标元素，end=mid-1，小于则begin=mid+1。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testBinarySearch</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 目标数组</span></span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> &#125;;</span><br><span class="line"><span class="comment">// 目标元素</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">9</span>;</span><br><span class="line"><span class="comment">//记录开始和结束位置</span></span><br><span class="line"><span class="keyword">int</span> begin=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> end=arr.length-<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> mid=(begin+end)/<span class="number">2</span>;</span><br><span class="line"><span class="comment">//记录位置</span></span><br><span class="line"><span class="keyword">int</span> index=-<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[mid]==a)&#123;</span><br><span class="line">index=a;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">//中间元素不是要查找的元素</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//比目标元素大</span></span><br><span class="line"><span class="keyword">if</span>(arr[mid]&gt;a)&#123;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">end=mid-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">begin=mid+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">mid=(begin+end)/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在这里概念性的东西讲也是没有意义的，直接上代码：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;面向对象的数组（一些常见的方法）&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="数据结构" scheme="http://dumengblog.club/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>java面试题</title>
    <link href="http://dumengblog.club/2019/11/25/java%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://dumengblog.club/2019/11/25/java面试题/</id>
    <published>2019-11-25T12:07:47.000Z</published>
    <updated>2019-11-25T12:28:34.155Z</updated>
    
    <content type="html"><![CDATA[<p>#### </p><p>今天在逛牛客网打卡时，发现了牛客网有一个比较系统的面试题但是有些回答有点草率，但是问题都不错建议看看。-&gt;<a href="https://www.nowcoder.com/tutorial/94/4206176d637541fa92c784a4f547e979" target="_blank" rel="noopener">牛客网的面试题</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#### &lt;/p&gt;
&lt;p&gt;今天在逛牛客网打卡时，发现了牛客网有一个比较系统的面试题但是有些回答有点草率，但是问题都不错建议看看。-&amp;gt;&lt;a href=&quot;https://www.nowcoder.com/tutorial/94/4206176d637541fa92c784
      
    
    </summary>
    
    
    
      <category term="面试" scheme="http://dumengblog.club/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>java 容器</title>
    <link href="http://dumengblog.club/2019/11/23/java-%E5%AE%B9%E5%99%A8/"/>
    <id>http://dumengblog.club/2019/11/23/java-容器/</id>
    <published>2019-11-23T09:43:10.000Z</published>
    <updated>2019-12-05T12:36:42.378Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Java-Collections框架是什么"><a href="#Java-Collections框架是什么" class="headerlink" title="Java Collections框架是什么"></a>Java Collections框架是什么</h4><a id="more"></a><p>Java  Collections框架中包含了大量集合接口以及这些接口的实现类和操作它们的算法(例如排序、查找、反转、替换、复制、取最小元素、取最大元素等)，具体而言，主要提供了List (列表)、Queue (队列)、Set (集合)、Stack (栈)和Map (映射表，用于存放键值对)等数据结构。其中，List、 Queue、 Set、 Stack 都继承自Collection接口。<br>Collection是整个集合框架的基础，它里面储存一组对象， 表示不同类型的Collections,它的作用只是提供维护一-组对象的基本接口而已。</p><p>下面分别介绍Set、List 和Map3个接口。</p><p>1) Set表示数学意义上的集合概念。其最主要的特点是集合中的元素不能重复，因此存入Set的每个元素都必须定义equals( )方法来确保对象的唯一性。该接口有两个实现类: Hash-Set和TreeSet。其中TreeSet实现了SortedSet 接口，因此TreeSet容器中的元素是有序的。</p><p>2) List 又称为有序的Collection。它按对象进人的顺序保存对象，所以它能对列表中的每个元素的插人和删除位置进行精确的控制。同时，它可以保存重复的对象。LinkedList、 Array-List和Vector都实现了List 接口。</p><p>3) Map提供了一个从键映射到值的数据结构。它用于保存键值对，其中值可以重复，但键是唯一的， 不能重复。Java 类库中有多个实现该接口的类: HashMap、 TreeMap、Linked-HashMap、WeakHashMap 和IdentityHashMap。虽然它们都实现了相同的接口，但执行效率却不是完全相同的。具体而言，HashMap 是基于散列表实现的，采用对象的HashCode可以进行快速查询。LinkedHashMap采用列表来维护内部的顺序。TreeMap 基于红黑树的数据结构来实现的， 内部元素 是按需排列的。 </p><h4 id="什么是迭代器？"><a href="#什么是迭代器？" class="headerlink" title="什么是迭代器？"></a>什么是迭代器？</h4><p> 迭代器(Iterator)是个对象， 它的工作是遍历并选择序列中的对象，它提供了一种切问一个容器(container) 对象中的各个元素，而又不必暴露该对象内部细节的方法。通过迭代器，开发人员不需要了解容器底层的结构，就可以实现对容器的遍历。由于创建迭代器的代价小，因此迭代器通常被称为轻量级的容器。<br>迭代器的使用主要有以下3个方面的注意事项:</p><p>1)使用容器的iterator( )方法返回一个Iterator, 然后通过Iterator 的next( )方法返回第1个元素。</p><p>2)使用Iterator的hasNext( )方法判断容器中是否还有元素，如果有，可以使用next()方法获取下一个元素。</p><p>3)可以通过remove()方法删除迭代器返回的元素。<br>Iterator支持派生的兄弟成员。ListIterator 只存在于List中，支持在迭代期间向List中添加或删除元素，并且可以在List 中双向滚动。<br>Iterator的使用方法如下例所示:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IteratorTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">List&lt;String&gt; list=<span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">list.add(<span class="string">"first"</span>);</span><br><span class="line">list.add(<span class="string">"second"</span>);</span><br><span class="line">list.add(<span class="string">"third"</span>);</span><br><span class="line">list.add(<span class="string">"forth"</span>);</span><br><span class="line"><span class="keyword">for</span>(Iterator&lt;String&gt; iter=list.iterator();iter.hasNext();)&#123;</span><br><span class="line">String str=iter.next();</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 运行结果：</p><p>first<br>second<br>third<br>forth</p><p>在使用Iterator（）方法中会遇到ConcurrentModificationException 异常，这通常是因为在Iterator遍历容器的同时又对容器进行增加或者删除导致的，或者由于多线程所致，当一个线程进行迭代器遍历容器的同时，另一个线程对这个容器进行增加或者删除操作。下例主要介绍单线程抛出ConcurrentModificationException的情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IteratorTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">List&lt;String&gt; list=<span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">list.add(<span class="string">"first"</span>);</span><br><span class="line">list.add(<span class="string">"second"</span>);</span><br><span class="line">list.add(<span class="string">"third"</span>);</span><br><span class="line">list.add(<span class="string">"fourth"</span>);</span><br><span class="line"><span class="keyword">for</span>(Iterator&lt;String&gt; iter=list.iterator();iter.hasNext();)&#123;</span><br><span class="line">String str=iter.next();</span><br><span class="line">System.out.println(str);</span><br><span class="line"><span class="keyword">if</span>(str.equals(<span class="string">"second"</span>))&#123;</span><br><span class="line">list.add(<span class="string">"five"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>first<br>second<br>Exception in thread “main” java.util.ConcurrentModificationException<br>    at java.util.LinkedList$ListItr.checkForComodification(LinkedList.java:761)<br>    at java.util.LinkedList$ListItr.next(LinkedList.java:696)<br>    at IteratorTest.main(IteratorTest.java:14)</p><p> 抛出上述异常的主要原因是当调用容器的iterator( )方法返回Iterator 对象时，把容器中包含对象的个数赋值给了一个变量expectedModCount,在调用next( )方法时会比较变量expectedModCount与容器中实际对象的个数modCount的值是否相等，若二者不相等，则会抛出ConcurrentModificationException异常，因此在使用Iterator遍历容器的过程中，如果对容器进行增加或删除操作，就会改变容器中对象的数量，从而导致抛出异常。</p><p>解决方法如下:在遍历的过程中把需要删除的对象保存到一个集合中，等遍历结束后在调用removeAll( )方法来删除，或者使用iter. remove( )方法。</p><p>以上主要介绍了单线程的解决方案，那么多线程访问容器的过程中抛出ConcurrentModificationException异常又该怎么解决呢?<br>1)在JDK 1.5版本引人了线程安全的容器，比如ConcurrentHashMap和CopyOnWriteArray-List等。可以使用这些线程安全的容器来代替非线程安全的容器。<br>2)在使用迭代器遍历容器时对容器的操作放到synchronized代码块中，但是当引用程序并发程度比较高时，这会严重影响程序的性能。</p><p>引申: Iterator 与Listlterator有什么区别?<br>Iterator 只能正向遍历集合，适用于获取移除元素。Lsterator 继承自Iterator, 专门针对Lis,可以从两个方向来遍历List,同时支持元素的修改。</p><h4 id="ArrayList-，Vector和LinkedList有什么区别"><a href="#ArrayList-，Vector和LinkedList有什么区别" class="headerlink" title="ArrayList ，Vector和LinkedList有什么区别"></a>ArrayList ，Vector和LinkedList有什么区别</h4><p>这三者都是实现集合框架中的List，也就是所谓的有序集合，因此具体功能也比较近似，比如都提供按照位置进行定位、添加或者删除的操作，都提供迭代器以遍历其内容等。但因为具体的设计区别，在行为、性能、线程安全等方面，表现又有很大不同。</p><p>  Vector 是 Java 早期提供的线程安全的动态数组，如果不需要线程安全，并不建议选择，毕竟同步是有额外开销的。Vector 内部是使用对象数组来保存数据，可以根据需要自动的增加容量，当数组已满时，会创建新的数组，并拷贝原有数组数据。</p><p>  ArrayList 是应用更加广泛的动态数组实现，它本身不是线程安全的，所以性能要好很多。与 Vector近似，ArrayList 也是可以根据需要调整容量，不过两者的调整逻辑有所区别，Vector 在扩容时会提高 1 倍，而 ArrayList 则是增加 50%。</p><p> LinkedList 顾名思义是 Java 提供的双向链表，所以它不需要像上面两种那样调整容量，它也不是线程安全的。</p><p>谈谈不同容器类型适合的场景：</p><p>  Vector 和 ArrayList 作为动态数组，其内部元素以数组形式顺序存储的，内存为一连续的区域，所以非常适合随机访问的场合。除了尾部插入和删除元素，往往性能会相对较差，比如我们在中间位置插入一个元素，需要移动后续所有元素。数组大小固定，不适合动态存储，不方便动态添加。<br> LinkedList 进行节点插入、删除却要高效得多，大小可变 ，内存可能是不连续内存，链式存储。但是只能通过顺次指针访问，查询效率低，随机访问性能则要比动态数组慢。<br>  因此，在应用开发中，如果事先可以估计到，应用操作是偏向于插入、删除，还是随机访问较多，就可以针对性的进行选择。</p><p>总结：</p><ul><li>快速插入、删除元素，使用LinkedList</li><li>快速随机访问元素，使用ArrayList</li><li>单线程，使用List，比如ArrayList</li><li>多线程，使用Vector</li></ul><h4 id="HashMap、Hashtable、TreeMap、和WeakHashMap有什么区别"><a href="#HashMap、Hashtable、TreeMap、和WeakHashMap有什么区别" class="headerlink" title="HashMap、Hashtable、TreeMap、和WeakHashMap有什么区别"></a>HashMap、Hashtable、TreeMap、和WeakHashMap有什么区别</h4><p> Java为数据结构中的映射定义了一个接口java. uil Map,它包括3个实现类: HahMap、Hashtable和TreeMep. Map 是用来存储键值对的数据结构，在数组中通过数组下标来对其内容索引的，而在Map中，则是通过对象来进行索引，用来索引的对象叫做key,其对应的对象叫做value。<br>HashMap是一个最常用的Map,它根据键的HashCode值存储数据，根据键可以直接获取它的值，具有很快的访问速度。由于HashMap与Hashtable都采用了hash法进行索引，因此二者具有许多相似之处，它们主要有如下的一些区别:<br>1) HashMap 是Hashtable的轻量级实现( 非线程安全的实现)，它们都完成了Map 接口，主要区别在于HashMap允许空(null) 键值(key) (但需要注意， 最多只允许一条记录的键为null,不允许多条记录的值为null),而Hashtable不允许。</p><p>2) HashMap 把Hashtable的contains 方法去掉了，改成containsvalue和containsKey.因为contains方法容易让人引起误解。Hashtable 继承自Dictionary 类，而HashMap是Java 1.2引进的Map interface的一个实现。</p><p>3) Hashtable 的方法是线程安全的，而HashMap不支持线程的同步，所以它不是线程安全的。在多个线程访问Hashtable时， 不需要开发人员对它进行同步，面对于HashMap, 开发人员必须提供额外的同步机制。所以，就效率而言，HashMap 可能高于Hashtable</p><p>4) Hashable使用Enumeration, HashMap 使用lterator</p><p>5) Hashable和HashMap采用的hash/ rehash算法都几乎一样，所以性能不会有很大的差异。</p><p>6)在Hashtable 中，hash 数组默认大小是11,增加的方式是oldx2+1。在HeshMap中，hash数组的默认大小是16，而且一定是2的指数。</p><p>7) hash值的使用不同，Hashtable直接使用对象的hashCode。</p><p>以上3种类型中，使用最多的是HashMap, HashMap 里面存人的键值对在取出时没有固定的顺序，是随机的。一般而言， 在Map中插人、删除和定位元素，HashMap 是最好的选择。由于TreeMap实现了SortMap 接口，能够把它保存的记录根据键排序，因此，取出来的是排序后的键值对，如果需要按自然顺序或自定义顺序遍历键，那么TreeMap会更好。LinkedHash-Map是HashMap的一个子类，如果需要输出的顺序和输人的相同，那么用LinkedHashMap可以实现，它还可以按读取顺序来排列。<br>WeakHashMap与HashMap类似，二者的不同之处在于WeakHashMap 中key采用的是“弱引用”的方式，只要WeakHashMap中的key不再被外部引用，它就可以被垃圾回收器回收。而HashMap中key采用的是“强引用的方式”，当HashMap中的key没有被外部引用时，只有在这个key从HashMap中删除后，才可以被垃圾回收器回收。<br>常见笔试题:<br>1.在Hashtable. 上下文中，同步指的是什么?<br>答案:同步意味着在一个时间点只能有一个线程可以修改hash表、任何线程在执行Hashtable 的更新操作前都需要获取对象锁，其他线程则等待锁的释放。<br>2.如何实现HashMap的同步?<br>答案: HashMap 可以通过Map m = Collections.synchronizedMap(new HashMap())达到同步的效果。具体而言，该方法返回一个同步的Map.该Map封装了底层的HashMap的所有方法，使得底层的HashMap即使是在多线程的环境中也是安全的。</p><h4 id="用自定义类型作为HashMap或者Hashtable的key需要注意哪些问题"><a href="#用自定义类型作为HashMap或者Hashtable的key需要注意哪些问题" class="headerlink" title="用自定义类型作为HashMap或者Hashtable的key需要注意哪些问题"></a>用自定义类型作为HashMap或者Hashtable的key需要注意哪些问题</h4><p>用自定义类作为key，<strong>必须重写equals()和hashCode()方法</strong>。</p><p>自定义类中的equals() 和 hashCode()都继承自Object类。</p><p>Object类的hashCode()方法返回这个对象存储的内存地址的编号。</p><p>而equals()比较的是内存地址是否相等。</p><p>以下是没有重写equals()和hashCode()方法；</p><p> 自定义  PhoneNumber类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneNumber</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> prefix; <span class="comment">//区号</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> phoneNumber; <span class="comment">//电话号</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrefix</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> prefix;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrefix</span><span class="params">(<span class="keyword">int</span> prefix)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.prefix = prefix;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPhoneNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> phoneNumber;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPhoneNumber</span><span class="params">(<span class="keyword">int</span> phoneNumber)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.phoneNumber = phoneNumber;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> Map&lt;PhoneNumber, String&gt; map =<span class="keyword">new</span>  HashMap&lt;PhoneNumber, String&gt;();</span><br><span class="line"> PhoneNumber phoneNumber1=<span class="keyword">new</span> PhoneNumber();</span><br><span class="line"> phoneNumber1.setPhoneNumber(<span class="number">111</span>);</span><br><span class="line"> phoneNumber1.setPrefix(<span class="number">111</span>);</span><br><span class="line"> PhoneNumber phoneNumber2=<span class="keyword">new</span> PhoneNumber();</span><br><span class="line"> phoneNumber2.setPhoneNumber(<span class="number">222</span>);</span><br><span class="line"> phoneNumber2.setPrefix(<span class="number">222</span>);</span><br><span class="line"> map.put(phoneNumber1, <span class="string">"111"</span>);</span><br><span class="line"> map.put(phoneNumber2, <span class="string">"222"</span>);</span><br><span class="line"></span><br><span class="line"> System.out.println(map.get(phoneNumber1));</span><br><span class="line"> System.out.println(map.get(phoneNumber2));</span><br><span class="line"></span><br><span class="line"> PhoneNumber phoneNumber3=<span class="keyword">new</span> PhoneNumber();</span><br><span class="line"> <span class="comment">//参数内容和phoneNumber2一样</span></span><br><span class="line"> phoneNumber3.setPhoneNumber(<span class="number">222</span>);</span><br><span class="line"> phoneNumber3.setPrefix(<span class="number">222</span>);</span><br><span class="line"> System.out.println(map.get(phoneNumber3));</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p> 输出结果</p><p> 111<br> 222<br> null</p><p>在PhoneNumber 类中重写equals()和hashCode()方法；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(<span class="keyword">this</span> == o)</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span>(!(o <span class="keyword">instanceof</span> PhoneNumber))</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     PhoneNumber pn = (PhoneNumber)o;</span><br><span class="line">     <span class="keyword">return</span> pn.prefix == prefix &amp;&amp; pn.phoneNumber == phoneNumber;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> result = <span class="number">17</span>;</span><br><span class="line">     result = <span class="number">31</span> * result + prefix;</span><br><span class="line">     result = <span class="number">31</span> * result + phoneNumber;</span><br><span class="line">     <span class="keyword">return</span> result;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p> 输出结果</p><p>  111<br>  222<br>  222</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Java-Collections框架是什么&quot;&gt;&lt;a href=&quot;#Java-Collections框架是什么&quot; class=&quot;headerlink&quot; title=&quot;Java Collections框架是什么&quot;&gt;&lt;/a&gt;Java Collections框架是什么&lt;/h4&gt;
    
    </summary>
    
    
    
      <category term="java基础知识点" scheme="http://dumengblog.club/tags/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>SSH项目开发总结</title>
    <link href="http://dumengblog.club/2019/11/22/SSH%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/"/>
    <id>http://dumengblog.club/2019/11/22/SSH项目开发总结/</id>
    <published>2019-11-22T04:03:50.000Z</published>
    <updated>2019-12-05T12:37:03.228Z</updated>
    
    <content type="html"><![CDATA[<p>首先说一下SSH框架中各自的作用：</p><a id="more"></a><h4 id="SSH三者作用"><a href="#SSH三者作用" class="headerlink" title="SSH三者作用"></a>SSH三者作用</h4><ul><li>Struts在项目中的作用</li></ul><p>Struts 在项目主要起控制作用，只要用于web层（即视图层和控制层）<br>Struts本身是使用典型的MVC结构实现的，项目中使用了struts之后就等于项目也是一个MVC结构，使项目结构更清晰，分工更明细。<br>Struts在项目中主要负责视图层、控制层，在视图层提供了大量的标签库，提高视图层的开发速度。在控制层使用中央控制器（Actionsupport）和配置文件(struts.xml)，实现拦截用户请求、封装请求参数及页面导航。</p><ul><li>Spring在项目中的作用</li></ul><p>Spring是一个全方位的整合框架，在项目中对hibernate和struts进行整合，解决层与层之间的耦合问题。<br>Spring的作用贯穿了整个中间层，将Web层、Service层、DAO层及PO无缝整合。<br>Spring的IoC来实现组件之间的依赖关系注入，上层框架不会渗透到下层组件，提高组件移植性和重用性，使得程序更灵活，上层框架不依赖实现而是依赖于抽象(委托接口)、使得实现类的变化不会影响上层组件，解决了层与层之间的藕合带来的维护或升级困难<br>SpringAOP 是面向方面编程，实现事务处理、日志服务等与业务无关的系统服务，实现插件式编程。</p><ul><li>Hibernate在项目中的作用</li></ul><p>Hibernate应用于数据持久化层，是对JDBC的轻量级封装。是一种对象、关系的映射工具， 提供了从 Java类到数据表的映射，也提供了数据查询和恢复等机制， 大大减少数据访问的复杂度。把对数据库的直接操作 , 转换为对持久对象的操作。<br>在项目中的主要作用就是1、解决程序与数据库的依赖，即使用了Hibernate之后，以后更改数据库不需要更改代码，因为Hibernate会根据数据库方言来生成对应的SQL语句；2、是对JDBC的轻量级封装，简化持久层的代码，提高开发速度。</p><h4 id="主要配置文件"><a href="#主要配置文件" class="headerlink" title="主要配置文件"></a>主要配置文件</h4><p>项目主要配置文件为：</p><ol><li><p>appilcationContext.xml </p><p>在这里配置连接池并且将其放在外部文件jdbc.properties</p><p>配置Hibernate的映射文件 </p><p>对action，service，dao的管理</p></li><li><p>struts.xml</p><p>实现拦截用户请求、封装请求参数及页面导航。</p></li><li><p>log4j.properties</p><p>日志文件</p></li><li><p>jdbc.properties</p><p>连接数据库的参数如连接名，用户名。密码</p></li><li><p>表名.hbm.xml</p></li></ol><p>.hbm.xml文件则是对表的映射</p><ol start="6"><li><p>web.xml</p><p>该文件在WebRoot/WEB-INF下他的作用是配置Spring的核心监听器 ， 配置Struts2的核心过滤器 。</p></li></ol><h4 id="项目开发心得："><a href="#项目开发心得：" class="headerlink" title="项目开发心得："></a>项目开发心得：</h4><ol><li><p>Action继承ActionSupport 实现ModelDriven<t>接口</t></p></li><li><p>dao继承HibernateDaoSupport</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">this</span>.getHibernateTemplate().find()<span class="comment">//查</span></span><br><span class="line"><span class="keyword">this</span>.getHibernateTemplate().delete(product);<span class="comment">//删</span></span><br><span class="line"><span class="keyword">this</span>.getHibernateTemplate().update(product);<span class="comment">//改</span></span><br><span class="line"><span class="keyword">this</span>.getHibernateTemplate().save(product);<span class="comment">//增</span></span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>action调用service，service调用dao</p></li><li><p>两种往前端传值的方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.ActionContext.getContext().getSession().put("clist", clist);</span><br><span class="line"><span class="tag">&lt;<span class="name">s:iterator</span> <span class="attr">var</span>=<span class="string">"c"</span> <span class="attr">value</span>=<span class="string">"#session.clist"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"#c.cname"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> |<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">s:iterator</span>&gt;</span></span><br><span class="line">2.ActionContext.getContext().getValueStack().set("hlist",hlist);</span><br><span class="line"><span class="tag">&lt;<span class="name">s:iterator</span> <span class="attr">var</span>=<span class="string">"p"</span> <span class="attr">value</span>=<span class="string">"hlist"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"$&#123;pageContext.request.contextPath&#125;/&lt;s:property value="</span>#<span class="attr">p.image</span>"/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">s:iterator</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>往前端传信息</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">this.addActionMessage("信息");//后端</span><br><span class="line"><span class="tag">&lt;<span class="name">s:actionmessage</span>/&gt;</span></span><br></pre></td></tr></table></figure><ol start="5"><li><p>前端判断</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">s:if</span> <span class="attr">test</span>=<span class="string">"#session.user1== null"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">s:if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">s:else</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">s:else</span>&gt;</span></span><br></pre></td></tr></table></figure><p>后端放在Session里</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServletActionContext.getRequest().getSession().setAttribute(<span class="string">"user1"</span>,user1);</span><br></pre></td></tr></table></figure></li><li><p>分页查询</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询热门商品</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Product&gt; <span class="title">findHot</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//分页查询，使用离线方法查询</span></span><br><span class="line">DetachedCriteria criteria=DetachedCriteria.forClass(Product.class);</span><br><span class="line"><span class="comment">//查询is_how为1</span></span><br><span class="line">criteria.add(Restrictions.eq(<span class="string">"is_hot"</span>, <span class="number">1</span>));</span><br><span class="line"><span class="comment">//倒序排序输出</span></span><br><span class="line">criteria.addOrder(Order.desc(<span class="string">"pdate"</span>));</span><br><span class="line"><span class="comment">//执行查询</span></span><br><span class="line">List&lt;Product&gt; list=<span class="keyword">this</span>.getHibernateTemplate().findByCriteria(criteria,<span class="number">0</span>,<span class="number">10</span>);</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>二级菜单<br>一级菜单配置：一对多用的Set集合当然也可以使用List，这样可以使二级目录无序显示</li></ol><p>Category.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Set&lt;CategorySecond&gt; categorySeconds=<span class="keyword">new</span> HashSet&lt;CategorySecond&gt;();</span><br></pre></td></tr></table></figure><p>Category.hbm.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"categorySeconds"</span> <span class="attr">lazy</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"cid"</span>&gt;</span><span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">"cn.dm.shop.categorysecond.vo.CategorySecond"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></table></figure><p>二级菜单配置：多对一<br>CategorySecond.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Category category;</span><br></pre></td></tr></table></figure><p>CategorySecond.hbm.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">many-to-one</span> <span class="attr">name</span>=<span class="string">"category"</span> <span class="attr">class</span>=<span class="string">"cn.dm.shop.category.vo.Category"</span> <span class="attr">column</span>=<span class="string">"cid"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">many-to-one</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在前端则是用了两次迭代（第二次是调用了set集合）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">s:iterator</span> <span class="attr">var</span>=<span class="string">"c"</span> <span class="attr">value</span>=<span class="string">"#session.clist"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"#c.cname"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">s:iterator</span> <span class="attr">var</span>=<span class="string">"cs"</span> <span class="attr">value</span>=<span class="string">"#c.categorySeconds"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"#cs.csname"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">s:iterator</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">s:iterator</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="8"><li>表单提交<br>js代码</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">function saveCart()&#123;</span><br><span class="line">document.getElementById("cartForm").submit();</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"cartForm"</span> <span class="attr">action</span>=<span class="string">"$&#123; pageContext.request.contextPath &#125;/cart_addCart.action"</span> <span class="attr">method</span>=<span class="string">"post"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"pid"</span> <span class="attr">value</span>=<span class="string">"&lt;s:property value="</span><span class="attr">model.pid</span>"/&gt;</span>"/&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"action"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span> <span class="attr">class</span>=<span class="string">"quantity"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>购买数量:<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"count"</span> <span class="attr">name</span>=<span class="string">"count"</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">maxlength</span>=<span class="string">"4"</span> <span class="attr">onpaste</span>=<span class="string">"return false;"</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span></span><br><span class="line">件</span><br><span class="line"><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"buy"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"addCart"</span> <span class="attr">class</span>=<span class="string">"addCart"</span> <span class="attr">value</span>=<span class="string">"加入购物车"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"saveCart()"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="9"><li><p>上传图片</p><p>前端</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"upload"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>后端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//文件上传需要的参数。</span></span><br><span class="line"><span class="keyword">private</span> File upload;<span class="comment">//上传的文件 upload与前端name一致</span></span><br><span class="line"><span class="keyword">private</span> String uploadFileName;<span class="comment">//上传的文件名</span></span><br><span class="line"><span class="keyword">private</span> String uploadContextPath;<span class="comment">//上传的路径</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> File <span class="title">getUpload</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> upload;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUpload</span><span class="params">(File upload)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.upload = upload;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUploadFileName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> uploadFileName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUploadFileName</span><span class="params">(String uploadFileName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.uploadFileName = uploadFileName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUploadContextPath</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> uploadContextPath;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUploadContextPath</span><span class="params">(String uploadContextPath)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.uploadContextPath = uploadContextPath;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(upload != <span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="comment">// 将商品图片上传到服务器上.</span></span><br><span class="line"><span class="comment">// 获得上传图片的服务器端路径.</span></span><br><span class="line">String path = ServletActionContext.getServletContext().getRealPath(</span><br><span class="line"><span class="string">"/products"</span>);</span><br><span class="line"><span class="comment">// 创建文件类型对象:</span></span><br><span class="line">File diskFile = <span class="keyword">new</span> File(path + <span class="string">"//"</span> + uploadFileName);</span><br><span class="line"><span class="comment">// 文件上传:</span></span><br><span class="line">FileUtils.copyFile(upload, diskFile);</span><br><span class="line"></span><br><span class="line">product.setImage(<span class="string">"products/"</span> + uploadFileName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">productService.save(product);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"savesuccess"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先说一下SSH框架中各自的作用：&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="SSH项目总结" scheme="http://dumengblog.club/tags/SSH%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>SSH项目-在线商城-买家端</title>
    <link href="http://dumengblog.club/2019/11/18/SSH%E9%A1%B9%E7%9B%AE-%E5%9C%A8%E7%BA%BF%E5%95%86%E5%9F%8E/"/>
    <id>http://dumengblog.club/2019/11/18/SSH项目-在线商城/</id>
    <published>2019-11-18T12:50:25.000Z</published>
    <updated>2019-12-05T12:37:22.527Z</updated>
    
    <content type="html"><![CDATA[<p>​    <a id="more"></a></p><p>​    关于这次SSH商城项目，首先说明前端不是自己写的，用的传智播客的前端，因为我只会一些简单的CSS+html去制作网页。</p><p>首先输入网址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localhost:8080/shop</span><br></pre></td></tr></table></figure><p>进入到首页，所有的商品都是从数据库查出来的，不是静态页面。</p><p><img src="/../asset/%E7%81%AB%E7%8B%90%E6%88%AA%E5%9B%BE_2019-11-18T12-38-43.500Z.png" alt="火狐截图_2019-11-18T12-38-43.500Z"></p><p><img src="/../asset/image-20191118210708670.png" alt="image-20191118210708670">        </p><p><img src="/../asset/image-20191118210727845.png" alt="image-20191118210727845"></p><p><img src="/../asset/image-20191118210746406.png" alt="image-20191118210746406"></p><p><img src="/../asset/image-20191118210819968.png" alt="image-20191118210819968"></p><p><img src="/../asset/image-20191118210905670.png" alt="image-20191118210905670"></p><p>当你点击一个商品时会显示对应的商品详情</p><p><img src="/../asset/image-20191118210400033.png" alt="image-20191118210400033"></p><p>点击加入购物车</p><p><img src="/../asset/image-20191118210444478.png" alt="image-20191118210444478"></p><p>当你再点击其他商品时，再加入购物车，也会在其中显示。</p><p><img src="/../asset/image-20191118210949493.png" alt="image-20191118210949493"></p><p>删除和清空购物车都可以实现</p><p>此时点击提交订单，假如你登录了，那么没问题会跳到订单页面，如果没登录会显示如下信息：</p><p><img src="/../asset/image-20191118211147950.png" alt="image-20191118211147950"></p><p>点击菜单里的登录</p><p>接下来去注册。</p><p><img src="/../asset/%E7%81%AB%E7%8B%90%E6%88%AA%E5%9B%BE_2019-11-18T12-40-34.772Z.png" alt="火狐截图_2019-11-18T12-40-34.772Z"></p><p>用户名这里会提示你，你的用户名是否可用</p><p><img src="/../asset/%E7%81%AB%E7%8B%90%E6%88%AA%E5%9B%BE_2019-11-18T12-41-55.160Z.png" alt="火狐截图_2019-11-18T12-41-55.160Z"></p><p>注册后会给你的邮箱发一封邮件</p><p><img src="/../asset/2JE%5BU1PU%250L8HM1%25HB9XBP.png" alt="img"></p><p><img src="/../asset/WSNW9%60GUVWGYHNGD620S74.png" alt="img"></p><p><img src="/../asset/QQ%E5%9B%BE%E7%89%8720191118211641.png" alt></p><p>登陆成功后返回购物车，此时菜单会更改。</p><p><img src="/../asset/image-20191118211850239.png" alt="image-20191118211850239"></p><p><img src="/../asset/image-20191118211926346.png" alt="image-20191118211926346"></p><p>点击订单会显示支付成功，因为就是一个自己的项目，所以没有继续做下去。</p><p><img src="/../asset/image-20191118212029107.png" alt="image-20191118212029107"></p><p>后台则实现了对商品，用户以及一级菜单的信息的改写。</p><p><img src="/../asset/image-20191121220411679.png" alt="image-20191121220411679"></p><p><img src="/../asset/image-20191121220429233.png" alt="image-20191121220429233"></p><p><img src="/../asset/image-20191121220444463.png" alt="image-20191121220444463"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="SSH项目" scheme="http://dumengblog.club/tags/SSH%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>Spring MVC</title>
    <link href="http://dumengblog.club/2019/11/13/Spring-MVC/"/>
    <id>http://dumengblog.club/2019/11/13/Spring-MVC/</id>
    <published>2019-11-13T12:39:56.000Z</published>
    <updated>2019-11-13T14:31:01.272Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-MVC模式"><a href="#1-MVC模式" class="headerlink" title="1. MVC模式"></a>1. MVC模式</h4><a id="more"></a><img src="/../asset/image-20191005174054629.png" alt="image-20191005174054629" style="zoom:50%;"><h4 id="2-Spring-MVC工作原理"><a href="#2-Spring-MVC工作原理" class="headerlink" title="2. Spring MVC工作原理"></a>2. Spring MVC工作原理</h4><img src="/../asset/image-20191005174247458.png" alt="image-20191005174247458" style="zoom:67%;"><p> 图中包含4个Spring MVC接口：DispatcherServlet、HandlerMapping、Controller和ViewResoler。<br>    Spring MVC所有的请求都经过DispatcherServlet来统一分发。DispatcherServlet将请求分发给Controller之前，需要借助于Spring MVC提供的HandlerMapping定位到具体的Controller。<br>    HandlerMapping接口负责完成客户请求到Controller映射。<br>    Controller接口将处理用户请求，这和Java Servlet扮演的角色是一致的。一旦Controller处理完用户请求，则返回ModelAndView对象给DispatcherServlet前端控制器，ModelAndView中包含了模型（Model）和视图（View）。从宏观角度考虑，DispatcherServlet是整个Web应用的控制器；从微观考虑，Controller是单个Http请求处理过程中的控制器，而ModelAndView是Http请求过程中返回的模型（Model）和视图（View）。<br>    ViewResolver接口（视图解析器）在Web应用中负责查找View对象，从而将相应结果渲染给客户。</p><h4 id="3-第一个MVC-应用"><a href="#3-第一个MVC-应用" class="headerlink" title="3. 第一个MVC 应用"></a>3. 第一个MVC 应用</h4><p>项目目录：</p><p><img src="/../asset/image-20191005174526336.png" alt="image-20191005174526336"></p><p>FirstController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dm.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.Controller;</span><br><span class="line"></span><br><span class="line"><span class="comment">//控制器类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstController</span> <span class="keyword">implements</span> <span class="title">Controller</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest arg0, HttpServletResponse arg1)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//创建ModelAndView对象</span></span><br><span class="line">ModelAndView mav=<span class="keyword">new</span> ModelAndView();</span><br><span class="line"><span class="comment">//想模型对象中添加数据</span></span><br><span class="line">mav.addObject(<span class="string">"msg"</span>, <span class="string">"这是我的第一个SpringMVC程序"</span>);</span><br><span class="line"><span class="comment">//设置逻辑视图名</span></span><br><span class="line">mav.setViewName(<span class="string">"/WEB-INF/jsp/first.jsp"</span>);</span><br><span class="line"><span class="comment">//返回ModelAndView对象</span></span><br><span class="line"><span class="keyword">return</span> mav;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>springmvc-config.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span>                 </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配 置处理器Handler，映射"/firstcontroller"--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"/firstController"</span> <span class="attr">class</span>=<span class="string">"com.dm.controller.FirstController"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 处理器映射器，将处理器Handler的name作为url进行查找 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 处理器适配器，匹配对处理器中的HandleRequest()方法进行调用  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>first.jsp</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=ISO-8859-1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>入门程序<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">$&#123;msg &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span></span></span><br><span class="line"><span class="tag"><span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"3.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置DispatcherServlet --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--初始化时加载文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-config.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 处理所有的URL --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行结果（别输错地址，因为没有定义welcomefile）：</p><p><img src="/../asset/image-20191005174823611.png" alt="image-20191005174823611"></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-MVC模式&quot;&gt;&lt;a href=&quot;#1-MVC模式&quot; class=&quot;headerlink&quot; title=&quot;1. MVC模式&quot;&gt;&lt;/a&gt;1. MVC模式&lt;/h4&gt;
    
    </summary>
    
    
    
      <category term="Spring MVC框架" scheme="http://dumengblog.club/tags/Spring-MVC%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Spring MVC 的核心类和注解</title>
    <link href="http://dumengblog.club/2019/11/13/Spring-MVC-%E7%9A%84%E6%A0%B8%E5%BF%83%E7%B1%BB%E5%92%8C%E6%B3%A8%E8%A7%A3/"/>
    <id>http://dumengblog.club/2019/11/13/Spring-MVC-的核心类和注解/</id>
    <published>2019-11-13T10:56:23.000Z</published>
    <updated>2019-11-13T13:35:39.710Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-DispatcherServlet"><a href="#1-DispatcherServlet" class="headerlink" title="1. DispatcherServlet"></a>1. DispatcherServlet</h4><p>全名是org.springframework.web.servlet.DispatcherServlet它在程序中充当着前端控制器的角色。在使用时，只需将其配置在项目的web.xml文件中，其配置代码如下：</p><a id="more"></a><img src="/../asset/image-20191005190649964.png" alt="image-20191005190649964" style="zoom:67%;"><p>假如你不用<init-param>name他会去找WEB-INF/springmvc-servlet.xml这样一个文件。</init-param></p><h4 id="2-Controller-注解类型"><a href="#2-Controller-注解类型" class="headerlink" title="2. @Controller 注解类型"></a>2. @Controller 注解类型</h4><p>org.springframework.stereotype.Controller注解类型用于指示Spring类的实例是一个控制器，其注解形式是@Controller。该注解在使用时不在用实现Controller接口，只需要将@Controller注解加入到控制器类上，然后通过Spring的扫描机制找到标注了该注解的控制器即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> controller;</span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line"><span class="comment">//处理请求的方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Spring MVC中，使用扫描机制找到应用中所有基于注解的控制器类。所以，为了让控制器类被Spring MVC框架扫描到，需要在配置文件中声明spring-context，并使用<a href="context:component-scan/" target="_blank" rel="noopener">context:component-scan/</a>元素指定控制器类的基本包（请确保所有控制器类都在基本包及其子包下）。</p><img src="/../asset/image-20191005193749416.png" alt="image-20191005193749416" style="zoom:67%;"><p>@RequestMapping 注解的使用</p><p>  在基于注解的控制器类中，可以为每个请求编写对应的处理方法。如何将请求与处理方法一一对应呢？需要使用org.springframework.web.bind.annotation.RequestMapping注解类型将请求与处理方法一一对应。</p><p>1．方法级别注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/index/login"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">/**login代表逻辑视图名称，需要根据Spring MVC配置</span></span><br><span class="line"><span class="comment"> * 文件中internalResourceViewResolver的前缀和后缀找到对应的物理视图</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/index/register"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">register</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"register"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2．类级别注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/index"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/register"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">register</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"register"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-DispatcherServlet&quot;&gt;&lt;a href=&quot;#1-DispatcherServlet&quot; class=&quot;headerlink&quot; title=&quot;1. DispatcherServlet&quot;&gt;&lt;/a&gt;1. DispatcherServlet&lt;/h4&gt;&lt;p&gt;全名是org.springframework.web.servlet.DispatcherServlet它在程序中充当着前端控制器的角色。在使用时，只需将其配置在项目的web.xml文件中，其配置代码如下：&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Spring MVC框架" scheme="http://dumengblog.club/tags/Spring-MVC%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis框架-核心配置元素settings</title>
    <link href="http://dumengblog.club/2019/11/12/Mybatis%E6%A1%86%E6%9E%B6-%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E5%85%83%E7%B4%A0settings/"/>
    <id>http://dumengblog.club/2019/11/12/Mybatis框架-核心配置元素settings/</id>
    <published>2019-11-12T05:59:27.000Z</published>
    <updated>2019-10-04T07:18:39.475Z</updated>
    
    <content type="html"><![CDATA[<p>在上一篇博客，没有太多介绍settings元素，但是后来发现有一个开启二级缓存很重要，所以在这里写一下。</p><a id="more"></a><h4 id="1-元素"><a href="#1-元素" class="headerlink" title="1.元素"></a>1.<settings>元素</settings></h4><p><settings>元素主要用于改变MyBatis运行时的行为，例如开启二级缓存，开启延迟加载等。</settings></p><h4 id="2-实例"><a href="#2-实例" class="headerlink" title="2.实例"></a>2.实例</h4><h5 id="2-1-一级缓存"><a href="#2-1-一级缓存" class="headerlink" title="2.1 一级缓存"></a>2.1 一级缓存</h5><p>将之前的利用Mybatis对数据库进行增删改查的项目复制一份，只留下查询方法</p><p>由于Mybatis自带一级缓存所以当我们要一次性查询两次的时候就可以利用commit()方法来清空一级缓存,方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cacheOneTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">SqlSession sqlSession=MybatisUtils.getSession();</span><br><span class="line"><span class="keyword">int</span> id=<span class="number">1</span>;</span><br><span class="line">Customer customer=sqlSession.selectOne(<span class="string">"com.dm.po.Customer.findCustomerByID"</span>,id);</span><br><span class="line">System.out.println(<span class="string">"查询id为"</span>+id+<span class="string">"查询用户"</span>);</span><br><span class="line">System.out.println(customer.toString());</span><br><span class="line"><span class="comment">//清空一级缓存</span></span><br><span class="line">sqlSession.commit();</span><br><span class="line">        <span class="comment">//第二次查询 </span></span><br><span class="line">customer=sqlSession.selectOne(<span class="string">"com.dm.po.Customer.findCustomerByID"</span>,<span class="number">2</span>);</span><br><span class="line">System.out.println(<span class="string">"查询id查询用户"</span>);</span><br><span class="line">System.out.println(customer.toString());</span><br><span class="line"></span><br><span class="line">sqlSession.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-2-二级缓存"><a href="#2-2-二级缓存" class="headerlink" title="2.2 二级缓存"></a>2.2 二级缓存</h5><p>首先打开mybatis-config.xml，加上一段代码打开二级缓存，</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;settings&gt;</span><br><span class="line">&lt;!-- 开启二级缓存  cacheEnabled 默认为False--&gt;</span><br><span class="line">&lt;setting name=<span class="string">"cacheEnabled"</span> value=<span class="string">"true"</span>/&gt;</span><br><span class="line">&lt;/settings&gt;</span><br></pre></td></tr></table></figure><p>然后打开CustomerMapper.xml 加上一个标签即可</p><p><img src="/../asset/image-20191004142439381.png" alt="image-20191004142439381"></p><p>此时开始测试，首先在MybatisTest写下这样一段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*二级缓存测试</span></span><br><span class="line"><span class="comment"> * 缓存在SQLSessionFactory</span></span><br><span class="line"><span class="comment"> * 需要手动开启</span></span><br><span class="line"><span class="comment"> * 二级缓存查询的对象需要序列化接口</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cacheTwoTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">SqlSession sqlSession=MybatisUtils.getSession();</span><br><span class="line"><span class="keyword">int</span> id=<span class="number">2</span>;</span><br><span class="line">Customer customer=sqlSession.selectOne(<span class="string">"com.dm.po.Customer.findCustomerByID"</span>,id);</span><br><span class="line">System.out.println(<span class="string">"查询id为"</span>+id+<span class="string">"查询用户"</span>);</span><br><span class="line">System.out.println(customer.toString());</span><br><span class="line"><span class="comment">//与下面的SQLSession不是同一个，所以可以关闭</span></span><br><span class="line">sqlSession.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二次会话查询，二级缓存</span></span><br><span class="line">sqlSession=MybatisUtils.getSession();</span><br><span class="line">customer=sqlSession.selectOne(<span class="string">"com.dm.po.Customer.findCustomerByID"</span>,<span class="number">1</span>);</span><br><span class="line">System.out.println(<span class="string">"查询id为"</span>+id+<span class="string">"查询用户"</span>);</span><br><span class="line">System.out.println(customer.toString());</span><br><span class="line">sqlSession.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果就这样的运行，会报错</p><p><img src="/../asset/image-20191004143118851.png" alt="image-20191004143118851"></p><p>因为我们没有实现序列化接口，此时我们打开Customer.java，来实现这个接口<img src="/../asset/image-20191004143329622.png" alt="image-20191004143329622"></p><p>加上接口后（记得保存）我们再来测试。</p><p><img src="/../asset/image-20191004143442258.png" alt="image-20191004143442258"></p><p>此时成功查询到两组数据。由于日志文件有问题所以只能这样显示了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上一篇博客，没有太多介绍settings元素，但是后来发现有一个开启二级缓存很重要，所以在这里写一下。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Mybatis框架" scheme="http://dumengblog.club/tags/Mybatis%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis--配置文件主要元素</title>
    <link href="http://dumengblog.club/2019/11/11/MyBatis-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%BB%E8%A6%81%E5%85%83%E7%B4%A0/"/>
    <id>http://dumengblog.club/2019/11/11/MyBatis-配置文件主要元素/</id>
    <published>2019-11-11T09:07:29.000Z</published>
    <updated>2019-10-03T11:42:17.316Z</updated>
    
    <content type="html"><![CDATA[<p>Mybatis框架的核心配置的主要元素如下：<a id="more"></a></p><img src="/../asset/image-20191003174150343.png" alt="image-20191003174150343" style="zoom:67%;"><p>​    <strong>1. properties 元素</strong></p><p>​    首先利用properties我们可以将数据库连接的driver，url，username，password拿出来放在一个properties文件下，我把文件命名为db.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://localhost:3306/mybatis</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=123456</span><br></pre></td></tr></table></figure><p>把核心配置文件mybatis-config.xml改成了如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration  </span></span><br><span class="line"><span class="meta">PUBLIC "-//mybatis.org//DTD Config 3.0//EN"  </span></span><br><span class="line"><span class="meta">"http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"db.properties"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置环境  默认的环境  id为 mysql --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用JDBC的事务管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置mapper的位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/dm/po/CustomerMapper.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后测试也成功。</p><p><strong>2、settings 元素</strong></p><p>　　settings 元素的作用是设置一些非常重要的设置选项，用于设置和改变 MyBatis 运行中的行为，比如此处设置 MyBatis 的 log 日志实现为 LOG4J，即使用 log4j 实现日志功能。</p><p>　　常用配置如下表：</p><table><thead><tr><th>设置项</th><th>描述</th><th>允许值</th><th>默认值</th></tr></thead><tbody><tr><td>cacheEnabled</td><td>对在此配置文件下的所有 cache 进行全局性开/关设置</td><td>true/false</td><td>true</td></tr><tr><td>lazyLoadingEnabled</td><td>全局性设置懒加载。如果设为 false ，则所有相关联的都会被初始化加载</td><td>true/false</td><td>true</td></tr><tr><td>autoMappingBehavior</td><td>MyBatis对于resultMap自动映射匹配级别</td><td>NONE /PARTIAL： /FULL</td><td>PARTIAL</td></tr><tr><td>logImpl</td><td>指定 Mybatis 所用日志的具体实现，未指定时将自动查找</td><td>SLF4J | LOG4J | LOG4J2 |…</td><td>Not set</td></tr></tbody></table><p>　　<strong>autoMappingBehavior 讲解</strong></p><p>　　Mybatis的自动映射策略默认是开启的，而且默认是只对非嵌套的resultMap进行自动映射。这是通过Mybatis的全局配置autoMappingBehavior参数配置的。它一共有三种取值，分别是NONE、PARTIAL和FULL。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">NONE：表示不启用自动映射</span><br><span class="line"></span><br><span class="line">PARTIAL：表示只对非嵌套的resultMap进行自动映射</span><br><span class="line"></span><br><span class="line">FULL：表示对所有的resultMap都进行自动映射</span><br></pre></td></tr></table></figure><p>　　</p><p><strong>3、typeAliases 元素</strong></p><p>　　typeAliases 元素的作用是配置类型别名，通过与 MyBatis 的 SQL 映射文件相关联，减少输入多余的完整类名，以简化操作。具体配置如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--这里给实体类取别名，方便在 mapper 配置文件中使用--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"User"</span> <span class="attr">type</span>=<span class="string">"cn.smbms.pojo.User"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>　　　以上这种写法的弊端在于如果一个项目中有多个 POJO  的时候，需要一一进行配置，所以有更加简化的写法，就是通过 package 的 name 属性直接指定包名， MyBatis 会自动扫描指定包下的 JavaBean ，并默认设置一个别名，默认名称为 JavaBean 的非限定类名。具体配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--默认名称：指定包下 JavaBean 的非限定类名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span> =<span class="string">"cn.smbms.pojo"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>说明：<br>　　1、配置了 typeAliases 元素，在 Mapper.xml 中的 resultType 属性无须写完全限定名com.smbms.pojo.User，只需要写 User 或 user 不区分大小写。　　2、对于基础数据类型， MyBatis 已经为许多常见的 Java 类型内建了相应的类型别名，一般都是与其映射类型一致，并且它们都是大小写不敏感的，　　  比如映射的类型 int、Boolean、String、Integer 等,它们的别名就是 int 、Boolean或boolean、String或string、Integer或integer。<br><strong>4、environments 元素</strong></p><p>　　表示配置 MyBatis 的多套运行环境，MyBatis  可以配置多套运行环境，如开发环境、测试环境、生产环境等，我们可以灵活选择不同的配置，从而将 SQL  映射应用到不同的数据库环境上。这些不同的运行环境，就可以通过 environments 元素来配置。environments   元素节点下通过配置多个 environment  子元素节点，实现配置多套运行环境，但是不管增加几套运行环境，都必须要明确选择出当前的唯一一个运行环境（即默认运行环境：通过 default  指定）。这是因为毎个数据库都是对应一个 SqlSessionFactorγ 实例的，需要指明哪个运行环境将被创建，并把运行环境中设置的参数传递给 SqlSessionFactoryBuilder。具体配置如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置 mybatis 多套运行环境，通过 default 属性选择一套运行环境 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">　　　　<span class="comment">&lt;!--开发环境--&gt;</span></span><br><span class="line">　　　　<span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">    　　　<span class="comment">&lt;!-- 配置事务管理，采用 JDBC 的事务管理 --&gt;</span></span><br><span class="line">    　　　<span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span> /&gt;</span></span><br><span class="line">            </span><br><span class="line">    　　　<span class="comment">&lt;!-- POOLED:mybatis 自带的数据源，JNDI:基于 Tomcat 的数据源 --&gt;</span></span><br><span class="line">    　　　<span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">        　　<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">        　　<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">        　　<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">        　　<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line">    　　　<span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment">&lt;!--测试环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">    　　　　··········</span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure><p>environment：配置 MyBatis 的一套运行环境，需指定运行环境 ID、事务管理、数据源配置等相关信息。</p><p>　　注意点：</p><p>　　　　　1、默认的运行 ID ：通过 default 属性来指定当前的运行环境 ID 为 development ，对于环境 ID 的命名要确保唯一。<br>　　　　　2、transactionManager 事务管理器，设置其类型为 JDBC(MyBatis 有两种事务管理类型，即JDBC、MANAGED)，直接使用 JDBC 的提交和回滚功能，依赖于从数据源获得连接来管理事务的生命周期。<br>　　　　　3、dataSource 元素使用标准的 JDBC 数据源接口来配置 JDBC 连接对象的资源。 MyBatis  提供了三种数据源类型(UNPOOLED、POOLED、JNDI），这里我们使用 POOLED 数据源类型。该类型的实现利用 “池” 的概念将  JDBC 连接对象组织起来，避免了创建新的连接实例时所必需的初始化和认证时间，是 MyBatis  实现的简单的数据库连接池类型，它使数据库连接可被复用，不必在每次请求时都去创建一个物理连接。这对于高并发的 Web  应用是一种流行的处理方式，有利于快速响应请求。</p><p> <strong>5、mappers 元素</strong><br>　　mappers：映射器，在 <mappers> 中有两个子元素 <package> 、<mapper> ，用来定义 SQL  的映射语句，我们只需要告诉 MyBatis 去哪里找到这些 SQL 语句（即去哪里找相应的 SQL 映射文件），整个项目中可以有1个或多个SQL 映射文件。可以使用类资源路径或者 URL 等，具体代码如下：</mapper></package></mappers></p><p> 方式一：使用类资源路径获取资源（推荐使用）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 将 mapper 映射文件加入到系统核心配置文件中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">　　　　<span class="tag">&lt;<span class="name">mapper</span>  <span class="attr">resource</span>=<span class="string">"cn/smbms/dao/user/UserMapper.xml"</span>/&gt;</span></span><br><span class="line">　　　  <span class="tag">&lt;<span class="name">mapper</span>  <span class="attr">resource</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line">              ......</span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>mapper： mappers 的子元素节点，具体指定 SQL 映射文件的路径，其中 resource 属性的值表述了 SQL 映射文件的路径(类资源路径)。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Mybatis框架的核心配置的主要元素如下：&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Mybatis框架入门程序增删改查用户</title>
    <link href="http://dumengblog.club/2019/11/09/Mybatis%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8%E7%A8%8B%E5%BA%8F%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E7%94%A8%E6%88%B7/"/>
    <id>http://dumengblog.club/2019/11/09/Mybatis框架入门程序增删改查用户/</id>
    <published>2019-11-09T10:59:12.000Z</published>
    <updated>2019-10-04T11:19:52.050Z</updated>
    
    <content type="html"><![CDATA[<p>​        本篇文章接着上一篇最后的程序进行了增加和改写，实现了利用MyBatis框架对数据的增删改查。本次测试方法有所不同，没有在main方法下执行而是利用了@Test注解，自己导一下库，然后可以通过右键Run as -&gt;JUnit Test来进行测试。<a id="more"></a>然后就是一直有个小问题，就是日志一直不显示在控制台，我查了也不好使，将来再进行更改。</p><p>​        数据库测试前数据库数据如图：</p><p><img src="/../asset/image-20191004190847850.png" alt="image-20191004190847850"></p><img src="/../asset/image-20191004190954556.png" alt="image-20191004190954556" style="zoom:67%;"><p>JUnit信息：</p><img src="/../asset/image-20191004191036443.png" alt="image-20191004191036443" style="zoom:50%;"><p>数据库数据：</p><img src="/../asset/image-20191004191154155.png" alt="image-20191004191154155" style="zoom:50%;"><p>接下来附上源代码：</p><p>首先还是项目结构：</p><img src="/../asset/image-20191004191304564.png" alt="image-20191004191304564" style="zoom:67%;"><p>Customer.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dm.po;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 客户持久类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="keyword">private</span> String jobs;</span><br><span class="line"><span class="keyword">private</span> String phone;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> username;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.username = username;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getJobs</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> jobs;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJobs</span><span class="params">(String jobs)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.jobs = jobs;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> phone;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPhone</span><span class="params">(String phone)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.phone = phone;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Customer [id="</span> + id + <span class="string">", username="</span> + username + <span class="string">", jobs="</span></span><br><span class="line">+ jobs + <span class="string">", phone="</span> + phone + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CustomerMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper  </span></span><br><span class="line"><span class="meta">PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  </span></span><br><span class="line"><span class="meta">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- namespace为命名空间 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.dm.po.Customer"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 根据编号获取客户信息 parameterType为插入类型 ，resultType为返回类型 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findCustomerByID"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span></span></span><br><span class="line"><span class="tag"><span class="attr">resultType</span>=<span class="string">"com.dm.po.Customer"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- #&#123;id&#125;相当于？ --&gt;</span></span><br><span class="line">select * from customer where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 根据客户模糊查询 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findCustomerByName"</span> <span class="attr">parameterType</span>=<span class="string">"String"</span></span></span><br><span class="line"><span class="tag"><span class="attr">resultType</span>=<span class="string">"com.dm.po.Customer"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- concat字符串连接 --&gt;</span></span><br><span class="line">select *from customer where username like concat('%',#&#123;username&#125;,'%')</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--添加顾客 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addCustomer"</span> <span class="attr">parameterType</span>=<span class="string">"com.dm.po.Customer"</span>&gt;</span></span><br><span class="line">insert into customer</span><br><span class="line">(username,jobs,phone)values(#&#123;username&#125;,#&#123;jobs&#125;,#&#123;phone&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--更新用户信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateCustomer"</span> <span class="attr">parameterType</span>=<span class="string">"com.dm.po.Customer"</span>&gt;</span></span><br><span class="line">update customer set</span><br><span class="line">username =#&#123;username&#125;,jobs=#&#123;jobs&#125;,phone=#&#123;phone&#125; where id=#&#123;id&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 删除顾客信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteCustomer"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span>&gt;</span></span><br><span class="line">delete from customer</span><br><span class="line">where id =#&#123;id&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>MybatisTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dm.po.test;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.internal.runners.model.EachTestNotifier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dm.po.Customer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 入门程序测试：</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisTest</span> </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 根据用户id查询数据</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findCustomerByNameTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"><span class="comment">//1.读取配置文件</span></span><br><span class="line">String resource=<span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">InputStream inputStream =Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="comment">//2.根据配置文件构建SqlSessionFactory</span></span><br><span class="line">SqlSessionFactory sqlSessionFactory= <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line"><span class="comment">//3.通过sqlsessionFactory构建sqlsession</span></span><br><span class="line">SqlSession sqlSession=sqlSessionFactory.openSession();</span><br><span class="line"><span class="comment">//4.sqlsession执行映射文件中定义的Sql，并返回映射结果</span></span><br><span class="line"><span class="comment">//第一个参数是sql的id，第二个参数是传入给sql的占位符参数</span></span><br><span class="line">Customer customer=sqlSession.selectOne(<span class="string">"com.dm.po.Customer.findCustomerByID"</span>,<span class="number">2</span>);</span><br><span class="line"><span class="comment">//打印输出结果</span></span><br><span class="line">System.out.println(<span class="string">"根据id查询用户"</span>);</span><br><span class="line">System.out.println(customer.toString());</span><br><span class="line"><span class="comment">//5.关闭sqlsession</span></span><br><span class="line">sqlSession.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 根据用户名称模糊查询</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findCustomerByName</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">String resource=<span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">InputStream inputStream=Resources.getResourceAsStream(resource);</span><br><span class="line">SqlSessionFactory  sqlSessionFactory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">SqlSession sqlSession=sqlSessionFactory.openSession();</span><br><span class="line">List &lt;Customer&gt; list=sqlSession.selectList(<span class="string">"com.dm.po.Customer.findCustomerByName"</span>, <span class="string">"d"</span>);</span><br><span class="line">System.out.println(<span class="string">"根据模糊查询用户姓名查询顾客"</span>);</span><br><span class="line"><span class="keyword">for</span> (Customer customer : list) &#123;</span><br><span class="line">System.out.println(customer);</span><br><span class="line">&#125;</span><br><span class="line">sqlSession.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加用户</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCustomerTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">String resource=<span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">InputStream inputStream=Resources.getResourceAsStream(resource);</span><br><span class="line">SqlSessionFactory  sqlSessionFactory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">SqlSession sqlSession=sqlSessionFactory.openSession();</span><br><span class="line"><span class="comment">//添加操作 所以应该有对象</span></span><br><span class="line">Customer customer=<span class="keyword">new</span> Customer();</span><br><span class="line">customer.setUsername(<span class="string">"row"</span>);</span><br><span class="line">customer.setJobs(<span class="string">"学生"</span>);</span><br><span class="line">customer.setPhone(<span class="string">"7777777"</span>);</span><br><span class="line"><span class="comment">//返回行数</span></span><br><span class="line"><span class="keyword">int</span> rows=sqlSession.insert(<span class="string">"com.dm.po.Customer.addCustomer"</span>, customer);</span><br><span class="line"><span class="keyword">if</span>(rows&gt;<span class="number">0</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">"您成功插入"</span>+rows+<span class="string">"条数据"</span>);</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"执行插入操作失败"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//增删改都需要提交事务</span></span><br><span class="line">sqlSession.commit();</span><br><span class="line">sqlSession.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//更新用户</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateCustomerTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">String resource=<span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">InputStream inputStream=Resources.getResourceAsStream(resource);</span><br><span class="line">SqlSessionFactory  sqlSessionFactory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">SqlSession sqlSession=sqlSessionFactory.openSession();</span><br><span class="line"><span class="comment">//添加操作 所以应该有对象</span></span><br><span class="line">Customer customer=<span class="keyword">new</span> Customer();</span><br><span class="line">customer.setId(<span class="number">3</span>);</span><br><span class="line">customer.setUsername(<span class="string">"rows"</span>);</span><br><span class="line">customer.setJobs(<span class="string">"程序员"</span>);</span><br><span class="line">customer.setPhone(<span class="string">"7777777"</span>);</span><br><span class="line"><span class="comment">//返回行数</span></span><br><span class="line"><span class="keyword">int</span> rows=sqlSession.update(<span class="string">"com.dm.po.Customer.updateCustomer"</span>, customer);</span><br><span class="line"><span class="keyword">if</span>(rows&gt;<span class="number">0</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">"您成功更新"</span>+rows+<span class="string">"条数据"</span>);</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"执行插入操作失败"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//增删改都需要提交事务</span></span><br><span class="line">sqlSession.commit();</span><br><span class="line">sqlSession.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除用户</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteCustomerTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">String resource=<span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">InputStream inputStream=Resources.getResourceAsStream(resource);</span><br><span class="line">SqlSessionFactory sqlSessionFactory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">SqlSession sqlSession=sqlSessionFactory.openSession();</span><br><span class="line"><span class="keyword">int</span> rows=sqlSession.delete(<span class="string">"com.dm.po.Customer.deleteCustomer"</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span>(rows&gt;<span class="number">0</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">"您成功删除"</span>+rows+<span class="string">"条数据"</span>);</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"执行插入操作失败"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//增删改都需要提交事务</span></span><br><span class="line">sqlSession.commit();</span><br><span class="line">sqlSession.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>log4j.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Global logging configuration </span><br><span class="line">log4j.rootLogger=ERROR, stdout </span><br><span class="line"># MyBatis logging configuration... </span><br><span class="line">log4j.logger.com.dm=DEBUG</span><br><span class="line"># Console output... </span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender </span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout </span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n</span><br></pre></td></tr></table></figure><p>mybatis-config.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration  </span></span><br><span class="line"><span class="meta">PUBLIC "-//mybatis.org//DTD Config 3.0//EN"  </span></span><br><span class="line"><span class="meta">"http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置环境  默认的环境  id为 mysql --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用JDBC的事务管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置mapper的位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/dm/po/CustomerMapper.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​        本篇文章接着上一篇最后的程序进行了增加和改写，实现了利用MyBatis框架对数据的增删改查。本次测试方法有所不同，没有在main方法下执行而是利用了@Test注解，自己导一下库，然后可以通过右键Run as -&amp;gt;JUnit Test来进行测试。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="MyBatis" scheme="http://dumengblog.club/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis框架入门</title>
    <link href="http://dumengblog.club/2019/11/08/MyBatis%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8/"/>
    <id>http://dumengblog.club/2019/11/08/MyBatis框架入门/</id>
    <published>2019-11-08T02:13:58.000Z</published>
    <updated>2019-10-04T11:01:05.945Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-MyBatis框架简介"><a href="#1-MyBatis框架简介" class="headerlink" title="1. MyBatis框架简介"></a>1. MyBatis框架简介</h4><p> MyBatis本是Apache的一个开源项iBatis, 2010 年这个项目由Apache SoftwareFoundation迁移到了Google Code,并且改名为MyBatis.<a id="more"></a><br>MyBatis是一个基于 Java的持久层框架。MyBatis提供的持久层框架包括SQL Maps和Data Access Objects (DAO)，它消除了几乎所有的JDBC代码和参数的手工设置以及结果集的检索。MyBatis 使用简单的XML或注解用于配置和原始映射，将接口和Java的POJOs (Plain Old Java Objects,普通的Java对象)映射成数据库中的记录。<br>目前，Java 的持久层框架产品有许多，常见的有Hibernate和MyBatis。MyBatis 是一  个半自动映射的框架，因为MyBatis需要手动匹配POIO、SQL 和映射关系:而Hibernate是一个全表映射的框架，只需提供POJO和映射关系即可。MyBatis 是一个小巧、 方便、高效、简单、直接、半自动化的持久层框架: Hibernate是一 个强大、方便、高效、复杂、间接、全自动化的持久层框架。两个持久层框架各有优缺点，开发者应根据实际应用选择它们。</p><h4 id="2-MyBatis环境的构建"><a href="#2-MyBatis环境的构建" class="headerlink" title="2. MyBatis环境的构建"></a>2. MyBatis环境的构建</h4><p>(在最后测试报错因为版本问题所以建议大家下载低版本例如mybatis-3.4.5)<br>MyBatis的3.5.3版本可以通过“<a href="https://github.com/mybatis/mybatis-3/releases&quot;网址下载。在下载时只需选择mybatis-3.5.3.zip即可，解压后得到如图所示的目录。" target="_blank" rel="noopener">https://github.com/mybatis/mybatis-3/releases&quot;网址下载。在下载时只需选择mybatis-3.5.3.zip即可，解压后得到如图所示的目录。</a></p><p><img src="/../asset/image-20191108102813187.png" alt="image-20191108102813187"><br>图中的mybatis-3.5.3.jar是MyBatis的核心包，mybatis-3.5.3.pdf 是MyBatis的使用手册，lib文件夹下的JAR是MyBatis的依赖包。<br>在使用MyBatis框架时需要将它的核心包和依赖包引入到应用程序中。如果是Web应用，只需将核心包和依赖包复制到/WEB-INF/lib目录中。</p><h4 id="3-MyBatis的工作原理"><a href="#3-MyBatis的工作原理" class="headerlink" title="3. MyBatis的工作原理"></a>3. MyBatis的工作原理</h4><p>在学习MyBatis程序之前，读者需要了解一下MyBatis的工作原理，以便于理解程序。MyBatis的工作原理如图所示。</p><img src="/../asset/image-20191108111228137.png" alt="image-20191108111228137" style="zoom:67%;"><p>下面对图中的每步流程进行说明。<br>(1)读取MyBaits配置文件: mybatis-config.xml为MyBatis的全局配置文件，配置了MyBatis的运行环境等信息，例如数据库连接信息。 </p><p>(2)加载映射文件。映射文件即SQL映射文件，该文件中配置了操作数据库的SQL语句，需要在MyBatis配置文件mybatis-config.xml中加载。mybatis-config.xml文件可以加载多个映射文件，每个文件对应数据库中的一张表</p><p>(3)构造会话工厂:通过MyBatis的环境等配置信息构建会话工厂SqlSessionFactory。</p><p>(4) 创建会话对象:由会话工厂创建SqlSession对象，该对象中包含了执行SQL语句的所有方法。 </p><p>(5) Executor 执行器: MyBatis 底层定义了-一个Executor 接口来操作数据库，它将根据SqlSession传递的参数动态地生成需要执行的SQL语句，同时负责查询缓存的维护。 </p><p>(6) MappedStatement对象:在Executor 接口的执行方法中有一个MappedStatement类型的参数，该参数是对映射信息的封装，用于存储要映射的SQL语句的id、参数等信息。 </p><p>(7) 输入参数映射:输入参数类型可以是Map、List等集合类型，也可以是基本数据类型和POJO类型。输入参数映射过程类似于JDBC对preparedStatement对象设置参数的过程。 </p><p>(8) 输出结果映射:输出结果类型可以是Map、List 等集合类型，也可以是基本数据类型和POJO类型。输出结果映射过程类似于JDBC对结果集的解析过程。 </p><h4 id="4-实例"><a href="#4-实例" class="headerlink" title="4. 实例"></a>4. 实例</h4><h5 id="4-1-创建数据库"><a href="#4-1-创建数据库" class="headerlink" title="4.1 创建数据库"></a>4.1 创建数据库</h5><p>创建一个名为customer的顾客表。然后往里插入数据。</p><img src="/../asset/image-20191003114419490.png" alt="image-20191003114419490" style="zoom: 67%;"><p><img src="/../asset/image-20191003114637484.png" alt="image-20191003114637484"></p><h5 id="4-2-创建工程"><a href="#4-2-创建工程" class="headerlink" title="4.2 创建工程"></a>4.2 创建工程</h5><p>名字随便起了，接下来导入核心jar包，你下载的文件中lib所有包以及mybatis-3.5.3.jar还有mysql数据库连接包mysql-connector-java-5.1.28-bin.jar。</p><p>在src目录下新建一个log4j.properties，具体内容为你下载的文件中mybatis-3.5.3.pdf中的大概倒数第二页，内容如图：</p><p><img src="/../asset/image-20191003120508187.png" alt="image-20191003120508187"></p><p>将他复制粘贴到你的log4j.properties中，稍加修改<img src="/../asset/image-20191003121156831.png" alt="image-20191003121156831"></p><p>然后在src中建一个包，名字就为我圈的那个</p><p>接下来新建一个类，类名和数据库名相同。</p><img src="/../asset/image-20191003121419860.png" alt="image-20191003121419860" style="zoom: 50%;"><p>书写与数据库名字一样的属性（一定要和数据库字段名一致）然后生成右键source生成get set方法以及toString方法</p><img src="/../asset/image-20191003121809830.png" alt="image-20191003121809830" style="zoom: 67%;"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dm.po;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 客户持久类</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> Integer id;</span><br><span class="line">   <span class="keyword">private</span> String username;</span><br><span class="line">   <span class="keyword">private</span> String jobs;</span><br><span class="line">   <span class="keyword">private</span> String phone;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> id;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.id = id;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> username;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.username = username;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getJobs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> jobs;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJobs</span><span class="params">(String jobs)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.jobs = jobs;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> phone;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPhone</span><span class="params">(String phone)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.phone = phone;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"Customer [id="</span> + id + <span class="string">", username="</span> + username + <span class="string">", jobs="</span></span><br><span class="line">   + jobs + <span class="string">", phone="</span> + phone + <span class="string">"]"</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存接下来新建一个xml文件，名字自定义。</p><p>里头的内容还是在那个mybatis的pdf中去找大概在文章的2.1.5章节处</p><p><img src="/../asset/image-20191003122521257.png" alt="image-20191003122521257"></p><p>复制粘贴到你新建的xml文件中。</p><p>进行更改</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper  </span></span><br><span class="line"><span class="meta">PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  </span></span><br><span class="line"><span class="meta">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- namespace为命名空间 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.dm.po.Customer"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 根据编号获取客户信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findCustomerByID"</span>  <span class="attr">parameterType</span>=<span class="string">"Integer"</span> <span class="attr">resultType</span>=<span class="string">"com.dm.po.Customer"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- #&#123;id&#125;相当于？ --&gt;</span></span><br><span class="line">select * from customer where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在src包下建立mybatis-config.xml大概内容在pdf2.1.2章节下<img src="/../asset/image-20191003124017773.png" alt="image-20191003124017773"></p><p>代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration  </span></span><br><span class="line"><span class="meta">PUBLIC "-//mybatis.org//DTD Config 3.0//EN"  </span></span><br><span class="line"><span class="meta">"http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置环境  默认的环境  id为 mysql --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用JDBC的事务管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置mapper的位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/dm/po/CustomerMapper.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下来创建测试类：</p><p>MybatisTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dm.po.test;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dm.po.Customer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 入门程序测试：</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//1.读取配置文件</span></span><br><span class="line">String resource=<span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">InputStream inputStream =Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="comment">//2.根据配置文件构建SqlSessionFactory</span></span><br><span class="line">SqlSessionFactory sqlSessionFactory= <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line"><span class="comment">//3.通过sqlsessionFactory构建sqlsession</span></span><br><span class="line">SqlSession sqlSession=sqlSessionFactory.openSession();</span><br><span class="line"><span class="comment">//4.sqlsession执行映射文件中定义的Sql，并返回映射结果</span></span><br><span class="line"><span class="comment">//第一个参数是sql的id，第二个参数是传入给sql的占位符参数</span></span><br><span class="line">Customer customer=sqlSession.selectOne(<span class="string">"com.dm.po.Customer.findCustomerByID"</span>,<span class="number">1</span>);</span><br><span class="line"><span class="comment">//打印输出结果</span></span><br><span class="line">System.out.println(customer.toString());</span><br><span class="line"><span class="comment">//5.关闭sqlsession</span></span><br><span class="line">sqlSession.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在最后测试报错因为版本问题所以建议大家下载低版本例如mybatis-3.4.5,更换了mybatis版本后，代码成功运行。</p><p>运行结果：</p><p><img src="/../asset/image-20191003143848961.png" alt="image-20191003143848961"></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-MyBatis框架简介&quot;&gt;&lt;a href=&quot;#1-MyBatis框架简介&quot; class=&quot;headerlink&quot; title=&quot;1. MyBatis框架简介&quot;&gt;&lt;/a&gt;1. MyBatis框架简介&lt;/h4&gt;&lt;p&gt; MyBatis本是Apache的一个开源项iBatis, 2010 年这个项目由Apache SoftwareFoundation迁移到了Google Code,并且改名为MyBatis.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="MyBatis" scheme="http://dumengblog.club/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>Spring框架-Spring-AOP</title>
    <link href="http://dumengblog.club/2019/11/07/Spring%E6%A1%86%E6%9E%B6-Spring-AOP/"/>
    <id>http://dumengblog.club/2019/11/07/Spring框架-Spring-AOP/</id>
    <published>2019-11-07T11:07:48.000Z</published>
    <updated>2019-11-07T13:43:15.757Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-Spring-AOP的基本概念"><a href="#1-Spring-AOP的基本概念" class="headerlink" title="1.Spring AOP的基本概念"></a>1.Spring AOP的基本概念</h4><h5 id="1-1-AOP-的概念"><a href="#1-1-AOP-的概念" class="headerlink" title="1.1 AOP 的概念"></a>1.1 AOP 的概念</h5><p>AOP (Aspect-Oriented Programming) 即面向切面编程，它与OOP (Object-OrientedProgramming,面向对象编程)相辅相成， 提供了与OOP不同的抽象软件结构的视角。在OOP中，以类作为程序的基本单元，而AOP中的基本单元是Aspect (切面)。Struts2的拦截器设计就是基于AOP的思想，是个比较经典的应用。<a id="more"></a><br>在业务处理代码中通常有日志记录、性能统计、安全控制、事务处理、异常处理等操作。尽管使用OOP可以通过封装或继承的方式达到代码的重用，但仍然有同样的代码分散。在各个方法中。因此，采用00P处理日志记录等操作不仅增加了开发者的工作量，而且提高了升级维护的困难。为了解决此类问题，AOP 思想应运而生。AOP采取横向抽取机制，即将分散在各个方法中的重复代码提取出来，然后在程序编译或运行阶段将这些抽取出来的代码应用到需要执行的地方。这种横向抽取机制采用传统的OOP是无法办到的，因为00P实现的是父子关系的纵向重用。但是AOP不是OOP的替代品，而是OOP的补充，它们相辅相成。<br>在AOP中，横向抽取机制的类与切面的关系如图所示：</p><img src="/../asset/1573127100632.png" style="zoom:67%;"><p>如图，通过切面Aspect分别在业务类1和业务类2中加入了一系列操作。</p><h5 id="1-2-AOP的术语"><a href="#1-2-AOP的术语" class="headerlink" title="1.2 AOP的术语"></a>1.2 AOP的术语</h5><ol><li><p>切面 </p><p>切面(Aspect)是指封装 横切到系统功能（例如事务处理）的类。</p></li><li><p>连接点</p><p>连接点（Joinpoint）是指程序运行中的一些时间点，例如方法的调用或异常的抛出。</p></li><li><p>切入点</p></li></ol><p>​    切入点(Poincut) 是指需要处理的连接点。在Spring AOP中，所有的方法执行都是连接点，而切入    点是个描述信息， 它修饰的是连接点，通过切入点确定哪些连接点需要被处理。</p><ol start="4"><li>通知</li></ol><p>​       通知(Advice)是由切面添加到特定的连接点(满足切入点规则)的一段代码，即在定义好的切入点处      所要执行的程序代码，可以将其理解为切面开启后切面的方法，因此通知是切面的具体实现，</p><ol start="5"><li>引入</li></ol><p>​       引入(Introduction) 允许在现有的实现类中添加自定义的方法和属性。</p><ol start="6"><li>目标对象<br>目标对象(Target Object)是指所有被通知的对象。如果AOP框架使用运行时代理的方式(动态的AOP)来实现切面，那么通知对象总是一个代理对象。</li><li>代理</li></ol><p>​       代理(Proxy)是通知应用到目标对象之后被动态创建的对象。</p><ol start="8"><li>织入<br>织入(Weaving) 是将切面代码插入到目标对象上，从而生成代理对象的过程。根据不同的实现技术，AOP 织入有3种方式:编译期织入，需要有特殊的Java编译器；类装载期织入，需要有特殊的类装载器；动态代理织入，在运行期为目标类添加通如生成子类的方式。Spring AOP框架默认采用动态代理织入，而AspetJ(基于Java 语言的AOP概架)  采用编译器织入和类装载期织入。</li></ol><h4 id="2-动态代理"><a href="#2-动态代理" class="headerlink" title="2.  动态代理"></a>2.  动态代理</h4><h5 id="2-1-JDK动态代理"><a href="#2-1-JDK动态代理" class="headerlink" title="2.1 JDK动态代理"></a>2.1 JDK动态代理</h5><p>​     JDK动态代理是java.lang.reflect.*包提供的方式，它必须借助一个接口才能产生代理对象。因此，对于使用业务接口的类，Spring 默认使用JDK动态代理实现AOP.下面通过一个实例演示如何使用JDK动态代理实现Spring AOP，具体步骤如下：</p><ol><li>Userdao.java</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JDk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Userdao</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>UserdaoImpl.java</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JDk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserdaoImpl</span> <span class="keyword">implements</span> <span class="title">Userdao</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"保存"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"修改"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"删除"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>Myaspect.java</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JDk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Myaspect</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"模拟权限控制"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">expect</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"模拟异常处理"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"模拟日志记录"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">monitor</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"性能检测"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>jdkproxy.java</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JDk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.corba.se.impl.orb.ParserTable.TestAcceptor1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">jdkproxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Userdao userdao;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">createProxy</span><span class="params">(Userdao userdao)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.userdao=userdao;</span><br><span class="line">ClassLoader classLoader=jdkproxy.class.getClassLoader();</span><br><span class="line">Class[] clazz=userdao.getClass().getInterfaces();</span><br><span class="line"><span class="keyword">return</span> Proxy.newProxyInstance(classLoader, clazz, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">Myaspect myaspect=<span class="keyword">new</span> Myaspect();</span><br><span class="line">myaspect.check();</span><br><span class="line">myaspect.expect();</span><br><span class="line">Object object=method.invoke(userdao, args);</span><br><span class="line">myaspect.log();</span><br><span class="line">myaspect.monitor();</span><br><span class="line"><span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>jdktest.java</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JDk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">jdktest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">jdkproxy jdkproxy=<span class="keyword">new</span> jdkproxy();</span><br><span class="line">Userdao userdao=<span class="keyword">new</span> UserdaoImpl();</span><br><span class="line">Userdao userdao2=(Userdao) jdkproxy.createProxy(userdao);</span><br><span class="line">userdao2.save();</span><br><span class="line">System.out.println(<span class="string">"============"</span>);</span><br><span class="line">userdao2.modify();</span><br><span class="line">System.out.println(<span class="string">"============"</span>);</span><br><span class="line">userdao2.delete();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>模拟权限控制<br>模拟异常处理<br>保存<br>模拟日志记录</p><p>性能检测</p><p>============</p><p>模拟权限控制<br>模拟异常处理<br>修改<br>模拟日志记录</p><p>性能检测</p><p>============</p><p>模拟权限控制<br>模拟异常处理<br>删除<br>模拟日志记录<br>性能检测</p><h5 id="2-2-CGLIB动态代理"><a href="#2-2-CGLIB动态代理" class="headerlink" title="2.2 CGLIB动态代理"></a>2.2 CGLIB动态代理</h5><p>​      CGLIB (Code Generation Library)是一个高性能开源的代码生成包，采用非常底层的字节码技术，对指定的目标类生成一个子类， 并对子类进行增强。在Spring Core包中已经集成了CGLIB所需要的JAR包，不需要另外导入JAR包。下面通过一个实例演示CGLIB动态代理的实现过程，具体步骤如下:</p><p>Testdao.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CGLIB;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Testdao</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"保存"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moidify</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"修改"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"删除"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CGLiBproxy.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CGLIB;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.Enhancer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.MethodProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> JDk.Myaspect;</span><br><span class="line"><span class="keyword">import</span> sun.font.CreatedFontTracker;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CGLiBproxy</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">Createproxy</span><span class="params">(Object target)</span></span>&#123;</span><br><span class="line">Enhancer enhancer=<span class="keyword">new</span> Enhancer();</span><br><span class="line">enhancer.setSuperclass(target.getClass());</span><br><span class="line">enhancer.setCallback(<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">return</span> enhancer.create();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object proxy, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">Myaspect myaspect=<span class="keyword">new</span> Myaspect();</span><br><span class="line">myaspect.check();</span><br><span class="line">myaspect.expect();</span><br><span class="line">Object object=methodProxy.invokeSuper(proxy, args);</span><br><span class="line">myaspect.log();</span><br><span class="line">myaspect.monitor();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CGLIBProxyTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> CGLIB;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CGLIBProxyTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">CGLiBproxy cgLiBproxy=<span class="keyword">new</span> CGLiBproxy();</span><br><span class="line">Testdao testdao=<span class="keyword">new</span> Testdao();</span><br><span class="line">Testdao testdao2=(Testdao) cgLiBproxy.Createproxy(testdao);</span><br><span class="line">testdao2.save();</span><br><span class="line">System.out.println(<span class="string">"====================="</span>);</span><br><span class="line">testdao2.moidify();</span><br><span class="line">System.out.println(<span class="string">"====================="</span>);</span><br><span class="line">testdao2.delete();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>模拟权限控制<br>模拟异常处理<br>保存<br>模拟日志记录</p><p>性能检测</p><p>=====================</p><p>模拟权限控制<br>模拟异常处理<br>修改<br>模拟日志记录</p><p>性能检测</p><p>=====================</p><p>模拟权限控制<br>模拟异常处理<br>删除<br>模拟日志记录<br>性能检测</p><h4 id="3-基于xml配置实现AspectJ"><a href="#3-基于xml配置实现AspectJ" class="headerlink" title="3. 基于xml配置实现AspectJ"></a>3. 基于xml配置实现AspectJ</h4><p>1:定义UserController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2：定义切面类   实现功能：保存用户操作记录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AopLogging</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 前置通知</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 获取方法名称</span></span><br><span class="line">String name = joinPoint.getSignature().getName();</span><br><span class="line"><span class="comment">// 获取方法参数</span></span><br><span class="line">Object[] args = joinPoint.getArgs();</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 实际项目中根据session中的用户信息，保存操作记录到数据库</span></span><br><span class="line"><span class="keyword">if</span> (name.equals(<span class="string">"add"</span>)) &#123;</span><br><span class="line">System.out.println(<span class="string">"【用户执行添加操作】"</span>); </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (name.equals(<span class="string">"update"</span>)) &#123;</span><br><span class="line">System.out.println(<span class="string">"【用户执行更新操作】"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"【用户执行删除操作】"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 返回通知   result：方法执行返回的结果</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(JoinPoint joinPoint, Object result)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 获取方法名称</span></span><br><span class="line">String name = joinPoint.getSignature().getName();</span><br><span class="line"><span class="comment">// 打印方法执行结果</span></span><br><span class="line">System.out.println(name + <span class="string">"运行结果："</span> + result);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 异常通知   exception：方法运行出错时抛出的异常</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">(JoinPoint joinPoint, Exception exception)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 获取方法名称</span></span><br><span class="line">String name = joinPoint.getSignature().getName();</span><br><span class="line"><span class="comment">// 打印异常信息</span></span><br><span class="line">System.out.println(name + <span class="string">"运行异常信息："</span> + exception);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 最终通知</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"最终通知"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//环绕通知</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里操作相当于前置通知</span></span><br><span class="line">System.out.println(<span class="string">"环绕==前置通知"</span>);</span><br><span class="line"></span><br><span class="line">Object obj = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">obj = joinPoint.proceed();</span><br><span class="line"><span class="comment">//这里操作是后置通知</span></span><br><span class="line">System.out.println(<span class="string">"环绕==后置通知"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line"><span class="comment">//这里操作是异常通知</span></span><br><span class="line">System.out.println(<span class="string">"环绕==异常通知"</span>);</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"环绕==最终通知"</span>);</span><br><span class="line"><span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3：配置xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置Bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userController"</span> <span class="attr">class</span>=<span class="string">"com.mote.controller.UserController"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"aopLogging"</span> <span class="attr">class</span>=<span class="string">"com.mote.aop.AopLogging"</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置切入点 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pointcut"</span></span></span><br><span class="line"><span class="tag"><span class="attr">expression</span>=<span class="string">"execution(public * com.mote.controller.UserController.*(..)) "</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置切面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"aopLogging"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置相应通知 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span> <span class="attr">method</span>=<span class="string">"before"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- result和exception需要和方法中的参数一致 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span> <span class="attr">method</span>=<span class="string">"afterReturning"</span> <span class="attr">returning</span>=<span class="string">"result"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span> <span class="attr">method</span>=<span class="string">"afterThrowing"</span> <span class="attr">throwing</span>=<span class="string">"exception"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span> <span class="attr">method</span>=<span class="string">"after"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span> <span class="attr">method</span>=<span class="string">"around"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4：测试打印</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testXml</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建容器</span></span><br><span class="line">ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//从容器中获取bean</span></span><br><span class="line">UserController userController = context.getBean(UserController.class); </span><br><span class="line">    </span><br><span class="line"><span class="comment">//调用方法</span></span><br><span class="line">userController.deleteUser(); </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <img src="https://img-blog.csdn.net/20180904174733216?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3OTM2NTQy/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p>五：纯注解方式实现AspectJ</p><p>1：定义UserController，同上</p><p>2：定义切面类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.After;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.AfterReturning;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.AfterThrowing;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">//标注这是一个切面类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AopLogging</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置公共切点</span></span><br><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"execution(public * com.mote.controller.UserController.*(..))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointcut</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Before</span>(<span class="string">"pointcut()"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 获取方法名称</span></span><br><span class="line">String name = joinPoint.getSignature().getName();</span><br><span class="line"><span class="comment">// 获取方法参数</span></span><br><span class="line">Object[] args = joinPoint.getArgs();</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 实际项目中根据session中的用户信息，保存操作记录到数据库</span></span><br><span class="line"><span class="keyword">if</span> (name.equals(<span class="string">"add"</span>)) &#123;</span><br><span class="line">System.out.println(<span class="string">"【用户执行添加操作】"</span>); </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (name.equals(<span class="string">"update"</span>)) &#123;</span><br><span class="line">System.out.println(<span class="string">"【用户执行更新操作】"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"【用户执行删除操作】"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@AfterReturning</span>(pointcut=<span class="string">"pointcut()"</span>,returning=<span class="string">"result"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(JoinPoint joinPoint, Object result)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 获取方法名称</span></span><br><span class="line">String name = joinPoint.getSignature().getName();</span><br><span class="line"><span class="comment">// 打印方法执行结果</span></span><br><span class="line">System.out.println(name + <span class="string">"运行结果："</span> + result);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@AfterThrowing</span>(pointcut=<span class="string">"pointcut()"</span>,throwing=<span class="string">"exception"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">(JoinPoint joinPoint, Exception exception)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 获取方法名称</span></span><br><span class="line">String name = joinPoint.getSignature().getName();</span><br><span class="line"><span class="comment">// 打印异常信息</span></span><br><span class="line">System.out.println(name + <span class="string">"运行异常信息："</span> + exception);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@After</span>(<span class="string">"pointcut()"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"最终通知"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Around</span>(<span class="string">"pointcut()"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里操作相当于前置通知</span></span><br><span class="line">System.out.println(<span class="string">"环绕==前置通知"</span>);</span><br><span class="line"></span><br><span class="line">Object obj = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">obj = joinPoint.proceed();</span><br><span class="line"><span class="comment">//这里操作相当于后置通知</span></span><br><span class="line">System.out.println(<span class="string">"环绕==后置通知"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line"><span class="comment">//这里操作相当于异常通知</span></span><br><span class="line">System.out.println(<span class="string">"环绕==异常通知"</span>);</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这里操作相当于最终通知</span></span><br><span class="line">System.out.println(<span class="string">"环绕==最终通知"</span>);</span><br><span class="line"><span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3：注解配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.EnableAspectJAutoProxy;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.mote.aop.AopLogging;</span><br><span class="line"><span class="keyword">import</span> com.mote.controller.UserController;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span> <span class="comment">//开启Spring支持AspectJ注解</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span> <span class="comment">//将UserController添加到spring容器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> UserController <span class="title">userController</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> UserController();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span> <span class="comment">//将切面添加到容器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AopLogging <span class="title">aopLogging</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> AopLogging();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者使用xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启Spring支持AspectJ注解 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置Bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userController"</span> <span class="attr">class</span>=<span class="string">"com.mote.controller.UserController"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"aopLogging"</span> <span class="attr">class</span>=<span class="string">"com.mote.aop.AopLogging"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>4：测试打印</p><p>1：注解配置类对应的测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 创建容器</span></span><br><span class="line">AnnotationConfigApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(MainConfig.class);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 从容器中获取bean</span></span><br><span class="line">UserController userController = context.getBean(UserController.class);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 调用方法</span></span><br><span class="line">userController.deleteUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2：xml配置对应的测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testXml</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 创建容器</span></span><br><span class="line">ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(</span><br><span class="line"><span class="string">"beans.xml"</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 从容器中获取bean</span></span><br><span class="line">UserController userController = context.getBean(UserController.class);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 调用方法</span></span><br><span class="line">userController.deleteUser();</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <img src="https://img-blog.csdn.net/20180904181021721?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3OTM2NTQy/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p>注意一：JoinPoint joinPoint在方法的参数列表中，必须放在第一位，否则会报错</p><p>注意二：@AfterReturning和@AfterThrowing必须配置对应的returning和throwing参数</p><h3 id="Spring-AOP-最热门面试题及答案"><a href="#Spring-AOP-最热门面试题及答案" class="headerlink" title="Spring AOP 最热门面试题及答案"></a>Spring AOP 最热门面试题及答案</h3><h4 id="内容大纲："><a href="#内容大纲：" class="headerlink" title="内容大纲："></a>内容大纲：</h4><ul><li>描述一下Spring AOP？</li><li>在Spring AOP中关注点(concern)和横切关注点(cross-cutting concern)有什么不同？</li><li>AOP有哪些可用的实现？</li><li>Spring中有哪些不同的通知类型(advice types)？</li><li>Spring AOP 代理是什么？</li><li>引介(Introduction)是什么？</li><li>连接点(Joint Point)和切入点(Point Cut)是什么？</li><li>织入（Weaving）是什么？</li></ul><h4 id="描述一下Spring-AOP"><a href="#描述一下Spring-AOP" class="headerlink" title="描述一下Spring AOP"></a>描述一下Spring AOP</h4><p>Spring AOP(Aspect Oriented  Programming，面向切面编程)是OOPs(面向对象编程)的补充，它也提供了模块化。在面向对象编程中，关键的单元是对象，AOP的关键单元是切面，或者说关注点（可以简单地理解为你程序中的独立模块）。一些切面可能有集中的代码，但是有些可能被分散或者混杂在一起，例如日志或者事务。<strong>这些分散的切面被称为横切关注点</strong>。一个横切关注点是一个可以影响到整个应用的关注点，而且应该被尽量地集中到代码的一个地方，例如事务管理、权限、日志、安全等。<br> AOP让你可以使用简单可插拔的配置，在实际逻辑执行之前、之后或周围动态添加横切关注点。这让代码在当下和将来都变得易于维护。如果你是使用XML来使用切面的话，要添加或删除关注点，你不用重新编译完整的源代码，而仅仅需要修改配置文件就可以了。<br> Spring AOP通过以下两种方式来使用。但是最广泛使用的方式是Spring AspectJ 注解风格(Spring AspectJ Annotation Style)</p><ul><li>使用AspectJ 注解风格</li><li>使用Spring XML 配置风格</li></ul><h4 id="在Spring-AOP中关注点和横切关注点有什么不同？"><a href="#在Spring-AOP中关注点和横切关注点有什么不同？" class="headerlink" title="在Spring AOP中关注点和横切关注点有什么不同？"></a>在Spring AOP中关注点和横切关注点有什么不同？</h4><p><strong>关注点是我们想在应用的模块中实现的行为</strong>。关注点可以被定义为：我们想实现以解决特定业务问题的方法。比如，在所有电子商务应用中，不同的关注点（或者模块）可能是库存管理、航运管理、用户管理等。<br> <strong>横切关注点是贯穿整个应用程序的关注点</strong>。像日志、安全和数据转换，它们在应用的每一个模块都是必须的，所以他们是一种横切关注点。</p><h4 id="AOP有哪些可用的实现？"><a href="#AOP有哪些可用的实现？" class="headerlink" title="AOP有哪些可用的实现？"></a>AOP有哪些可用的实现？</h4><p>基于Java的主要AOP实现有：</p><ol><li>AspectJ</li><li>Spring AOP</li><li>JBoss AOP</li></ol><p>在维基百科上你可以找到一个<a href="https://en.wikipedia.org/wiki/Aspect-oriented_programming#Implementations" target="_blank" rel="noopener">AOP实现的大列表</a>。</p><h4 id="Spring中有哪些不同的通知类型"><a href="#Spring中有哪些不同的通知类型" class="headerlink" title="Spring中有哪些不同的通知类型"></a>Spring中有哪些不同的通知类型</h4><p>通知(advice)是你在你的程序中想要应用在其他模块中的横切关注点的实现。Advice主要有以下5种类型：</p><ol><li><strong>前置通知(Before Advice)</strong>: 在连接点之前执行的Advice，不过除非它抛出异常，否则没有能力中断执行流。使用 <code>@Before</code> 注解使用这个Advice。</li><li><strong>返回之后通知(After Retuning Advice)</strong>: 在连接点正常结束之后执行的Advice。例如，如果一个方法没有抛出异常正常返回。通过 <code>@AfterReturning</code> 关注使用它。</li><li><strong>抛出（异常）后执行通知(After Throwing Advice)</strong>: 如果一个方法通过抛出异常来退出的话，这个Advice就会被执行。通用 <code>@AfterThrowing</code> 注解来使用。</li><li><strong>后置通知(After Advice)</strong>: 无论连接点是通过什么方式退出的(正常返回或者抛出异常)都会执行在结束后执行这些Advice。通过 <code>@After</code> 注解使用。</li><li><strong>围绕通知(Around Advice)</strong>: 围绕连接点执行的Advice，就你一个方法调用。这是最强大的Advice。通过 <code>@Around</code> 注解使用。</li></ol><h4 id="Spring-AOP-代理是什么？"><a href="#Spring-AOP-代理是什么？" class="headerlink" title="Spring AOP 代理是什么？"></a>Spring AOP 代理是什么？</h4><p>代理是使用非常广泛的设计模式。简单来说，<strong>代理是一个看其他像另一个对象的对象，但它添加了一些特殊的功能</strong>。<br> Spring AOP是基于代理实现的。<strong>AOP 代理是一个由 AOP 框架创建的用于在运行时实现切面协议的对象</strong>。<br> Spring AOP默认为 AOP 代理使用标准的 JDK 动态代理。这使得任何接口（或者接口的集合）可以被代理。Spring AOP 也可以使用 CGLIB 代理。这对代理类而不是接口是必须的。<br> <strong>如果业务对象没有实现任何接口那么默认使用CGLIB</strong>。</p><h4 id="引介-Introduction-是什么？"><a href="#引介-Introduction-是什么？" class="headerlink" title="引介(Introduction)是什么？"></a>引介(Introduction)是什么？</h4><p><strong>引介让一个切面可以声明被通知的对象实现了任何他们没有真正实现的额外接口</strong>，而且为这些对象提供接口的实现<br> 使用 <code>@DeclareParaents</code> 注解来生成一个引介。<br> 更多详情，请参考 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#aop" target="_blank" rel="noopener">官方文档</a></p><h4 id="连接点-Joint-Point-和切入点-Point-cut-是什么？"><a href="#连接点-Joint-Point-和切入点-Point-cut-是什么？" class="headerlink" title="连接点(Joint Point)和切入点(Point cut)是什么？"></a>连接点(Joint Point)和切入点(Point cut)是什么？</h4><p>连接点是程序执行的一个点。例如，一个方法的执行或者一个异常的处理。在 Spring AOP 中，<strong>一个连接点总是代表一个方法执行</strong>。举例来说，所有定义在你的 <code>EmpoyeeManager</code> 接口中的方法都可以被认为是一个连接点，如果你在这些方法上使用横切关注点的话。<br> <strong>切入点(切入点)是一个匹配连接点的断言或者表达式</strong>。Advice 与切入点表达式相关联，并在切入点匹配的任何连接点处运行（比如，表达式 <code>execution(* EmployeeManager.getEmployeeById(...))</code> 可以匹配 <code>EmployeeManager</code> 接口的 <code>getEmployeeById()</code> ）。由切入点表达式匹配的连接点的概念是 AOP 的核心。Spring 默认使用 AspectJ 切入点表达式语言。</p><h4 id="什么是织入-weaving-？"><a href="#什么是织入-weaving-？" class="headerlink" title="什么是织入(weaving)？"></a>什么是织入(weaving)？</h4><p><strong>Spring AOP 框架仅支持有限的几个 AspectJ 切入点的类型，它允许将切面运用到在 IoC 容器中声明的  bean 上。如果你想使用额外的切入点类型或者将切面应用到在 Spring IoC 容器外部创建的类，那么你必须在你的 Spring 程序中使用  AspectJ 框架，并且使用它的织入特性。</strong><br> 织入是将切面与外部的应用类型或者类连接起来以创建通知对象(adviced object)的过程。这可以在编译时(比如使用 AspectJ  编译器)、加载时或者运行时完成。Spring AOP 跟其他纯 Java AOP 框架一样，只在运行时执行织入。在协议上，AspectJ  框架支持编译时和加载时织入。<br> AspectJ 编译时织入是通过一个叫做 <strong><em>ajc</em></strong> 特殊的 AspectJ  编译器完成的。它可以将切面织入到你的 Java 源码文件中，然后输出织入后的二进制 class 文件。它也可以将切面织入你的编译后的 class  文件或者 Jar 文件。这个过程叫做后编译时织入(post-compile-time weaving)。在 Spring IoC  容器中声明你的类之前，你可以为它们运行编译时和后编译时织入。Spring  完全没有被包含到织入的过程中。更多关于编译时和后编译时织入的信息，请查阅 AspectJ 文档。<br> AspectJ 加载时织入(load-time weaving,  LTW)在目标类被类加载器加载到JVM时触发。对于一个被织入的对象，需要一个特殊的类加载器来增强目标类的字节码。AspectJ 和 Spring  都提供了加载时织入器以为类加载添加加载时织入的能力。你只需要简单的配置就可以打开这个加载时织入器。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-Spring-AOP的基本概念&quot;&gt;&lt;a href=&quot;#1-Spring-AOP的基本概念&quot; class=&quot;headerlink&quot; title=&quot;1.Spring AOP的基本概念&quot;&gt;&lt;/a&gt;1.Spring AOP的基本概念&lt;/h4&gt;&lt;h5 id=&quot;1-1-AOP-的概念&quot;&gt;&lt;a href=&quot;#1-1-AOP-的概念&quot; class=&quot;headerlink&quot; title=&quot;1.1 AOP 的概念&quot;&gt;&lt;/a&gt;1.1 AOP 的概念&lt;/h5&gt;&lt;p&gt;AOP (Aspect-Oriented Programming) 即面向切面编程，它与OOP (Object-OrientedProgramming,面向对象编程)相辅相成， 提供了与OOP不同的抽象软件结构的视角。在OOP中，以类作为程序的基本单元，而AOP中的基本单元是Aspect (切面)。Struts2的拦截器设计就是基于AOP的思想，是个比较经典的应用。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Spring" scheme="http://dumengblog.club/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring框架-Spring Bean</title>
    <link href="http://dumengblog.club/2019/11/07/Spring%E6%A1%86%E6%9E%B6-Spring-Bean/"/>
    <id>http://dumengblog.club/2019/11/07/Spring框架-Spring-Bean/</id>
    <published>2019-11-07T08:06:56.000Z</published>
    <updated>2019-11-07T09:30:10.821Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-bean的配置"><a href="#1-bean的配置" class="headerlink" title="1. bean的配置"></a>1. bean的配置</h4><p>Spring可以看做一个大工厂，用于生产和管理Spring容器中的Bean，需要开发者将Bean配置在Spring的配置文件中。Spring框架支持XML和Properties两种格式的配置文件，实际开发中常用XML格式的配置文件。</p><a id="more"></a><p>从上一篇博客可知XML配置文件的根元素是<beans>,<beans>中包含多个<bean>子元素，每个<bean>元素定义一个Bean，并描述Bean如何装配到Spring容器中。<bean>元素常用属性及其子元素如下：</bean></bean></bean></beans></beans></p><table><thead><tr><th>属性或子元素名称</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>是一个Bean的唯一标识符，Spring容器对Bean的配置、管理都通过该属性来完成</td></tr><tr><td>name</td><td>Spring容器同样可以通过此属性对容器中的Bean进行配置和管理，name属性中可以未Bean指定多个名称，每个名称之间用逗号或分号隔开</td></tr><tr><td>class</td><td>该属性指定了Bean的具体实现类，它必须是一个完整的类名，使用类的权限定名</td></tr><tr><td>scope</td><td>用来设定Bean实例的作用域，其属性有singleton（单例）、prototype（原型）、request、session、global Session、application 和websocket。其默认值为singleton</td></tr><tr><td>constructor-arg</td><td><bean>元素的子元素，可以使用此元素传入构造参数进行实例化。该元素的index属性指定构造参数的序号（从0开始），type属性指定构造参数的类型，参数值可以通过ref属性或value属性直接指定，也可以通过ref或value子元素指定</bean></td></tr><tr><td>property</td><td><bean>元素的子元素，用于调用Bean实例中的setter方法完成属性赋值，从而完成依赖注入。该元素的name属性指定Bean实例中的相应属性名，ref属性或value属性用于指定参数值</bean></td></tr><tr><td>ref</td><td><property>、<constructor-arg>等元素的属性或子元素，可以用于指定对Bean工厂中某个Bean实例的引用</constructor-arg></property></td></tr><tr><td>value</td><td><property>、<constructor-arg>等元素的属性或子元素。可以用于直接指定一个常量值</constructor-arg></property></td></tr><tr><td>list</td><td>用于封装List或数组类型的依赖注入</td></tr><tr><td>set</td><td>用于封装Set类型属性的依赖注入</td></tr><tr><td>entry</td><td><map>元素的子元素，用于设置一个键值对。其key属性指定字符串类型的键值，ref或value子元素指定其值，也可以通过value-ref或value属性指定其值</map></td></tr><tr><td>map</td><td>用于封装Map类型属性的依赖注入</td></tr></tbody></table><h4 id="2-bean的实例化"><a href="#2-bean的实例化" class="headerlink" title="2. bean的实例化"></a>2. bean的实例化</h4><p>第一种：构造方法实例化<strong>（第一种是重点，第二三种已经没太多人用了）</strong></p><p>1.创建一个类：</p><p>bean1.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.spring.demo;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean1</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Bean1......"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个bean只有一个print方法</p><p>2.在Spring配置文件Bean.xml 中 配置 bean：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- 关键部分 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bean1"</span> <span class="attr">class</span>=<span class="string">"com.spring.demo.Bean1"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><bean id="“bean1”" class="com.spring.demo.Bean1"></bean>：</p><p>id 为 在 xml 里的这个 bean的标识。 class 为xml 里的这个bean 绑定的java类(bean)的全路径(包名+类名)</p><p>这个标签会自动寻找 Bean1类中的无参数构造函数来创建对象</p><p>3.测试代码从配置文件中取出Bean1对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.spring.demo;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextIoc</span> </span>&#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">textUser</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//1.获取spring文件</span></span><br><span class="line"> ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"Bean.xml"</span>);</span><br><span class="line"> <span class="comment">//2.由配置文件返回对象</span></span><br><span class="line"> Bean1 b = (Bean1)context.getBean(<span class="string">"bean1"</span>);</span><br><span class="line"> System.out.println(b);</span><br><span class="line"> b.print();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getBean() 返回的就是由spring 实例化的对象。</p><p>结果是：打印返回的对象b，和调用 b 的print()方法</p><p>第二种：使用静态工厂创建</p><p>1.创建一个类：</p><p>bean2.java：（就是要创建这个类的对象）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.spring.demo;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Bean2......"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.配置spring的配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- 关键部分 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bean2"</span> <span class="attr">class</span>=<span class="string">"com.spring.demo.Bean2Factory"</span> <span class="attr">factory-method</span>=<span class="string">"getBean2"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​     </p><p><bean id="bean2" class="com.spring.demo.Bean2Factory" factory-method="getBean2"></bean>：</p><p>表示创建的对象(bean)用bean2指代，使用到的class(类)为com.spring.demo 包 下的Bean2Factory类(作为工厂类)</p><p>factory-method = “getBean2”表示调用 class 下的 getBean2方法来创建对象(而且factory-method指定的方法必须为static静态方法)</p><p>3.定义静态工厂类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.spring.demo;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean2Factory</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bean2 <span class="title">getBean2</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Bean2();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意静态工厂类的创建对象方法为静态</p><p>4.测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextIoc</span> </span>&#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">textUser</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//1.获取spring文件</span></span><br><span class="line"> ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"Bean.xml"</span>);</span><br><span class="line"> <span class="comment">//2.由配置文件返回对象</span></span><br><span class="line"> Bean3 b = (Bean2)context.getBean(<span class="string">"bean2"</span>);</span><br><span class="line"> System.out.println(b);</span><br><span class="line"> b.print();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三种：使用实例工厂创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.spring.demo;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean3</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Bean3......"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.配置spring的配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- 关键部分 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bean3factory"</span> <span class="attr">class</span>=<span class="string">"com.spring.demo.Bean3Factory"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bean3"</span> <span class="attr">factory-bean</span>=<span class="string">"bean3factory"</span> <span class="attr">factory-method</span>=<span class="string">"getBean3"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    </p><p>第八行：<bean id="bean3factory" class="com.spring.demo.Bean3Factory"></bean>  ：为在xml配置文件中定义一个bean，这个bean的id 为bean3factory ，创建所用到的类(class)为com.spring.demo 包下的 Bean3Factory类</p><p>第九行：<bean id="bean3" factory-bean="bean3factory" factory-method="getBean3"></bean> ：</p><p>在定义一个bean，id 为bean3，生产它的工厂类为 bean3factory，调用 bean3factory生产 bean3的方法为 (bean3factory的)getBean3()方法</p><p>3.(非静态)工厂类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.spring.demo;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean3Factory</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Bean3 <span class="title">getBean3</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Bean3();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextIoc</span> </span>&#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">textUser</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//1.获取spring文件</span></span><br><span class="line"> ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"Bean.xml"</span>);</span><br><span class="line"> <span class="comment">//2.由配置文件返回对象</span></span><br><span class="line"> Bean3 b = (Bean3)context.getBean(<span class="string">"bean3"</span>);</span><br><span class="line"> System.out.println(b);</span><br><span class="line"> b.print();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行：</p><p>打印出对象，和调用bean3的print方法</p><p>静态工厂类与非静态工厂类的区别是，前者不需要创建对象，直接可以调用静态方法创建bean；后者则要先创建对象，然后再通过对象调用其方法创建bean。</p><h4 id="3-Bean的作用域"><a href="#3-Bean的作用域" class="headerlink" title="3. Bean的作用域"></a>3. Bean的作用域</h4><p>在Spring中不仅可以完成Bean的实例化，还可以为Bean指定作用域。</p><p>在<code>Spring Framework</code>中，总共定义了6种<code>bean</code> 的作用域，其中有4种作用域只有当应用为<code>web</code>应用的时候才有效，并且<code>Spring</code>还支持自定义作用域。</p><p>下表描述了这6种作用域：</p><table><thead><tr><th>Scope</th><th>Description</th></tr></thead><tbody><tr><td><a href="https://docs.spring.io/spring/docs/5.1.4.RELEASE/spring-framework-reference/core.html#beans-factory-scopes-singleton" target="_blank" rel="noopener">singleton</a></td><td>（默认的）使用singleton定义的Bean在Spring容器中只有一个Bean实例</td></tr><tr><td><a href="https://docs.spring.io/spring/docs/5.1.4.RELEASE/spring-framework-reference/core.html#beans-factory-scopes-prototype" target="_blank" rel="noopener">prototype</a></td><td>一个<code>bean</code>定义可以有多个<code>bean</code>实例。</td></tr><tr><td><a href="https://docs.spring.io/spring/docs/5.1.4.RELEASE/spring-framework-reference/core.html#beans-factory-scopes-request" target="_blank" rel="noopener">request</a></td><td>一个<code>bean</code>定义对应于单个<code>HTTP</code> 请求的生命周期。也就是说，每个<code>HTTP</code> 请求都有一个<code>bean</code>实例，且该实例仅在这个<code>HTTP</code> 请求的生命周期里有效。该作用域仅适用于<code>WebApplicationContext</code>环境。</td></tr><tr><td><a href="https://docs.spring.io/spring/docs/5.1.4.RELEASE/spring-framework-reference/core.html#beans-factory-scopes-session" target="_blank" rel="noopener">session</a></td><td>一个<code>bean</code> 定义对应于单个<code>HTTP Session</code> 的生命周期，也就是说，每个<code>HTTP Session</code> 都有一个<code>bean</code>实例，且该实例仅在这个<code>HTTP Session</code> 的生命周期里有效。该作用域仅适用于<code>WebApplicationContext</code>环境。</td></tr><tr><td><a href="https://docs.spring.io/spring/docs/5.1.4.RELEASE/spring-framework-reference/core.html#beans-factory-scopes-application" target="_blank" rel="noopener">application</a></td><td>一个<code>bean</code> 定义对应于单个<code>ServletContext</code> 的生命周期。该作用域仅适用于<code>WebApplicationContext</code>环境。</td></tr><tr><td><a href="https://docs.spring.io/spring/docs/5.1.4.RELEASE/spring-framework-reference/web.html#websocket-stomp-websocket-scope" target="_blank" rel="noopener">websocket</a></td><td>一个<code>bean</code> 定义对应于单个<code>websocket</code> 的生命周期。该作用域仅适用于<code>WebApplicationContext</code>环境。</td></tr></tbody></table><h5 id="3-1-1-singleton作用域"><a href="#3-1-1-singleton作用域" class="headerlink" title="3.1.1 singleton作用域"></a>3.1.1 singleton作用域</h5><p><code>singleton</code>作用域表示在整个<code>Spring</code>容器中一个<code>bean</code>定义只生成了唯一的一个<code>bean</code>实例，被<code>Spring</code>容器管理。所有对这个<code>bean</code>的请求和引用都会返回这个<code>bean</code>实例。</p><p>下面的图说明了<code>singleton</code>作用域是如何工作的：</p><img src="https://img-blog.csdnimg.cn/20190112232447854.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hidGpfMTIxNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom: 80%;"><blockquote><p>上图中，有3个地方引用了这个<code>bean</code>，这3个引用指向的都是同一个<code>bean</code>实例。</p></blockquote><p><code>singleton</code>作用域是<code>Spring</code>中默认的作用域，可以在定义<code>bean</code>的时候指定或者不指定都可以，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 不指定作用域，默认是singleton --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.something.DefaultAccountService"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 显示指定作用域为singleton --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.something.DefaultAccountService"</span> <span class="attr">scope</span>=<span class="string">"singleton"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h5 id="3-1-2-prototype作用域"><a href="#3-1-2-prototype作用域" class="headerlink" title="3.1.2 prototype作用域"></a>3.1.2 prototype作用域</h5><p><code>prototype</code>作用域表示的是一个<code>bean</code>定义可以创建多个<code>bean</code>实例，有点像一个类可以<code>new</code>多个实例一样。</p><p>也就是说，当注入到其他的<code>bean</code>中或者对这个<code>bean</code>定义调用<code>getBean()</code>时，都会生成一个新的<code>bean</code>实例。</p><blockquote><p>作为规则，应该对所有有状态的<code>bean</code>指定<code>prototype</code>作用域，对所有无状态的<code>bean</code>指定<code>singleton</code>作用域。</p></blockquote><p>下图描述了<code>prototype</code>作用域是如何工作的：</p><img src="https://img-blog.csdnimg.cn/20190112232503354.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hidGpfMTIxNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:80%;"><blockquote><p>上图中，每个引用对应一个新的<code>bean</code>实例。</p><p>请注意，上图中的例子不适用于生产环境。因为<code>DAO</code>通常来说是无状态的<code>bean</code>，应该指定它的作用域为<code>singleton</code>比较合适。</p></blockquote><p>在<code>xml</code>中可以这样定义<code>prototype</code>作用域：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.something.DefaultAccountService"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>/&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>和其他作用域不同的是，<code>Spring</code>并不管理作用域为<code>prototype</code>的<code>bean</code>的整个生命周期。<code>Spring</code>容器实例化它、配置它、组装它，然后就将<code>bean</code>交给给使用者了，之后就不会对这个<code>bean</code>进行管理了。因此，<code>Spring</code>不会调用该<code>bean</code>的销毁生命周期回调，使用者必须自己销毁 这个<code>bean</code>并释放资源。如果想让<code>Spring</code>来销毁它并释放资源，请使用自定义的<a href="https://docs.spring.io/spring/docs/5.1.4.RELEASE/spring-framework-reference/core.html#beans-factory-extension-bpp" target="_blank" rel="noopener"><code>bean post-processor</code></a>。</p></blockquote><h4 id="4-Bean的生命周期"><a href="#4-Bean的生命周期" class="headerlink" title="4. Bean的生命周期"></a>4. Bean的生命周期</h4><p>Spring框架可以管理singleton作用域的生命周期，不可以管理prototype的，因为对于prototype作用域的bean，Spring只负责创建，当容器创建了Bean的实例后，Bean实例就交给了客户端的代码管理，Spring容器不再跟踪其生命周期，而且不会管理那些配置作用域为prototype的bean。</p><p>Spring中 bean的生命周期是一个很复杂的过程，可借鉴Servlet的生命周期：</p><p>1.实例化</p><p>2.初始化（init）</p><p>3.接受请求（service）</p><p>4.销毁（destroy）</p><p>Bean的生命周期如下：  </p><p>​    1、实例化一个Bean－－也就是我们常说的new；</p><p>​    2、按照Spring上下文对实例化的Bean进行配置－－也就是IOC注入；</p><p>​    3、如果这个Bean已经实现了BeanNameAware接口，会调用它实现的setBeanName(String)方法，此处传递的就是Spring配置文件中Bean的id值</p><p>​    4、如果这个Bean已经实现了BeanFactoryAware接口，会调用它实现的setBeanFactory(setBeanFactory(BeanFactory)传递的是Spring工厂自身（可以用这个方式来获取其它Bean，只需在Spring配置文件中配置一个普通的Bean就可以）；</p><p>​    5、如果这个Bean已经实现了ApplicationContextAware接口，会调用setApplicationContext(ApplicationContext)方法，传入Spring上下文（同样这个方式也可以实现步骤4的内容，但比4更好，因为ApplicationContext是BeanFactory的子接口，有更多的实现方法）；</p><p>​    6、如果这个Bean关联了BeanPostProcessor接口，将会调用postProcessBeforeInitialization(Object  obj, String  s)方法，BeanPostProcessor经常被用作是Bean内容的更改，并且由于这个是在Bean初始化结束时调用那个的方法，也可以被应用于内存或缓存技术；</p><p>​    7、如果Bean在Spring配置文件中配置了init-method属性会自动调用其配置的初始化方法。</p><p>​    8、如果这个Bean关联了BeanPostProcessor接口，将会调用postProcessAfterInitialization(Object obj, String s)方法、；</p><p>​    注：以上工作完成以后就可以应用这个Bean了，那这个Bean是一个Singleton的，所以一般情况下我们调用同一个id的Bean会是在内容地址相同的实例，当然在Spring配置文件中也可以配置非Singleton，这里我们不做赘述。</p><p>​    9、当Bean不再需要时，会经过清理阶段，如果Bean实现了DisposableBean这个接口，会调用那个其实现的destroy()方法；</p><p>​    10、最后，如果这个Bean的Spring配置中配置了destroy-method属性，会自动调用其配置的销毁方法。</p><h4 id="5-Bean的装配方式"><a href="#5-Bean的装配方式" class="headerlink" title="5. Bean的装配方式"></a>5. Bean的装配方式</h4><p> Bean的装配可以理解为依赖关系注入Bean的装配方式即Bean依赖注入的方式.Spring容器支持多种形式的Bean的装配方式，如基于XML的装配、基于注解（Annotation）的装配和自动装配（其中最常用的是基于注解的装配），接下来将对前两种进行详细讲解.</p><p>1.基于xml的装配</p><p>(1)创建Java类,提供有参,无参构造方法,以及属性的set方法.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> xml;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Integer password;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(Integer password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setList</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String username, Integer password, List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String i)</span> </span>&#123;</span><br><span class="line">        username = s;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">@Override</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; </span><br><span class="line"><span class="keyword">return</span> <span class="string">"User&#123;"</span> + <span class="string">"username='"</span> + username + <span class="string">'\''</span> + <span class="string">", password="</span> + password + <span class="string">", list="</span> + list + <span class="string">'&#125;'</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2)配置xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user1"</span> <span class="attr">class</span>=<span class="string">"xml.User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"tom"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user2"</span> <span class="attr">class</span>=<span class="string">"xml.User"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"cat"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(3)测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext applicationContext =</span><br><span class="line">                <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        System.out.println(applicationContext.getBean(<span class="string">"user1"</span>));</span><br><span class="line">        System.out.println(applicationContext.getBean(<span class="string">"user2"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下:</p><p>User{username=’tom’,  password=null,   list=null}</p><p>User{username=’cat’,  password=null,   list=null}</p><p>2.Annotation注解:</p><p>基于XML的装配可能会导致XML配置文件过于臃肿，给后续的维护和升级带来一定的困难。为此，Spring提供了对Annotation（注解）技术的全面支持。</p><img src="/../asset/20180321082700422.png" style="zoom:67%;"><p>(1)xml配置</p><p> &lt;context:component-scan base-package=”annotation” /&gt;</p><p>上面为自动扫描包下所有Bean.但是不会自动装配,在此结合注解使用.</p><p>(2)UserDao接口的配置(略)以及UserDaoImpl类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span>(<span class="string">"userDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"userdao...save..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(3)UserService接口的配置(略)以及UserServiceImpl类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span>(<span class="string">"userService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span>  <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span>(name=<span class="string">"userDao"</span>)</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(4)UserController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span>(<span class="string">"userController"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span>(name=<span class="string">"userService"</span>)</span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userService.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(5)测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext applicationContext =</span><br><span class="line">                <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        UserController userController = (UserController) applicationContext.getBean(<span class="string">"userController"</span>);</span><br><span class="line">        userController.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下:</p><p>userdao…save…</p><p>(参考自:&lt;&lt;JavaEE企业级开发应用教程&gt;&gt;)</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-bean的配置&quot;&gt;&lt;a href=&quot;#1-bean的配置&quot; class=&quot;headerlink&quot; title=&quot;1. bean的配置&quot;&gt;&lt;/a&gt;1. bean的配置&lt;/h4&gt;&lt;p&gt;Spring可以看做一个大工厂，用于生产和管理Spring容器中的Bean，需要开发者将Bean配置在Spring的配置文件中。Spring框架支持XML和Properties两种格式的配置文件，实际开发中常用XML格式的配置文件。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Spring框架-Spring IOC</title>
    <link href="http://dumengblog.club/2019/11/06/Spring%E6%A1%86%E6%9E%B6-Spring-IOC/"/>
    <id>http://dumengblog.club/2019/11/06/Spring框架-Spring-IOC/</id>
    <published>2019-11-06T09:36:28.000Z</published>
    <updated>2019-11-07T08:09:39.627Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-Spring-Ioc的基本概念"><a href="#1-Spring-Ioc的基本概念" class="headerlink" title="1. Spring Ioc的基本概念"></a>1. Spring Ioc的基本概念</h4><p>控制反转（Inversion of Control，IoC），是一个比较抽象的概念，是Spring框架的核心，用来削减计算机程序的耦合问题。依赖注入（Dependency Injection,DI）是IoC另一个说法,只是从不同的角度描述相同的概念。<a id="more"></a></p><p>当某个对象需要调用另一个对象，在传统方式中调用，需要通过new的方式来创建对象。但是这种方式会增加调用者与被调用者之间的耦合性，不利于后期代码的维护和升级。</p><p>当Spring框架出现后，对象的实例不再由调用者创建，而是由Spring框架来创建。Spring容器负责控制程序之间的关系，而不是由调用者的程序代码直接控制。这样，控制权由调用者调用者转移到Spring容器，控制权发生了变化，这就是IOC。</p><p>从Spring容器角度看，Spring容器负责将被依赖的对象赋值给调用者的成员变量，相当于为调用者注入它所依赖的实例，这就是Spring的依赖注入。</p><p>可以说，Spring中实现控制反转的是IOc容器，其实现方法是依赖注入。</p><h4 id="2-Spring-IoC-容器"><a href="#2-Spring-IoC-容器" class="headerlink" title="2. Spring IoC 容器"></a>2. Spring IoC 容器</h4><p>Spring Ioc 容器的设计主要是基于BeanFactory和ApplicationContext两个接口。</p><h5 id="2-1-BeanFactory"><a href="#2-1-BeanFactory" class="headerlink" title="2.1 BeanFactory"></a>2.1 BeanFactory</h5><p>BeanFactory由org.springframework.beans.factory.BeanFactory接口定义，它提供了完整的IoC服务支持，是一个管理Bean的工厂，主要负责初始化各种Bean。BeanFactory接口有多个实现类，其中比较常见的是org.springframework.beans.factory.xml.XmlBeanFactory，该类会根据配置文件中的定义来装配Bean。由于BeanFactory实例加载Spring配置文件在实际开发中并不常见，所以在这里便不写这个代码了</p><h5 id="2-2-ApplicationContext"><a href="#2-2-ApplicationContext" class="headerlink" title="2.2  ApplicationContext"></a>2.2  ApplicationContext</h5><p>ApplicationContext是BeanFactory的子接口，也称应用上下文，由springframework.context.ApplicationContext接口定义。ApplicationContext接口除了包含BeanFactory的所有功能外，还添加了对国际化、资源访问、事件传播等内容的支持。</p><p>创建ApplicationContext接口实例有三种方法（通常用FileSystemXmlApplicationContext）:</p><ol><li>FileSystemXmlApplicationContext </li></ol><p>   Java代码  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext ctx = <span class="keyword">new</span> FileSystemXmlApplicationContext(<span class="string">"bean.xml"</span>); <span class="comment">//加载单个配置文件</span></span><br></pre></td></tr></table></figure><p>Java代码  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String[] locations = &#123;<span class="string">"bean1.xml"</span>, <span class="string">"bean2.xml"</span>, <span class="string">"bean3.xml"</span>&#125;;  </span><br><span class="line">ApplicationContext ctx = <span class="keyword">new</span> FileSystemXmlApplicationContext(locations ); <span class="comment">//加载多个配置文件</span></span><br></pre></td></tr></table></figure><p>Java代码  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext ctx =<span class="keyword">new</span> FileSystemXmlApplicationContext(<span class="string">"D:roject/bean.xml"</span>);<span class="comment">//根据具体路径加载文件</span></span><br></pre></td></tr></table></figure><ol start="2"><li>ClassPathXmlApplicationContext </li></ol><p>Java代码  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br></pre></td></tr></table></figure><p>Java代码  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String[] locations = &#123;<span class="string">"bean1.xml"</span>, <span class="string">"bean2.xml"</span>, <span class="string">"bean3.xml"</span>&#125;;  </span><br><span class="line">ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplication(locations);</span><br></pre></td></tr></table></figure><p>注：其中FileSystemXmlApplicationContext和ClassPathXmlApplicationContext与BeanFactory的xml文件定位方式一样是基于路径的。 </p><p>​    3. XmlWebApplicationContext </p><p>Java代码  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ServletContext servletContext = request.getSession().getServletContext();      </span><br><span class="line">ApplicationContext ctx = WebApplicationContextUtils.getWebApplicationContext(servletContext);</span><br></pre></td></tr></table></figure><h5 id="2-3-依赖注入的类型"><a href="#2-3-依赖注入的类型" class="headerlink" title="2.3 依赖注入的类型"></a>2.3 依赖注入的类型</h5><p>Spring框架依赖注入通常有两种实现方式，一种是使用构造方法注入，另一种是使用属性的setter方法注入。</p><p>（一般用setter方法注入）</p><p>我将会以代码的形式来展示。</p><p>一、构造方法注入</p><p>首先展示目录结构：</p><img src="/../asset/1570102183676.png" alt="1570102183676" style="zoom:67%;"><p>可以看到项目中有dao，service，test包分别建立在项目下。</p><p>TestDao.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TestDao</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TestDaoImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDaoImpl</span> <span class="keyword">implements</span> <span class="title">TestDao</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"hello you need study hard!"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TestService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TestService</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TestServiceImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> dao.TestDao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServiceImpl</span> <span class="keyword">implements</span> <span class="title">TestService</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> TestDao testDao;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TestServiceImpl</span><span class="params">(TestDao testDao)</span></span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.testDao=testDao;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">testDao.sayHello();</span><br><span class="line">System.out.println(<span class="string">"构造方法注入"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>applicationContext.xml</p><p>这里的constructor-arg元素用于定义类构造方法的参数，index定义参数的位置，ref是指某个实例的引用由于这里引用了testDao的方法所以ref为testDao的id</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans</span><br><span class="line">xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd&quot;&gt;</span><br><span class="line">&lt;bean id=&quot;testDao&quot; class=&quot;dao.TestDaoImpl&quot;&gt;&lt;/bean&gt;</span><br><span class="line">&lt;bean id=&quot;testService&quot; class=&quot;service.TestServiceImpl&quot;&gt;</span><br><span class="line">&lt;constructor-arg index=&quot;0&quot; ref=&quot;testDao&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>TESTDI.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package test;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.ApplicationContext;</span><br><span class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line">import service.TestService;</span><br><span class="line"></span><br><span class="line">public class TESTDI &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">ApplicationContext ac=new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span><br><span class="line">TestService ts=(TestService) ac.getBean(&quot;testService&quot;);</span><br><span class="line">ts.sayHello();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>hello you need study hard!<br>构造方法注入</p><p>二、setter方法注入</p><p>这里只需要更改TestServiceImpl的代码和applicationContext的配置</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> dao.TestDao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServiceImpl</span> <span class="keyword">implements</span> <span class="title">TestService</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> TestDao testDao;</span><br><span class="line"><span class="function"><span class="keyword">public</span> TestDao <span class="title">getTestDao</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> testDao;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTestDao</span><span class="params">(TestDao testDao)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.testDao = testDao;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">testDao.sayHello();</span><br><span class="line">System.out.println(<span class="string">"setter方法注入"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans</span><br><span class="line">xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd&quot;&gt;</span><br><span class="line">&lt;bean id=&quot;testDao&quot; class=&quot;dao.TestDaoImpl&quot;&gt;&lt;/bean&gt;</span><br><span class="line">&lt;bean id=&quot;testService&quot; class=&quot;service.TestServiceImpl&quot;&gt;</span><br><span class="line">&lt;property name=&quot;testDao&quot; ref=&quot;testDao&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p>hello you need study hard!<br>setter方法注入</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-Spring-Ioc的基本概念&quot;&gt;&lt;a href=&quot;#1-Spring-Ioc的基本概念&quot; class=&quot;headerlink&quot; title=&quot;1. Spring Ioc的基本概念&quot;&gt;&lt;/a&gt;1. Spring Ioc的基本概念&lt;/h4&gt;&lt;p&gt;控制反转（Inversion of Control，IoC），是一个比较抽象的概念，是Spring框架的核心，用来削减计算机程序的耦合问题。依赖注入（Dependency Injection,DI）是IoC另一个说法,只是从不同的角度描述相同的概念。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Spring框架" scheme="http://dumengblog.club/tags/Spring%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>关于本次课设某宝项目</title>
    <link href="http://dumengblog.club/2019/11/01/%E5%85%B3%E4%BA%8E%E6%9C%AC%E6%AC%A1%E8%AF%BE%E8%AE%BE%E6%9F%90%E5%AE%9D%E9%A1%B9%E7%9B%AE/"/>
    <id>http://dumengblog.club/2019/11/01/关于本次课设某宝项目/</id>
    <published>2019-11-01T02:12:18.000Z</published>
    <updated>2019-11-01T02:28:57.303Z</updated>
    
    <content type="html"><![CDATA[<p>本次课设让我收获还是蛮多的，比起之前全是老师给的代码一个劲的Ctrl +c ,Ctrl+v好了不知道多少，本次项目分为前端后端，前端用的html+css，后端java+mysql数据库，运用ssh框架（Spring+Struts2+Hibernate）。</p><a id="more"></a><p>买家端：</p><img src="/../asset/1572574779845.png" alt="1572574779845" style="zoom:50%;"><p>卖家端：</p><img src="/../asset/1572574787035.png" alt="1572574787035" style="zoom:50%;"><p>登录页面：</p><img src="/../asset/1572574874840.png" alt="1572574874840" style="zoom:50%;"><p>注册界面：</p><img src="/../asset/1572574906296.png" alt="1572574906296" style="zoom:50%;"><p>添加商品：</p><img src="/../asset/1572574939070.png" alt="1572574939070" style="zoom:50%;"><p>商品详情：</p><img src="/../asset/1572574969610.png" alt="1572574969610" style="zoom:50%;"><p>加入购物车：</p><p><img src="/../asset/1572574999294.png" alt="1572574999294"></p><p>这次项目毕竟是第一个全是我自己从头写到最后的一个项目，在此也就当纪念一下了。</p><p>项目的源码我己经上传到github上了。点击右上角的<img src="/../asset/1572575208282.png" alt="1572575208282"></p><p>进入到我的github主页里的myproject仓库</p><p><img src="/../asset/1572575249991.png" alt="1572575249991"></p><p>即可下载。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本次课设让我收获还是蛮多的，比起之前全是老师给的代码一个劲的Ctrl +c ,Ctrl+v好了不知道多少，本次项目分为前端后端，前端用的html+css，后端java+mysql数据库，运用ssh框架（Spring+Struts2+Hibernate）。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="项目" scheme="http://dumengblog.club/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>怎么把自己的项目传到github上</title>
    <link href="http://dumengblog.club/2019/11/01/%E6%80%8E%E4%B9%88%E6%8A%8A%E8%87%AA%E5%B7%B1%E7%9A%84%E9%A1%B9%E7%9B%AE%E4%BC%A0%E5%88%B0github%E4%B8%8A/"/>
    <id>http://dumengblog.club/2019/11/01/怎么把自己的项目传到github上/</id>
    <published>2019-11-01T00:52:44.000Z</published>
    <updated>2019-10-04T02:05:37.694Z</updated>
    
    <content type="html"><![CDATA[<p>当你做好了一个项目想要传到github上，应该怎么做呢</p><p>1.</p><p>首先需要去官网下载git ：<strong><a href="https://git-for-windows.github.io/" target="_blank" rel="noopener">https://git-for-windows.github.io/</a></strong>，然后在你自己的github上新建一个仓库，点击自己的头像。</p><a id="more"></a><img src="/../asset/1570150797478.png" style="zoom:50%;"><p>2.点击new，并且填写仓库名</p><img src="/../asset/1570150974258.png" alt="1570150974258" style="zoom: 33%;"><img src="/../asset/1570151046549.png" alt="1570151046549" style="zoom:50%;"><p>建立成功后，我们需要的是这个仓库的地址</p><img src="/../asset/1570151149328.png" alt="1570151149328" style="zoom: 33%;"><p>3.在桌面新建一个文件夹用来传输项目，可以右击鼠标点击git bash here使用命令，或者直接新建文件夹也可以，接下来你的桌面就会多一个Project的文件夹。</p><img src="/../asset/1570151646282.png" alt="1570151646282" style="zoom: 50%;"><p>4.通过命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>把这个文件夹变成Git可管理的仓库</p><p><img src="/../asset/1570151768083.png" alt="1570151768083"></p><p>然后你的文件夹下会多一个.git,将自己的项目复制在文件夹下。</p><img src="/../asset/1570151884947.png" alt="1570151884947" style="zoom:50%;"><p>5.在这个过程中你其实可以一直使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p>来查看你当前的状态。</p><p><img src="/../asset/1570151958976.png" alt="1570151958976"></p><p>6.这里提示你虽然把项目粘贴过来了，但还没有add到Git仓库上，然后我们通过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><p>把刚才复制过来的项目全部添加到仓库上。（add和.之间有空格）</p><p>可能你输入后没什么反应，此时我们再输入git status就会更新你的状态</p><img src="/../asset/1570152139995.png" alt="1570152139995" style="zoom:50%;"><p>如果这样的就是可以了</p><p>7.接下来你要做的就是用git commit把项目提交到仓库，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;first commit&quot;</span><br></pre></td></tr></table></figure><p>-m后面引号里面是本次提交的注释内容，这个可以不写，但最好写上，不然会报错，详情自行Google。 好了，我们本地Git仓库这边的工作做完了，下面就到了连接远程仓库（也就是连接Github）</p><p>8.接下来创建SSH KEY。先看一下你C盘用户目录下有没有.ssh目录，有的话看下里面有没有id_rsa和id_rsa.pub这两个文件，</p><p>有就跳到下一步，没有就通过下面命令创建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</span><br></pre></td></tr></table></figure><p>​       然后一路回车。这时你就会在用户下的.ssh目录里找到id_rsa和id_rsa.pub这两个文件   <img src="/../asset/1570152438910.png" alt="1570152438910"></p><p>登录Github,找到右上角的图标，打开点进里面的Settings，再选中里面的SSH and GPG KEYS，点击右上角的New SSH key，然后Title里面随便填，再把刚才id_rsa.pub里面的内容复制到Title下面的Key内容框里面，最后点击Add SSH key，这样就完成了SSH Key的加密。</p><img src="/../asset/1570152549820.png" alt="1570152549820" style="zoom:50%;"><img src="/../asset/1570152573224.png" alt="1570152573224" style="zoom:50%;"><p>9.SSH配置完成后，我们就可以和本地仓库进行关联了，根据创建好的Git仓库页面的提示，可以在本地仓库的命令行输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/dmabd/my_project.git</span><br></pre></td></tr></table></figure><p>后面的网址就是你刚开始仓库的地址。</p><p>10.连好之后我们就可以把本地库的所有内容推送到远程仓库（也就是Github）上了，通过：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>​       由于新建的远程仓库是空的，所以要加上-u这个参数，等远程仓库里面有了内容之后，下次再从本地库上传内容的时候只需下面这样就可以了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>命令输入后会让你填写你的github用户名和密码。</p><p><img src="/../asset/1570152977276.png" alt="1570152977276"></p><p>​        上传项目的过程可能需要等一段时间，完成之后是这样的：</p><p><img src="/../asset/1570153084267.png" alt="1570153084267"></p><p>此时我们返回github的仓库中刷新页面就会出现我们的项目了。</p><p><img src="/../asset/1570153169215.png" alt="1570153169215"></p><p>11.个人建议书写一个readme帮助别人来了解借鉴你的项目。</p><p> 至此就完成了将本地项目上传到Github的整个过程。</p><p>​      另外，这里有个坑需要注意一下，就是在上面第七步创建远程仓库的时候，如果你勾选了Initialize this repository with a README（就是创建仓库的时候自动给你创建一个README文件），那么到了第九步你将本地仓库内容推送到远程仓库的时候就会报一个failed to push some refs to <a href="https://github.com/guyibang/TEST2.git的错。" target="_blank" rel="noopener">https://github.com/guyibang/TEST2.git的错。</a></p><p>​      <img src="https://img-blog.csdn.net/20170414212947320" alt="img"></p><p>​      这是由于你新创建的那个仓库里面的README文件不在本地仓库目录中，这时我们可以通过以下命令先将内容合并以下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull --rebase origin master</span><br></pre></td></tr></table></figure><p>​       <img src="https://img-blog.csdn.net/20170414213315899" alt="img"></p><p>​       这时你再push就能成功了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当你做好了一个项目想要传到github上，应该怎么做呢&lt;/p&gt;
&lt;p&gt;1.&lt;/p&gt;
&lt;p&gt;首先需要去官网下载git ：&lt;strong&gt;&lt;a href=&quot;https://git-for-windows.github.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://git-for-windows.github.io/&lt;/a&gt;&lt;/strong&gt;，然后在你自己的github上新建一个仓库，点击自己的头像。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="github" scheme="http://dumengblog.club/tags/github/"/>
    
  </entry>
  
</feed>
